From 8b57a722892fbe8fa583e3c143474cebe5591d5d Mon Sep 17 00:00:00 2001
From: Anon <anon@anon.com>
Date: Sun, 27 Jan 2019 17:29:16 +0000
Subject: [PATCH 1/4] A

---
 client.go                    |  26 ++++++
 net_test.go                  |   2 +-
 secrethandshake/conn.go      |  41 ++++++++++
 secrethandshake/evilstate.go | 151 +++++++++++++++++++++++++++++++++++
 4 files changed, 219 insertions(+), 1 deletion(-)
 create mode 100644 secrethandshake/evilstate.go

diff --git a/client.go b/client.go
index 0a51d16..46d72b6 100644
--- a/client.go
+++ b/client.go
@@ -68,3 +68,29 @@ func (c *Client) ConnWrapper(pubKey [ed25519.PublicKeySize]byte) netwrap.ConnWra
 		return boxed, nil
 	}
 }
+
+func (c *Client) EvilConnWrapper(pubKey [ed25519.PublicKeySize]byte) netwrap.ConnWrapper {
+	return func(conn net.Conn) (net.Conn, error) {
+		state, err := secrethandshake.EvilNewClientState(c.appKey, c.kp, pubKey)
+		if err != nil {
+			return nil, err
+		}
+
+		if err := secrethandshake.EvilClient(state, conn); err != nil {
+			return nil, err
+		}
+
+		enKey, enNonce := state.GetBoxstreamEncKeys()
+		deKey, deNonce := state.GetBoxstreamDecKeys()
+
+		boxed := &Conn{
+			ReadCloser: boxstream.NewUnboxer(conn, &deNonce, &deKey),
+			WriteCloser: boxstream.NewBoxer(conn, &enNonce, &enKey),
+			conn:   conn,
+			local:  c.kp.Public[:],
+			remote: state.Remote(),
+		}
+
+		return boxed, nil
+	}
+}
\ No newline at end of file
diff --git a/net_test.go b/net_test.go
index dd2924a..ef06e03 100644
--- a/net_test.go
+++ b/net_test.go
@@ -96,7 +96,7 @@ func TestNet(t *testing.T) {
 	tcheck(t, err)
 
 	tcpAddr := netwrap.GetAddr(l.Addr(), "tcp")
-	connWrap := c.ConnWrapper(serverKeys.Public)
+	connWrap := c.EvilConnWrapper(serverKeys.Public)
 
 	conn, err := netwrap.Dial(tcpAddr, connWrap)
 	tcheck(t, err)
diff --git a/secrethandshake/conn.go b/secrethandshake/conn.go
index 022ab0f..be86fe1 100644
--- a/secrethandshake/conn.go
+++ b/secrethandshake/conn.go
@@ -93,6 +93,47 @@ func Client(state *State, conn io.ReadWriter) (err error) {
 	return nil
 }
 
+func EvilClient(state *State, conn io.ReadWriter) (err error) {
+	// send challenge
+	_, err = io.Copy(conn, bytes.NewReader(state.EvilCreateChallenge()))
+	if err != nil {
+		return errors.Wrapf(err, "secrethandshake: sending challenge failed.")
+	}
+
+	// recv challenge
+	chalResp := make([]byte, ChallengeLength)
+	_, err = io.ReadFull(conn, chalResp)
+	if err != nil {
+		return errors.Wrapf(err, "secrethandshake: receiving challenge failed.")
+	}
+
+	// verify challenge
+	if !state.EvilVerifyChallenge(chalResp) {
+		return errors.New("secrethandshake: Wrong protocol version?")
+	}
+
+	// send authentication vector
+	_, err = io.Copy(conn, bytes.NewReader(state.EvilCreateClientAuth()))
+	if err != nil {
+		return errors.Wrapf(err, "secrethandshake: sending client auth failed.")
+	}
+
+	// recv authentication vector
+	boxedSig := make([]byte, ServerAuthLength)
+	_, err = io.ReadFull(conn, boxedSig)
+	if err != nil {
+		return errors.Wrapf(err, "secrethandshake: receiving server auth failed")
+	}
+
+	// authenticate remote
+	if !state.EvilVerifyServerAccept(boxedSig) {
+		return errors.New("secrethandshake: server not authenticated")
+	}
+
+	state.cleanSecrets()
+	return nil
+}
+
 // Server shakes hands using the cryptographic identity specified in s using conn in the server role
 func Server(state *State, conn io.ReadWriter) (err error) {
 	// recv challenge
diff --git a/secrethandshake/evilstate.go b/secrethandshake/evilstate.go
new file mode 100644
index 0000000..4eccad0
--- /dev/null
+++ b/secrethandshake/evilstate.go
@@ -0,0 +1,151 @@
+/*
+This file is part of secretstream.
+
+secretstream is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+secretstream is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with secretstream.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+package secrethandshake
+
+import (
+	"bytes"
+
+	"crypto/hmac"
+	"crypto/rand"
+	"crypto/sha256"
+	"crypto/sha512"
+
+	"github.com/agl/ed25519"
+	"github.com/agl/ed25519/extra25519"
+	"golang.org/x/crypto/curve25519"
+	"golang.org/x/crypto/nacl/box"
+)
+
+
+// NewClientState initializes the state for the client side
+func EvilNewClientState(appKey []byte, local EdKeyPair, remotePublic [ed25519.PublicKeySize]byte) (*State, error) {
+	state, err := EvilNewState(appKey, local)
+	if err != nil {
+		return state, err
+	}
+
+	state.remotePublic = remotePublic
+	return state, err
+}
+
+// newState initializes the state needed by both client and server
+func EvilNewState(appKey []byte, local EdKeyPair) (*State, error) {
+	pubKey, secKey, _ := box.GenerateKey(rand.Reader)
+
+	s := State{
+		appKey: appKey,
+	}
+	copy(s.localExchange.Public[:], pubKey[:])
+	copy(s.localExchange.Secret[:], secKey[:])
+	s.local = local
+
+	return &s, nil
+}
+
+// createChallenge returns a buffer with a challenge
+func (s *State) EvilCreateChallenge() []byte {
+	appMacr := hmac.New(sha512.New, s.appKey[:32])
+	appMacr.Write(s.localExchange.Public[:])
+	s.localAppMac = appMacr.Sum(nil)[:32]
+	return append(s.localAppMac, s.localExchange.Public[:]...)
+}
+
+// verifyChallenge returns whether the passed buffer is valid
+func (s *State) EvilVerifyChallenge(ch []byte) bool {
+	mac := ch[:32]
+	remoteEphPubKey := ch[32:]
+
+	appMac := hmac.New(sha512.New, s.appKey[:32])
+	appMac.Write(remoteEphPubKey)
+	ok := hmac.Equal(appMac.Sum(nil)[:32], mac)
+
+	copy(s.remoteExchange.Public[:], remoteEphPubKey)
+	s.remoteAppMac = mac
+
+	var sec [32]byte
+	curve25519.ScalarMult(&sec, &s.localExchange.Secret, &s.remoteExchange.Public)
+	copy(s.secret[:], sec[:])
+
+	secHasher := sha256.New()
+	secHasher.Write(s.secret[:])
+	s.secHash = secHasher.Sum(nil)
+
+	return ok
+}
+
+// createClientAuth returns a buffer containing a clientAuth message
+func (s *State) EvilCreateClientAuth() []byte {
+	var curveRemotePubKey [32]byte
+	extra25519.PublicKeyToCurve25519(&curveRemotePubKey, &s.remotePublic)
+	var aBob [32]byte
+	curve25519.ScalarMult(&aBob, &s.localExchange.Secret, &curveRemotePubKey)
+	copy(s.aBob[:], aBob[:])
+
+	secHasher := sha256.New()
+	secHasher.Write(s.appKey)
+	secHasher.Write(s.secret[:])
+	secHasher.Write(s.aBob[:])
+	copy(s.secret2[:], secHasher.Sum(nil))
+
+	var sigMsg bytes.Buffer
+	sigMsg.Write(s.appKey)
+	sigMsg.Write(s.remotePublic[:])
+	sigMsg.Write(s.secHash)
+
+	sig := ed25519.Sign(&s.local.Secret, sigMsg.Bytes())
+
+	var helloBuf bytes.Buffer
+	helloBuf.Write(sig[:])
+	helloBuf.Write(s.local.Public[:])
+	s.hello = helloBuf.Bytes()
+
+	out := make([]byte, 0, len(s.hello)-box.Overhead)
+	var n [24]byte
+	out = box.SealAfterPrecomputation(out, s.hello, &n, &s.secret2)
+	return out
+}
+
+// verifyServerAccept returns whether the passed buffer contains a valid serverAccept message
+func (s *State) EvilVerifyServerAccept(boxedOkay []byte) bool {
+	var curveLocalSec [32]byte
+	extra25519.PrivateKeyToCurve25519(&curveLocalSec, &s.local.Secret)
+	var bAlice [32]byte
+	curve25519.ScalarMult(&bAlice, &curveLocalSec, &s.remoteExchange.Public)
+	copy(s.bAlice[:], bAlice[:])
+
+	secHasher := sha256.New()
+	secHasher.Write(s.appKey)
+	secHasher.Write(s.secret[:])
+	secHasher.Write(s.aBob[:])
+	secHasher.Write(s.bAlice[:])
+	copy(s.secret3[:], secHasher.Sum(nil))
+
+	var nonce [24]byte // always 0?
+	out := make([]byte, 0, len(boxedOkay)-16)
+	out, openOk := box.OpenAfterPrecomputation(out, boxedOkay, &nonce, &s.secret3)
+
+	var sig [ed25519.SignatureSize]byte
+	copy(sig[:], out)
+
+	var sigMsg bytes.Buffer
+	sigMsg.Write(s.appKey)
+	sigMsg.Write(s.hello[:])
+	sigMsg.Write(s.secHash)
+
+	return ed25519.Verify(&s.remotePublic, sigMsg.Bytes(), &sig) && openOk
+}
\ No newline at end of file
-- 
2.17.1


From ff96c300525bb0ed973d6e23bc249ff1d9d88807 Mon Sep 17 00:00:00 2001
From: Anon <anon@anon.com>
Date: Sun, 27 Jan 2019 17:48:40 +0000
Subject: [PATCH 2/4] B

---
 client.go                    |  4 ++--
 net_test.go                  |  2 +-
 secrethandshake/evilstate.go | 11 ++++++-----
 secrethandshake/state.go     | 13 +++++++++++--
 4 files changed, 20 insertions(+), 10 deletions(-)

diff --git a/client.go b/client.go
index 46d72b6..f9e52fb 100644
--- a/client.go
+++ b/client.go
@@ -69,9 +69,9 @@ func (c *Client) ConnWrapper(pubKey [ed25519.PublicKeySize]byte) netwrap.ConnWra
 	}
 }
 
-func (c *Client) EvilConnWrapper(pubKey [ed25519.PublicKeySize]byte) netwrap.ConnWrapper {
+func (c *Client) EvilConnWrapper() netwrap.ConnWrapper {
 	return func(conn net.Conn) (net.Conn, error) {
-		state, err := secrethandshake.EvilNewClientState(c.appKey, c.kp, pubKey)
+		state, err := secrethandshake.EvilNewClientState(c.appKey, c.kp)
 		if err != nil {
 			return nil, err
 		}
diff --git a/net_test.go b/net_test.go
index ef06e03..63e1b8a 100644
--- a/net_test.go
+++ b/net_test.go
@@ -96,7 +96,7 @@ func TestNet(t *testing.T) {
 	tcheck(t, err)
 
 	tcpAddr := netwrap.GetAddr(l.Addr(), "tcp")
-	connWrap := c.EvilConnWrapper(serverKeys.Public)
+	connWrap := c.EvilConnWrapper()
 
 	conn, err := netwrap.Dial(tcpAddr, connWrap)
 	tcheck(t, err)
diff --git a/secrethandshake/evilstate.go b/secrethandshake/evilstate.go
index 4eccad0..f459077 100644
--- a/secrethandshake/evilstate.go
+++ b/secrethandshake/evilstate.go
@@ -19,7 +19,7 @@ package secrethandshake
 
 import (
 	"bytes"
-
+	"fmt"
 	"crypto/hmac"
 	"crypto/rand"
 	"crypto/sha256"
@@ -33,13 +33,12 @@ import (
 
 
 // NewClientState initializes the state for the client side
-func EvilNewClientState(appKey []byte, local EdKeyPair, remotePublic [ed25519.PublicKeySize]byte) (*State, error) {
+func EvilNewClientState(appKey []byte, local EdKeyPair) (*State, error) {
 	state, err := EvilNewState(appKey, local)
 	if err != nil {
 		return state, err
 	}
 
-	state.remotePublic = remotePublic
 	return state, err
 }
 
@@ -62,6 +61,7 @@ func (s *State) EvilCreateChallenge() []byte {
 	appMacr := hmac.New(sha512.New, s.appKey[:32])
 	appMacr.Write(s.localExchange.Public[:])
 	s.localAppMac = appMacr.Sum(nil)[:32]
+	fmt.Print("Evil Client: Sent Client Challenge\n")
 	return append(s.localAppMac, s.localExchange.Public[:]...)
 }
 
@@ -84,7 +84,7 @@ func (s *State) EvilVerifyChallenge(ch []byte) bool {
 	secHasher := sha256.New()
 	secHasher.Write(s.secret[:])
 	s.secHash = secHasher.Sum(nil)
-
+	fmt.Print("Evil Client: Verified Server Challenge\n")
 	return ok
 }
 
@@ -117,6 +117,7 @@ func (s *State) EvilCreateClientAuth() []byte {
 	out := make([]byte, 0, len(s.hello)-box.Overhead)
 	var n [24]byte
 	out = box.SealAfterPrecomputation(out, s.hello, &n, &s.secret2)
+	fmt.Print("Evil Client: Sent Client Auth\n")
 	return out
 }
 
@@ -146,6 +147,6 @@ func (s *State) EvilVerifyServerAccept(boxedOkay []byte) bool {
 	sigMsg.Write(s.appKey)
 	sigMsg.Write(s.hello[:])
 	sigMsg.Write(s.secHash)
-
+	fmt.Print("Evil Client: Verified Server Accept\n")
 	return ed25519.Verify(&s.remotePublic, sigMsg.Bytes(), &sig) && openOk
 }
\ No newline at end of file
diff --git a/secrethandshake/state.go b/secrethandshake/state.go
index 5a2b0e3..f664bed 100644
--- a/secrethandshake/state.go
+++ b/secrethandshake/state.go
@@ -19,7 +19,7 @@ package secrethandshake
 
 import (
 	"bytes"
-
+	"fmt"
 	"crypto/hmac"
 	"crypto/rand"
 	"crypto/sha256"
@@ -158,6 +158,7 @@ var nullHello [ed25519.SignatureSize + ed25519.PublicKeySize]byte
 
 // verifyClientAuth returns whether a buffer contains a valid clientAuth message
 func (s *State) verifyClientAuth(data []byte) bool {
+	fmt.Print("Server: Checking Client Auth\n")
 	var cvSec, aBob [32]byte
 	extra25519.PrivateKeyToCurve25519(&cvSec, &s.local.Secret)
 	curve25519.ScalarMult(&aBob, &cvSec, &s.remoteExchange.Public)
@@ -187,9 +188,12 @@ func (s *State) verifyClientAuth(data []byte) bool {
 	   copy(pub, ...)
 	*/
 	if openOk {
+		fmt.Print("Server: Opened Box From Client\n")
 		copy(sig[:], s.hello[:ed25519.SignatureSize])
 		copy(public[:], s.hello[ed25519.SignatureSize:])
 	} else {
+		fmt.Print("Server: Failed to Open Box From Client\n")
+		panic("Server Rejected Client Message")
 		copy(sig[:], nullHello[:ed25519.SignatureSize])
 		copy(public[:], nullHello[ed25519.SignatureSize:])
 	}
@@ -199,7 +203,12 @@ func (s *State) verifyClientAuth(data []byte) bool {
 	sigMsg.Write(s.local.Public[:])
 	sigMsg.Write(s.secHash)
 	verifyOk := ed25519.Verify(&public, sigMsg.Bytes(), &sig)
-
+	if verifyOk {
+		fmt.Print("Server: Verified Client Signature\n")
+	} else {
+		fmt.Print("Server: Rejected Client Signature\n")
+		panic("Server Rejected Client Message")
+	}
 	copy(s.remotePublic[:], public[:])
 	return openOk && verifyOk
 }
-- 
2.17.1


From 3e206313456b3db98cabf88cf0520855e0919b4f Mon Sep 17 00:00:00 2001
From: Anon <anon@anon.com>
Date: Sun, 27 Jan 2019 20:24:20 +0000
Subject: [PATCH 3/4] C

---
 secrethandshake/evilstate.go | 9 +++++++--
 secrethandshake/state.go     | 4 +++-
 2 files changed, 10 insertions(+), 3 deletions(-)

diff --git a/secrethandshake/evilstate.go b/secrethandshake/evilstate.go
index f459077..976a7b6 100644
--- a/secrethandshake/evilstate.go
+++ b/secrethandshake/evilstate.go
@@ -34,6 +34,7 @@ import (
 
 // NewClientState initializes the state for the client side
 func EvilNewClientState(appKey []byte, local EdKeyPair) (*State, error) {
+	//TODO Set local to identity
 	state, err := EvilNewState(appKey, local)
 	if err != nil {
 		return state, err
@@ -44,6 +45,7 @@ func EvilNewClientState(appKey []byte, local EdKeyPair) (*State, error) {
 
 // newState initializes the state needed by both client and server
 func EvilNewState(appKey []byte, local EdKeyPair) (*State, error) {
+	//TODO Set Eph to identity
 	pubKey, secKey, _ := box.GenerateKey(rand.Reader)
 
 	s := State{
@@ -79,6 +81,7 @@ func (s *State) EvilVerifyChallenge(ch []byte) bool {
 
 	var sec [32]byte
 	curve25519.ScalarMult(&sec, &s.localExchange.Secret, &s.remoteExchange.Public)
+	//TODO Fix Key Derivation
 	copy(s.secret[:], sec[:])
 
 	secHasher := sha256.New()
@@ -94,6 +97,7 @@ func (s *State) EvilCreateClientAuth() []byte {
 	extra25519.PublicKeyToCurve25519(&curveRemotePubKey, &s.remotePublic)
 	var aBob [32]byte
 	curve25519.ScalarMult(&aBob, &s.localExchange.Secret, &curveRemotePubKey)
+	//TODO Fix Key Derivation
 	copy(s.aBob[:], aBob[:])
 
 	secHasher := sha256.New()
@@ -108,7 +112,7 @@ func (s *State) EvilCreateClientAuth() []byte {
 	sigMsg.Write(s.secHash)
 
 	sig := ed25519.Sign(&s.local.Secret, sigMsg.Bytes())
-
+	//TODO Fix Signature
 	var helloBuf bytes.Buffer
 	helloBuf.Write(sig[:])
 	helloBuf.Write(s.local.Public[:])
@@ -128,6 +132,7 @@ func (s *State) EvilVerifyServerAccept(boxedOkay []byte) bool {
 	var bAlice [32]byte
 	curve25519.ScalarMult(&bAlice, &curveLocalSec, &s.remoteExchange.Public)
 	copy(s.bAlice[:], bAlice[:])
+	//TODO Fix Key Derivation
 
 	secHasher := sha256.New()
 	secHasher.Write(s.appKey)
@@ -139,7 +144,7 @@ func (s *State) EvilVerifyServerAccept(boxedOkay []byte) bool {
 	var nonce [24]byte // always 0?
 	out := make([]byte, 0, len(boxedOkay)-16)
 	out, openOk := box.OpenAfterPrecomputation(out, boxedOkay, &nonce, &s.secret3)
-
+	//TODO Add Debug Checks here, if we didn't patch it might fail!
 	var sig [ed25519.SignatureSize]byte
 	copy(sig[:], out)
 
diff --git a/secrethandshake/state.go b/secrethandshake/state.go
index f664bed..ef0577b 100644
--- a/secrethandshake/state.go
+++ b/secrethandshake/state.go
@@ -163,7 +163,7 @@ func (s *State) verifyClientAuth(data []byte) bool {
 	extra25519.PrivateKeyToCurve25519(&cvSec, &s.local.Secret)
 	curve25519.ScalarMult(&aBob, &cvSec, &s.remoteExchange.Public)
 	copy(s.aBob[:], aBob[:])
-
+	fmt.Printf("Server: S_LTK and C_EPH = %x \n", aBob)
 	secHasher := sha256.New()
 	secHasher.Write(s.appKey)
 	secHasher.Write(s.secret[:])
@@ -174,6 +174,7 @@ func (s *State) verifyClientAuth(data []byte) bool {
 
 	var nonce [24]byte // always 0?
 	var openOk bool
+	fmt.Printf("Server: Box Key = %x \n", s.secret2)
 	s.hello, openOk = box.OpenAfterPrecomputation(s.hello, data, &nonce, &s.secret2)
 
 	var sig [ed25519.SignatureSize]byte
@@ -202,6 +203,7 @@ func (s *State) verifyClientAuth(data []byte) bool {
 	sigMsg.Write(s.appKey)
 	sigMsg.Write(s.local.Public[:])
 	sigMsg.Write(s.secHash)
+	fmt.Printf("Server: Client Public = %x\n", public)
 	verifyOk := ed25519.Verify(&public, sigMsg.Bytes(), &sig)
 	if verifyOk {
 		fmt.Print("Server: Verified Client Signature\n")
-- 
2.17.1


From a6ed72dd70ac35495125edea5c86c70b64deb3ca Mon Sep 17 00:00:00 2001
From: Anon <anon@anon.com>
Date: Sun, 27 Jan 2019 22:33:15 +0000
Subject: [PATCH 4/4] D

---
 net_test.go                  |  2 +-
 secrethandshake/evilstate.go | 71 +++++++++++++++++++++++++++++-------
 secrethandshake/state.go     |  1 +
 3 files changed, 60 insertions(+), 14 deletions(-)

diff --git a/net_test.go b/net_test.go
index 63e1b8a..0be3d4e 100644
--- a/net_test.go
+++ b/net_test.go
@@ -111,7 +111,7 @@ func TestNet(t *testing.T) {
 
 	_, err = fmt.Fprintf(conn, testData)
 	tcheck(t, err)
-
+	fmt.Print("Evil Client connected WITHOUT knowing key! \n")
 }
 
 func TestNetClose(t *testing.T) {
diff --git a/secrethandshake/evilstate.go b/secrethandshake/evilstate.go
index 976a7b6..0bd6567 100644
--- a/secrethandshake/evilstate.go
+++ b/secrethandshake/evilstate.go
@@ -45,15 +45,18 @@ func EvilNewClientState(appKey []byte, local EdKeyPair) (*State, error) {
 
 // newState initializes the state needed by both client and server
 func EvilNewState(appKey []byte, local EdKeyPair) (*State, error) {
-	//TODO Set Eph to identity
-	pubKey, secKey, _ := box.GenerateKey(rand.Reader)
+	_, secKey, _ := box.GenerateKey(rand.Reader)
+
+	idPub := [32]byte{ 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
 
 	s := State{
 		appKey: appKey,
 	}
-	copy(s.localExchange.Public[:], pubKey[:])
+	copy(s.localExchange.Public[:], idPub[:]) // Changed to be the identity
 	copy(s.localExchange.Secret[:], secKey[:])
-	s.local = local
+	s.local = local //EdKeypair
 
 	return &s, nil
 }
@@ -80,8 +83,12 @@ func (s *State) EvilVerifyChallenge(ch []byte) bool {
 	s.remoteAppMac = mac
 
 	var sec [32]byte
-	curve25519.ScalarMult(&sec, &s.localExchange.Secret, &s.remoteExchange.Public)
-	//TODO Fix Key Derivation
+
+	idPub := [32]byte{ 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
+
+	curve25519.ScalarMult(&sec, &s.localExchange.Secret, &idPub)
 	copy(s.secret[:], sec[:])
 
 	secHasher := sha256.New()
@@ -96,8 +103,12 @@ func (s *State) EvilCreateClientAuth() []byte {
 	var curveRemotePubKey [32]byte
 	extra25519.PublicKeyToCurve25519(&curveRemotePubKey, &s.remotePublic)
 	var aBob [32]byte
-	curve25519.ScalarMult(&aBob, &s.localExchange.Secret, &curveRemotePubKey)
-	//TODO Fix Key Derivation
+
+	idPub := [32]byte{ 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
+
+	curve25519.ScalarMult(&aBob, &s.localExchange.Secret, &idPub)
 	copy(s.aBob[:], aBob[:])
 
 	secHasher := sha256.New()
@@ -111,13 +122,31 @@ func (s *State) EvilCreateClientAuth() []byte {
 	sigMsg.Write(s.remotePublic[:])
 	sigMsg.Write(s.secHash)
 
-	sig := ed25519.Sign(&s.local.Secret, sigMsg.Bytes())
+	//sig := ed25519.Sign(&s.local.Secret, sigMsg.Bytes())
 	//TODO Fix Signature
+	//Replace Sig with pk-sk pair? Is it that simple?
+	//fakeSigKeys, _ := GenEdKeyPair(nil)
+
+	zeros := [32]byte{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
+
+	var fakeSig bytes.Buffer
+
+	fakeSig.Write(idPub[:])
+	fakeSig.Write(zeros[:])
+
+	//fakeSig.Write(fakeSigKeys.Public[:])
+	//fakeSig.Write(fakeSigKeys.Secret[:32])
+	sig := fakeSig.Bytes()
+
 	var helloBuf bytes.Buffer
 	helloBuf.Write(sig[:])
-	helloBuf.Write(s.local.Public[:])
+	helloBuf.Write(idPub[:])
 	s.hello = helloBuf.Bytes()
 
+	fmt.Printf("Evil Client: Box Payload = %x \n",s.hello)
+
 	out := make([]byte, 0, len(s.hello)-box.Overhead)
 	var n [24]byte
 	out = box.SealAfterPrecomputation(out, s.hello, &n, &s.secret2)
@@ -127,10 +156,13 @@ func (s *State) EvilCreateClientAuth() []byte {
 
 // verifyServerAccept returns whether the passed buffer contains a valid serverAccept message
 func (s *State) EvilVerifyServerAccept(boxedOkay []byte) bool {
+	idPub := [32]byte{ 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
 	var curveLocalSec [32]byte
 	extra25519.PrivateKeyToCurve25519(&curveLocalSec, &s.local.Secret)
 	var bAlice [32]byte
-	curve25519.ScalarMult(&bAlice, &curveLocalSec, &s.remoteExchange.Public)
+	curve25519.ScalarMult(&bAlice, &curveLocalSec, &idPub)
 	copy(s.bAlice[:], bAlice[:])
 	//TODO Fix Key Derivation
 
@@ -145,6 +177,12 @@ func (s *State) EvilVerifyServerAccept(boxedOkay []byte) bool {
 	out := make([]byte, 0, len(boxedOkay)-16)
 	out, openOk := box.OpenAfterPrecomputation(out, boxedOkay, &nonce, &s.secret3)
 	//TODO Add Debug Checks here, if we didn't patch it might fail!
+
+	if openOk {
+		fmt.Print("Evil Client: Opened Box From Server\n")
+	} else {
+		fmt.Print("Evil Client: Failed to Open Box From Server\n")
+	}
 	var sig [ed25519.SignatureSize]byte
 	copy(sig[:], out)
 
@@ -152,6 +190,13 @@ func (s *State) EvilVerifyServerAccept(boxedOkay []byte) bool {
 	sigMsg.Write(s.appKey)
 	sigMsg.Write(s.hello[:])
 	sigMsg.Write(s.secHash)
-	fmt.Print("Evil Client: Verified Server Accept\n")
-	return ed25519.Verify(&s.remotePublic, sigMsg.Bytes(), &sig) && openOk
+	fmt.Print("Evil Client: Finished Checking Server Accept (ignoring Signature)\n")
+	s.local.Public = idPub
+	fmt.Printf("s.secret = %x \n", s.secret[:])
+	//TODO RemotePublic is currently incorrect, we should remember it from earlier
+	//So can't encrypt currently, but can decrypt!
+	//fmt.Printf("s.remotePublic = %x \n", s.remotePublic[:])
+	fmt.Printf("s.localPublic = %x \n", s.local.Public[:])
+	return openOk
+	//return ed25519.Verify(&s.remotePublic, sigMsg.Bytes(), &sig) && openOk
 }
\ No newline at end of file
diff --git a/secrethandshake/state.go b/secrethandshake/state.go
index ef0577b..a28cc7a 100644
--- a/secrethandshake/state.go
+++ b/secrethandshake/state.go
@@ -204,6 +204,7 @@ func (s *State) verifyClientAuth(data []byte) bool {
 	sigMsg.Write(s.local.Public[:])
 	sigMsg.Write(s.secHash)
 	fmt.Printf("Server: Client Public = %x\n", public)
+	fmt.Printf("Server: Client Sig = %x\n", sig)
 	verifyOk := ed25519.Verify(&public, sigMsg.Bytes(), &sig)
 	if verifyOk {
 		fmt.Print("Server: Verified Client Signature\n")
-- 
2.17.1

