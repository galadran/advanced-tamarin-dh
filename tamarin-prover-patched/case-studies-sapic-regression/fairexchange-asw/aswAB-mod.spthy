theory ASWmod
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m
section{* The ASW contract signing protocol *}

builtins: hashing

functions: pk/1, sk/1[private], sign/2, verify/2, extrmsg/1, true/0

equations: verify(sign(m, sk(i)), pk(i))=true,extrmsg(sign(m, x))=m

heuristic: l /* heuristic for SAPIC in liveness mode, i.e., with progress) */ 

rule Init_: // [process=top-level] Init 
 [Fr(~prog_)] --[Init(), ProgressFrom_(~prog_)]-> [State_(~prog_)]

rule MessageID_rule_: // [process=top-level] MessageID-rule 
 [Fr(~x)] --[]-> [MID_Sender(~x), MID_Receiver(~x)]

rule Par_: // [process=top-level] Par 
 [State_(~prog_)] --[ProgressTo_2(~prog_), ProgressTo_1(~prog_)]-> [State_1(~prog_), State_2(~prog_)]

rule Rep_0_1: // [process=top-level] Rep, 0 
 [State_1(~prog_)] --[]-> [!Semistate_11(~prog_)]

rule Rep_1_1: // [process=top-level] Rep, 1 
 [!Semistate_11(~prog_)] --[]-> [State_11(~prog_)]

rule in_c_A_B_TTPID__11: // [process=top-level] in 'c',<$A, $B, TTPID> 
 [Fr(~prog_111), State_11(~prog_), In(<'c', <$A, $B, TTPID>>)] --[ProgressFrom_111(~prog_111), ChannelInEvent(<'c', <$A, $B, TTPID>>)]-> [State_111($A, $B, ~prog_, ~prog_111, TTPID)]

rule Par_111: // [process=top-level] Par 
 [State_111($A, $B, ~prog_, ~prog_111, TTPID)] --[]-> [State_1111($A, $B, ~prog_, ~prog_111, TTPID), State_1112($A, $B, ~prog_, ~prog_111, TTPID)]

rule Par_1111: // [process=top-level] Par 
 [State_1111($A, $B, ~prog_, ~prog_111, TTPID)] --[]-> [State_11111($A, $B, ~prog_, ~prog_111, TTPID), State_11112($A, $B, ~prog_, ~prog_111, TTPID)]

rule Par_11111: // [process=top-level] Par 
 [State_11111($A, $B, ~prog_, ~prog_111, TTPID)] --[]-> [State_111111($A, $B, ~prog_, ~prog_111, TTPID), State_111112($A, $B, ~prog_, ~prog_111, TTPID)]

rule in_c_t_111111 [color=#569DC0]: // [process=A] in 'c',t 
 [State_111111($A, $B, ~prog_, ~prog_111, TTPID), In(<'c', t>)] --[ProgressTo_1111111(~prog_111), ChannelInEvent(<'c', t>)]-> [State_1111111($A, $B, ~prog_, ~prog_111, TTPID, t)]

rule new_na_1111111 [color=#569DC0]: // [process=A] new na 
 [Fr(~prog_11111111), State_1111111($A, $B, ~prog_, ~prog_111, TTPID, t), Fr(na)] --[ProgressFrom_11111111(~prog_11111111)]-> [State_11111111($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, na, t)]

rule event_StartA_A_sign_A_B_TTPID_t_hna_sk_A_na_11111111 [color=#569DC0]: // [process=A] event StartA($A, sign(<$A, $B, TTPID, t, h(na)>, sk($A)), na) 
 [State_11111111($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, na, t)] --[Event(), StartA($A, sign(<$A, $B, TTPID, t, h(na)>, sk($A)), na)]-> [State_111111111($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, na, t)]

rule out_c_sign_A_B_TTPID_t_hna_sk_A_111111111 [color=#569DC0]: // [process=A] out 'c',sign(<$A, $B, TTPID, t, h(na)>, sk($A)) 
 [State_111111111($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, na, t), In('c')] --[ChannelInEvent('c')]-> [State_1111111111($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, na, t), Out(sign(<$A, $B, TTPID, t, h(na)>, sk($A)))]

rule in_c_m2_11111111111 [color=#569DC0]: // [process=A] in 'c',m2 
 [State_1111111111($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, na, t), In(<'c', m2>)] --[ChannelInEvent(<'c', m2>)]-> [State_111111111111($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, m2, na, t)]

rule out_c_sign_na_hnb_sk_A_111111111111 [color=#569DC0]: // [process=A] out 'c',sign(<na, h(nb)>, sk($A)) 
 [State_111111111111($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, m2, na, t), In('c')] --[ChannelInEvent('c')]-> [State_1111111111111($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, m2, na, nb, t), Out(sign(<na, h(nb)>, sk($A)))]

rule in_c_m4_11111111111111 [color=#569DC0]: // [process=A] in 'c',m4 
 [State_1111111111111($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, m2, na, nb, t), In(<'c', m4>)] --[ChannelInEvent(<'c', m4>)]-> [State_111111111111111($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, m2, m4, na, nb, t)]

rule event_ContractA_A_B_sign_A_B_TTPID_t_hna_sk_A_m2_na_nb_111111111111111 [color=#569DC0]: // [process=A] event ContractA($A, $B, sign(<$A, $B, TTPID, t, h(na)>, sk($A)), m2, na, nb) 
 [State_111111111111111($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, m2, m4, na, nb, t)] --[Event(), ContractA($A, $B, sign(<$A, $B, TTPID, t, h(na)>, sk($A)), m2, na, nb)]-> [State_1111111111111111($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, m2, m4, na, nb, t)]

rule Zero_1111111111111111 [color=#569DC0]: // [process=A] Zero 
 [State_1111111111111111($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, m2, m4, na, nb, t)] --[ProgressTo_11111111111111111(~prog_11111111)]-> []

rule out_r_originator_A_TTPID_sign_A_B_TTPID_t_hna_sk_A_m2__11111111111112 [color=#569DC0]: // [process=A] out 'r',<'originator', $A, TTPID, <sign(<$A, $B, TTPID, t, h(na)>, sk($A)), m2>> 
 [MID_Sender(mid_11111111111112), State_1111111111111($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, m2, na, nb, t)] --[Send(mid_11111111111112,<'originator', $A, TTPID, <sign(<$A, $B, TTPID, t, h(na)>, sk($A)), m2>>)]-> [Out(<'originator', $A, TTPID, <sign(<$A, $B, TTPID, t, h(na)>, sk($A)), m2>>), State_111111111111121($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, m2, na, nb, t)]

rule in_r_originator_A_TTPID_sign_m1_m2_skTTPID__111111111111121 [color=#569DC0]: // [process=A] in 'r',<'originator', $A, TTPID, sign(<m1, m2>, sk(TTPID))> 
 [State_111111111111121($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, m2, na, nb, t), In(<'originator', $A, TTPID, sign(<m1, m2>, sk(TTPID))>), MID_Receiver(mid_111111111111121)] --[Receive(mid_111111111111121,<'originator', $A, TTPID, sign(<m1, m2>, sk(TTPID))>)]-> [State_1111111111111211($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, m1, m2, na, nb, t)]

rule event_ContractA_A_B_m1_m2_na_nb_1111111111111211 [color=#569DC0]: // [process=A] event ContractA($A, $B, m1, m2, na, nb) 
 [State_1111111111111211($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, m1, m2, na, nb, t)] --[Event(), ContractA($A, $B, m1, m2, na, nb)]-> [State_11111111111112111($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, m1, m2, na, nb, t)]

rule Zero_11111111111112111 [color=#569DC0]: // [process=A] Zero 
 [State_11111111111112111($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, m1, m2, na, nb, t)] --[]-> []

rule out_r_originator_A_TTPID_sign_Abort_sign_A_B_TTPID_t_hna_sk_A_sk_A__11111111112 [color=#569DC0]: // [process=A] out 'r',<'originator', $A, TTPID, sign(<'Abort', sign(<$A, $B, TTPID, t, h(na)>, sk($A))>, sk($A))> 
 [MID_Sender(mid_11111111112), State_1111111111($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, na, t)] --[Send(mid_11111111112,<'originator', $A, TTPID, sign(<'Abort', sign(<$A, $B, TTPID, t, h(na)>, sk($A))>, sk($A))>)]-> [Out(<'originator', $A, TTPID, sign(<'Abort', sign(<$A, $B, TTPID, t, h(na)>, sk($A))>, sk($A))>), State_111111111121($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, na, t)]

rule in_r_originator_A_TTPID_sign_Aborted_a1_skTTPID__1111111111211 [color=#569DC0]: // [process=A] in 'r',<'originator', $A, TTPID, sign(<'Aborted', a1>, sk(TTPID))> 
 [State_111111111121($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, na, t), In(<'originator', $A, TTPID, sign(<'Aborted', a1>, sk(TTPID))>), MID_Receiver(mid_1111111111211)] --[Receive(mid_1111111111211,<'originator', $A, TTPID, sign(<'Aborted', a1>, sk(TTPID))>)]-> [State_11111111112111($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, a1, na, t)]

rule event_AbortA_A_sign_A_B_TTPID_t_hna_sk_A_na_11111111112111 [color=#569DC0]: // [process=A] event AbortA($A, sign(<$A, $B, TTPID, t, h(na)>, sk($A)), na) 
 [State_11111111112111($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, a1, na, t)] --[Event(), AbortA($A, sign(<$A, $B, TTPID, t, h(na)>, sk($A)), na)]-> [State_111111111121111($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, a1, na, t)]

rule Zero_111111111121111 [color=#569DC0]: // [process=A] Zero 
 [State_111111111121111($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, a1, na, t)] --[]-> []

rule in_r_originator_A_TTPID_sign_m1_m2_skTTPID__1111111111212 [color=#569DC0]: // [process=A] in 'r',<'originator', $A, TTPID, sign(<m1, m2>, sk(TTPID))> 
 [State_111111111121($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, na, t), In(<'originator', $A, TTPID, sign(<m1, m2>, sk(TTPID))>), MID_Receiver(mid_1111111111212)] --[Receive(mid_1111111111212,<'originator', $A, TTPID, sign(<m1, m2>, sk(TTPID))>)]-> [State_11111111112121($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, m1, m2, na, t)]

rule event_ContractA_A_B_m1_m2_na_nb_11111111112121 [color=#569DC0]: // [process=A] event ContractA($A, $B, m1, m2, na, nb) 
 [State_11111111112121($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, m1, m2, na, t)] --[Event(), ContractA($A, $B, m1, m2, na, nb)]-> [State_111111111121211($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, m1, m2, na, t)]

rule Zero_111111111121211 [color=#569DC0]: // [process=A] Zero 
 [State_111111111121211($A, $B, ~prog_, ~prog_111, ~prog_11111111, TTPID, m1, m2, na, t)] --[]-> []

rule in_c_m1_111112 [color=#2CD719]: // [process=B] in 'c',m1 
 [State_111112($A, $B, ~prog_, ~prog_111, TTPID), In(<'c', m1>)] --[ProgressTo_1111121(~prog_111), ChannelInEvent(<'c', m1>)]-> [State_1111121($A, $B, ~prog_, ~prog_111, TTPID, m1)]

rule new_nb_1111121 [color=#2CD719]: // [process=B] new nb 
 [Fr(~prog_11111211), State_1111121($A, $B, ~prog_, ~prog_111, TTPID, m1), Fr(nb)] --[ProgressFrom_11111211(~prog_11111211)]-> [State_11111211($A, $B, ~prog_, ~prog_111, ~prog_11111211, TTPID, m1, nb)]

rule event_StartB_A_B_m1_sign_hm1_hnb_sk_B_na_nb_11111211 [color=#2CD719]: // [process=B] event StartB($A, $B, m1, sign(<h(m1), h(nb)>, sk($B)), na, nb) 
 [State_11111211($A, $B, ~prog_, ~prog_111, ~prog_11111211, TTPID, m1, nb)] --[Event(), StartB($A, $B, m1, sign(<h(m1), h(nb)>, sk($B)), na, nb)]-> [State_111112111($A, $B, ~prog_, ~prog_111, ~prog_11111211, TTPID, m1, nb)]

rule out_c_sign_hm1_hnb_sk_B_111112111 [color=#2CD719]: // [process=B] out 'c',sign(<h(m1), h(nb)>, sk($B)) 
 [State_111112111($A, $B, ~prog_, ~prog_111, ~prog_11111211, TTPID, m1, nb), In('c')] --[ChannelInEvent('c')]-> [State_1111121111($A, $B, ~prog_, ~prog_111, ~prog_11111211, TTPID, m1, nb), Out(sign(<h(m1), h(nb)>, sk($B)))]

rule in_c_m3_11111211111 [color=#2CD719]: // [process=B] in 'c',m3 
 [State_1111121111($A, $B, ~prog_, ~prog_111, ~prog_11111211, TTPID, m1, nb), In(<'c', m3>)] --[ChannelInEvent(<'c', m3>)]-> [State_111112111111($A, $B, ~prog_, ~prog_111, ~prog_11111211, TTPID, m1, m3, nb)]

rule event_ContractB_A_B_m1_sign_hm1_hnb_sk_B_na_nb_111112111111 [color=#2CD719]: // [process=B] event ContractB($A, $B, m1, sign(<h(m1), h(nb)>, sk($B)), na, nb) 
 [State_111112111111($A, $B, ~prog_, ~prog_111, ~prog_11111211, TTPID, m1, m3, nb)] --[Event(), ContractB($A, $B, m1, sign(<h(m1), h(nb)>, sk($B)), na, nb)]-> [State_1111121111111($A, $B, ~prog_, ~prog_111, ~prog_11111211, TTPID, m1, m3, nb)]

rule out_c_sign_nb_hna_sk_B_1111121111111 [color=#2CD719]: // [process=B] out 'c',sign(<nb, h(na)>, sk($B)) 
 [State_1111121111111($A, $B, ~prog_, ~prog_111, ~prog_11111211, TTPID, m1, m3, nb), In('c')] --[ChannelInEvent('c')]-> [State_11111211111111($A, $B, ~prog_, ~prog_111, ~prog_11111211, TTPID, m1, m3, na, nb), Out(sign(<nb, h(na)>, sk($B)))]

rule Zero_11111211111111 [color=#2CD719]: // [process=B] Zero 
 [State_11111211111111($A, $B, ~prog_, ~prog_111, ~prog_11111211, TTPID, m1, m3, na, nb)] --[ProgressTo_111112111111111(~prog_11111211)]-> []

rule out_r_responder_B_TTPID_m1_sign_hm1_hnb_sk_B__11111211112 [color=#2CD719]: // [process=B] out 'r',<'responder', $B, TTPID, <m1, sign(<h(m1), h(nb)>, sk($B))>> 
 [MID_Sender(mid_11111211112), State_1111121111($A, $B, ~prog_, ~prog_111, ~prog_11111211, TTPID, m1, nb)] --[Send(mid_11111211112,<'responder', $B, TTPID, <m1, sign(<h(m1), h(nb)>, sk($B))>>)]-> [Out(<'responder', $B, TTPID, <m1, sign(<h(m1), h(nb)>, sk($B))>>), State_111112111121($A, $B, ~prog_, ~prog_111, ~prog_11111211, TTPID, m1, nb)]

rule in_r_responder_B_TTPID_sign_Aborted_a1_hnb_skTTPID__1111121111211 [color=#2CD719]: // [process=B] in 'r',<'responder', $B, TTPID, sign(<'Aborted', a1, h(nb)>, sk(TTPID))> 
 [State_111112111121($A, $B, ~prog_, ~prog_111, ~prog_11111211, TTPID, m1, nb), In(<'responder', $B, TTPID, sign(<'Aborted', a1, h(nb)>, sk(TTPID))>), MID_Receiver(mid_1111121111211)] --[Receive(mid_1111121111211,<'responder', $B, TTPID, sign(<'Aborted', a1, h(nb)>, sk(TTPID))>)]-> [State_11111211112111($A, $B, ~prog_, ~prog_111, ~prog_11111211, TTPID, a1, m1, nb)]

rule event_AbortB_A_B_m1_sign_hm1_hnb_sk_B_na_nb_11111211112111 [color=#2CD719]: // [process=B] event AbortB($A, $B, m1, sign(<h(m1), h(nb)>, sk($B)), na, nb) 
 [State_11111211112111($A, $B, ~prog_, ~prog_111, ~prog_11111211, TTPID, a1, m1, nb)] --[Event(), AbortB($A, $B, m1, sign(<h(m1), h(nb)>, sk($B)), na, nb)]-> [State_111112111121111($A, $B, ~prog_, ~prog_111, ~prog_11111211, TTPID, a1, m1, nb)]

rule Zero_111112111121111 [color=#2CD719]: // [process=B] Zero 
 [State_111112111121111($A, $B, ~prog_, ~prog_111, ~prog_11111211, TTPID, a1, m1, nb)] --[]-> []

rule in_r_responder_B_TTPID_sign_m1_m2_skTTPID__1111121111212 [color=#2CD719]: // [process=B] in 'r',<'responder', $B, TTPID, sign(<m1, m2>, sk(TTPID))> 
 [State_111112111121($A, $B, ~prog_, ~prog_111, ~prog_11111211, TTPID, m1, nb), In(<'responder', $B, TTPID, sign(<m1, m2>, sk(TTPID))>), MID_Receiver(mid_1111121111212)] --[Receive(mid_1111121111212,<'responder', $B, TTPID, sign(<m1, m2>, sk(TTPID))>)]-> [State_11111211112121($A, $B, ~prog_, ~prog_111, ~prog_11111211, TTPID, m1, m2, nb)]

rule event_ContractB_A_B_m1_m2_na_nb_11111211112121 [color=#2CD719]: // [process=B] event ContractB($A, $B, m1, m2, na, nb) 
 [State_11111211112121($A, $B, ~prog_, ~prog_111, ~prog_11111211, TTPID, m1, m2, nb)] --[Event(), ContractB($A, $B, m1, m2, na, nb)]-> [State_111112111121211($A, $B, ~prog_, ~prog_111, ~prog_11111211, TTPID, m1, m2, nb)]

rule Zero_111112111121211 [color=#2CD719]: // [process=B] Zero 
 [State_111112111121211($A, $B, ~prog_, ~prog_111, ~prog_11111211, TTPID, m1, m2, nb)] --[]-> []

rule Par_11112 [color=#11EC28]: // [process=TTP] Par 
 [State_11112($A, $B, ~prog_, ~prog_111, TTPID)] --[]-> [State_111121($A, $B, ~prog_, ~prog_111, TTPID), State_111122($A, $B, ~prog_, ~prog_111, TTPID)]

rule Par_111121 [color=#11EC28]: // [process=TTP] Par 
 [State_111121($A, $B, ~prog_, ~prog_111, TTPID)] --[ProgressTo_1111212(~prog_111)]-> [State_1111211($A, $B, ~prog_, ~prog_111, TTPID), State_1111212($A, $B, ~prog_, ~prog_111, TTPID)]

rule in_r_originator_A_TTPID_a1__1111211 [color=#11EC28]: // [process=TTP] in 'r',<'originator', $A, TTPID, a1> 
 [State_1111211($A, $B, ~prog_, ~prog_111, TTPID), In(<'originator', $A, TTPID, a1>), MID_Receiver(mid_1111211)] --[ProgressTo_11112112(~prog_111), ProgressTo_11112111(~prog_111), Receive(mid_1111211,<'originator', $A, TTPID, a1>)]-> [State_11112111($A, $B, ~prog_, ~prog_111, TTPID, a1)]

rule lock_sign_A_B_TTPID_xt_hxna_sk_A_11112111 [color=#11EC28]: // [process=TTP] lock sign(<$A, $B, TTPID, xt, h(xna)>, sk($A)) 
 [Fr(~prog_111121111), State_11112111($A, $B, ~prog_, ~prog_111, TTPID, a1), Fr(~lock6)] --[ProgressFrom_111121111(~prog_111121111), Lock($6, ~lock6, sign(<$A, $B, TTPID, xt, h(xna)>, sk($A))), Lock_6($6, ~lock6, sign(<$A, $B, TTPID, xt, h(xna)>, sk($A)))]-> [State_111121111($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_111121111, TTPID, a1)]

rule lookup_F_Resolved_TTPID_sign_A_B_TTPID_xt_hxna_sk_A_as_y_0_111121111 [color=#11EC28]: // [process=TTP] lookup <'F_Resolved', TTPID, sign(<$A, $B, TTPID, xt, h(xna)>, sk($A))> as y, 0 
 [State_111121111($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_111121111, TTPID, a1)] --[IsIn(<'F_Resolved', TTPID, sign(<$A, $B, TTPID, xt, h(xna)>, sk($A))>, y)]-> [State_1111211111($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_111121111, TTPID, a1, y)]

rule lookup_F_Resolved_TTPID_sign_A_B_TTPID_xt_hxna_sk_A_as_y_1_111121111 [color=#11EC28]: // [process=TTP] lookup <'F_Resolved', TTPID, sign(<$A, $B, TTPID, xt, h(xna)>, sk($A))> as y, 1 
 [State_111121111($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_111121111, TTPID, a1)] --[IsNotSet(<'F_Resolved', TTPID, sign(<$A, $B, TTPID, xt, h(xna)>, sk($A))>)]-> [State_1111211112($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_111121111, TTPID, a1)]

rule out_r_originator_A_TTPID_sign_sign_A_B_TTPID_xt_hxna_sk_A_y_skTTPID__1111211111 [color=#11EC28]: // [process=TTP] out 'r',<'originator', $A, TTPID, sign(<sign(<$A, $B, TTPID, xt, h(xna)>, sk($A)), y>, sk(TTPID))> 
 [MID_Sender(mid_1111211111), State_1111211111($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_111121111, TTPID, a1, y)] --[Send(mid_1111211111,<'originator', $A, TTPID, sign(<sign(<$A, $B, TTPID, xt, h(xna)>, sk($A)), y>, sk(TTPID))>)]-> [Out(<'originator', $A, TTPID, sign(<sign(<$A, $B, TTPID, xt, h(xna)>, sk($A)), y>, sk(TTPID))>), State_11112111111($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_111121111, TTPID, a1, y)]

rule unlock_sign_A_B_TTPID_xt_hxna_sk_A_11112111111 [color=#11EC28]: // [process=TTP] unlock sign(<$A, $B, TTPID, xt, h(xna)>, sk($A)) 
 [State_11112111111($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_111121111, TTPID, a1, y)] --[Unlock($6, ~lock6, sign(<$A, $B, TTPID, xt, h(xna)>, sk($A))), Unlock_6($6, ~lock6, sign(<$A, $B, TTPID, xt, h(xna)>, sk($A)))]-> [State_111121111111($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_111121111, TTPID, a1, y)]

rule Zero_111121111111 [color=#11EC28]: // [process=TTP] Zero 
 [State_111121111111($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_111121111, TTPID, a1, y)] --[ProgressTo_1111211111111(~prog_111121111)]-> []

rule insert_Aborted_TTPID_sign_A_B_TTPID_xt_hxna_sk_A_Aborted__1111211112 [color=#11EC28]: // [process=TTP] insert <'Aborted', TTPID, sign(<$A, $B, TTPID, xt, h(xna)>, sk($A))>,'Aborted' 
 [State_1111211112($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_111121111, TTPID, a1)] --[Insert(<'Aborted', TTPID, sign(<$A, $B, TTPID, xt, h(xna)>, sk($A))>, 'Aborted')]-> [State_11112111121($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_111121111, TTPID, a1)]

rule out_r_originator_A_TTPID_sign_Aborted_a1_skTTPID__11112111121 [color=#11EC28]: // [process=TTP] out 'r',<'originator', $A, TTPID, sign(<'Aborted', a1>, sk(TTPID))> 
 [MID_Sender(mid_11112111121), State_11112111121($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_111121111, TTPID, a1)] --[Send(mid_11112111121,<'originator', $A, TTPID, sign(<'Aborted', a1>, sk(TTPID))>)]-> [Out(<'originator', $A, TTPID, sign(<'Aborted', a1>, sk(TTPID))>), State_111121111211($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_111121111, TTPID, a1)]

rule unlock_sign_A_B_TTPID_xt_hxna_sk_A_111121111211 [color=#11EC28]: // [process=TTP] unlock sign(<$A, $B, TTPID, xt, h(xna)>, sk($A)) 
 [State_111121111211($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_111121111, TTPID, a1)] --[Unlock($6, ~lock6, sign(<$A, $B, TTPID, xt, h(xna)>, sk($A))), Unlock_6($6, ~lock6, sign(<$A, $B, TTPID, xt, h(xna)>, sk($A)))]-> [State_1111211112111($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_111121111, TTPID, a1)]

rule Zero_1111211112111 [color=#11EC28]: // [process=TTP] Zero 
 [State_1111211112111($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_111121111, TTPID, a1)] --[]-> []

rule in_r_originator_A_m1_m2__1111212 [color=#11EC28]: // [process=TTP] in 'r',<'originator', $A, <m1, m2>> 
 [Fr(~prog_11112121), State_1111212($A, $B, ~prog_, ~prog_111, TTPID), In(<'originator', $A, <m1, m2>>), MID_Receiver(mid_1111212)] --[ProgressFrom_11112121(~prog_11112121), Receive(mid_1111212,<'originator', $A, <m1, m2>>)]-> [State_11112121($A, $B, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2)]

rule lock_m1_11112121 [color=#11EC28]: // [process=TTP] lock m1 
 [State_11112121($A, $B, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2), Fr(~lock6)] --[Lock($6, ~lock6, m1), Lock_6($6, ~lock6, m1)]-> [State_111121211($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2)]

rule lookup_Aborted_TTPID_m1_as_x_0_111121211 [color=#11EC28]: // [process=TTP] lookup <'Aborted', TTPID, m1> as x, 0 
 [State_111121211($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2)] --[IsIn(<'Aborted', TTPID, m1>, x)]-> [State_1111212111($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2, x)]

rule lookup_Aborted_TTPID_m1_as_x_1_111121211 [color=#11EC28]: // [process=TTP] lookup <'Aborted', TTPID, m1> as x, 1 
 [State_111121211($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2)] --[IsNotSet(<'Aborted', TTPID, m1>)]-> [State_1111212112($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2)]

rule out_r_originator_A_TTPID_sign_Aborted_sign_Abort_m1_sk_A_skTTPID__1111212111 [color=#11EC28]: // [process=TTP] out 'r',<'originator', $A, TTPID, sign(<'Aborted', sign(<'Abort', m1>, sk($A))>, sk(TTPID))> 
 [MID_Sender(mid_1111212111), State_1111212111($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2, x)] --[Send(mid_1111212111,<'originator', $A, TTPID, sign(<'Aborted', sign(<'Abort', m1>, sk($A))>, sk(TTPID))>)]-> [Out(<'originator', $A, TTPID, sign(<'Aborted', sign(<'Abort', m1>, sk($A))>, sk(TTPID))>), State_11112121111($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2, x)]

rule unlock_m1_11112121111 [color=#11EC28]: // [process=TTP] unlock m1 
 [State_11112121111($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2, x)] --[ProgressTo_111121211111(~prog_11112121), Unlock($6, ~lock6, m1), Unlock_6($6, ~lock6, m1)]-> [State_111121211111($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2, x)]

rule Zero_111121211111 [color=#11EC28]: // [process=TTP] Zero 
 [State_111121211111($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2, x)] --[]-> []

rule insert_F_Resolved_TTPID_m1_m2_1111212112 [color=#11EC28]: // [process=TTP] insert <'F_Resolved', TTPID, m1>,m2 
 [State_1111212112($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2)] --[Insert(<'F_Resolved', TTPID, m1>, m2)]-> [State_11112121121($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2)]

rule out_r_originator_A_TTPID_sign_m1_m2_skTTPID__11112121121 [color=#11EC28]: // [process=TTP] out 'r',<'originator', $A, TTPID, sign(<m1, m2>, sk(TTPID))> 
 [MID_Sender(mid_11112121121), State_11112121121($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2)] --[Send(mid_11112121121,<'originator', $A, TTPID, sign(<m1, m2>, sk(TTPID))>)]-> [Out(<'originator', $A, TTPID, sign(<m1, m2>, sk(TTPID))>), State_111121211211($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2)]

rule unlock_m1_111121211211 [color=#11EC28]: // [process=TTP] unlock m1 
 [State_111121211211($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2)] --[ProgressTo_1111212112111(~prog_11112121), Unlock($6, ~lock6, m1), Unlock_6($6, ~lock6, m1)]-> [State_1111212112111($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2)]

rule Zero_1111212112111 [color=#11EC28]: // [process=TTP] Zero 
 [State_1111212112111($A, $B, ~lock6, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2)] --[]-> []

rule in_r_responder_B_TTPID_m1_m2__111122 [color=#11EC28]: // [process=TTP] in 'r',<'responder', $B, TTPID, <m1, m2>> 
 [State_111122($A, $B, ~prog_, ~prog_111, TTPID), In(<'responder', $B, TTPID, <m1, m2>>), MID_Receiver(mid_111122)] --[Receive(mid_111122,<'responder', $B, TTPID, <m1, m2>>)]-> [State_1111221($A, $B, ~prog_, ~prog_111, TTPID, m1, m2)]

rule lock_m1_1111221 [color=#11EC28]: // [process=TTP] lock m1 
 [State_1111221($A, $B, ~prog_, ~prog_111, TTPID, m1, m2), Fr(~lock6)] --[Lock($6, ~lock6, m1), Lock_6($6, ~lock6, m1)]-> [State_11112211($A, $B, ~lock6, ~prog_, ~prog_111, TTPID, m1, m2)]

rule lookup_Aborted_TTPID_m1_as_x_0_11112211 [color=#11EC28]: // [process=TTP] lookup <'Aborted', TTPID, m1> as x, 0 
 [State_11112211($A, $B, ~lock6, ~prog_, ~prog_111, TTPID, m1, m2)] --[IsIn(<'Aborted', TTPID, m1>, x)]-> [State_111122111($A, $B, ~lock6, ~prog_, ~prog_111, TTPID, m1, m2, x)]

rule lookup_Aborted_TTPID_m1_as_x_1_11112211 [color=#11EC28]: // [process=TTP] lookup <'Aborted', TTPID, m1> as x, 1 
 [State_11112211($A, $B, ~lock6, ~prog_, ~prog_111, TTPID, m1, m2)] --[IsNotSet(<'Aborted', TTPID, m1>)]-> [State_111122112($A, $B, ~lock6, ~prog_, ~prog_111, TTPID, m1, m2)]

rule out_r_responder_B_TTPID_sign_Aborted_sign_Abort_m1_sk_A_hxnb_skTTPID__111122111 [color=#11EC28]: // [process=TTP] out 'r',<'responder', $B, TTPID, sign(<'Aborted', sign(<'Abort', m1>, sk($A)), h(xnb)>, sk(TTPID))> 
 [MID_Sender(mid_111122111), State_111122111($A, $B, ~lock6, ~prog_, ~prog_111, TTPID, m1, m2, x)] --[Send(mid_111122111,<'responder', $B, TTPID, sign(<'Aborted', sign(<'Abort', m1>, sk($A)), h(xnb)>, sk(TTPID))>)]-> [Out(<'responder', $B, TTPID, sign(<'Aborted', sign(<'Abort', m1>, sk($A)), h(xnb)>, sk(TTPID))>), State_1111221111($A, $B, ~lock6, ~prog_, ~prog_111, TTPID, m1, m2, x)]

rule unlock_m1_1111221111 [color=#11EC28]: // [process=TTP] unlock m1 
 [State_1111221111($A, $B, ~lock6, ~prog_, ~prog_111, TTPID, m1, m2, x)] --[Unlock($6, ~lock6, m1), Unlock_6($6, ~lock6, m1)]-> [State_11112211111($A, $B, ~lock6, ~prog_, ~prog_111, TTPID, m1, m2, x)]

rule Zero_11112211111 [color=#11EC28]: // [process=TTP] Zero 
 [State_11112211111($A, $B, ~lock6, ~prog_, ~prog_111, TTPID, m1, m2, x)] --[]-> []

rule insert_F_Resolved_TTPID_m1_m2_111122112 [color=#11EC28]: // [process=TTP] insert <'F_Resolved', TTPID, m1>,m2 
 [State_111122112($A, $B, ~lock6, ~prog_, ~prog_111, TTPID, m1, m2)] --[Insert(<'F_Resolved', TTPID, m1>, m2)]-> [State_1111221121($A, $B, ~lock6, ~prog_, ~prog_111, TTPID, m1, m2)]

rule out_r_responder_B_TTPID_sign_m1_m2_skTTPID__1111221121 [color=#11EC28]: // [process=TTP] out 'r',<'responder', $B, TTPID, sign(<m1, m2>, sk(TTPID))> 
 [MID_Sender(mid_1111221121), State_1111221121($A, $B, ~lock6, ~prog_, ~prog_111, TTPID, m1, m2)] --[Send(mid_1111221121,<'responder', $B, TTPID, sign(<m1, m2>, sk(TTPID))>)]-> [Out(<'responder', $B, TTPID, sign(<m1, m2>, sk(TTPID))>), State_11112211211($A, $B, ~lock6, ~prog_, ~prog_111, TTPID, m1, m2)]

rule unlock_m1_11112211211 [color=#11EC28]: // [process=TTP] unlock m1 
 [State_11112211211($A, $B, ~lock6, ~prog_, ~prog_111, TTPID, m1, m2)] --[Unlock($6, ~lock6, m1), Unlock_6($6, ~lock6, m1)]-> [State_111122112111($A, $B, ~lock6, ~prog_, ~prog_111, TTPID, m1, m2)]

rule Zero_111122112111 [color=#11EC28]: // [process=TTP] Zero 
 [State_111122112111($A, $B, ~lock6, ~prog_, ~prog_111, TTPID, m1, m2)] --[]-> []

rule Par_1112 [color=#45D1E2]: // [process=Judge] Par 
 [State_1112($A, $B, ~prog_, ~prog_111, TTPID)] --[]-> [State_11121($A, $B, ~prog_, ~prog_111, TTPID), State_11122($A, $B, ~prog_, ~prog_111, TTPID)]

rule in_c_m1_m2_m3_m4__11121 [color=#45D1E2]: // [process=Judge] in 'c',<m1, m2, m3, m4> 
 [State_11121($A, $B, ~prog_, ~prog_111, TTPID), In(<'c', <m1, m2, m3, m4>>)] --[ProgressTo_111212(~prog_111), ProgressTo_111211(~prog_111), ChannelInEvent(<'c', <m1, m2, m3, m4>>)]-> [State_111211($A, $B, ~prog_, ~prog_111, TTPID, m1, m2, m3, m4)]

rule event_ContractJudge_A_B_m1_m2_na_nb_111211 [color=#45D1E2]: // [process=Judge] event ContractJudge($A, $B, m1, m2, na, nb) 
 [Fr(~prog_1112111), State_111211($A, $B, ~prog_, ~prog_111, TTPID, m1, m2, m3, m4)] --[ProgressFrom_1112111(~prog_1112111), Event(), ContractJudge($A, $B, m1, m2, na, nb)]-> [State_1112111($A, $B, ~prog_, ~prog_111, ~prog_1112111, TTPID, m1, m2, m3, m4)]

rule Zero_1112111 [color=#45D1E2]: // [process=Judge] Zero 
 [State_1112111($A, $B, ~prog_, ~prog_111, ~prog_1112111, TTPID, m1, m2, m3, m4)] --[ProgressTo_11121111(~prog_1112111)]-> []

rule in_c_sign_m1_m2_skTTPID_11122 [color=#45D1E2]: // [process=Judge] in 'c',sign(<m1, m2>, sk(TTPID)) 
 [State_11122($A, $B, ~prog_, ~prog_111, TTPID), In(<'c', sign(<m1, m2>, sk(TTPID))>)] --[ChannelInEvent(<'c', sign(<m1, m2>, sk(TTPID))>)]-> [State_111221($A, $B, ~prog_, ~prog_111, TTPID, m1, m2)]

rule event_ContractJudge_A_B_m1_m2_na_nb_111221 [color=#45D1E2]: // [process=Judge] event ContractJudge($A, $B, m1, m2, na, nb) 
 [State_111221($A, $B, ~prog_, ~prog_111, TTPID, m1, m2)] --[Event(), ContractJudge($A, $B, m1, m2, na, nb)]-> [State_1112211($A, $B, ~prog_, ~prog_111, TTPID, m1, m2)]

rule Zero_1112211 [color=#45D1E2]: // [process=Judge] Zero 
 [State_1112211($A, $B, ~prog_, ~prog_111, TTPID, m1, m2)] --[]-> []

rule Rep_0_2: // [process=top-level] Rep, 0 
 [State_2(~prog_)] --[]-> [!Semistate_21(~prog_)]

rule Rep_1_2: // [process=top-level] Rep, 1 
 [!Semistate_21(~prog_)] --[]-> [State_21(~prog_)]

rule in_c_corrupt_x__21: // [process=top-level] in 'c',<'corrupt', $x> 
 [Fr(~prog_211), State_21(~prog_), In(<'c', <'corrupt', $x>>)] --[ProgressFrom_211(~prog_211), ChannelInEvent(<'c', <'corrupt', $x>>)]-> [State_211($x, ~prog_, ~prog_211)]

rule event_Corrupt_x_211: // [process=top-level] event Corrupt($x) 
 [State_211($x, ~prog_, ~prog_211)] --[Event(), Corrupt($x)]-> [State_2111($x, ~prog_, ~prog_211)]

rule out_c_sk_x_2111: // [process=top-level] out 'c',sk($x) 
 [State_2111($x, ~prog_, ~prog_211), In('c')] --[ChannelInEvent('c')]-> [State_21111($x, ~prog_, ~prog_211), Out(sk($x))]

rule Par_21111: // [process=top-level] Par 
 [State_21111($x, ~prog_, ~prog_211)] --[ProgressTo_211112(~prog_211), ProgressTo_211111(~prog_211)]-> [State_211111($x, ~prog_, ~prog_211), State_211112($x, ~prog_, ~prog_211)]

rule Rep_0_211111: // [process=top-level] Rep, 0 
 [State_211111($x, ~prog_, ~prog_211)] --[]-> [!Semistate_2111111($x, ~prog_, ~prog_211)]

rule Rep_1_211111: // [process=top-level] Rep, 1 
 [!Semistate_2111111($x, ~prog_, ~prog_211)] --[]-> [State_2111111($x, ~prog_, ~prog_211)]

rule in_r_responder_x_m__2111111: // [process=top-level] in 'r',<'responder', $x, m> 
 [State_2111111($x, ~prog_, ~prog_211), In(<'responder', $x, m>), MID_Receiver(mid_2111111)] --[Receive(mid_2111111,<'responder', $x, m>)]-> [State_21111111($x, ~prog_, ~prog_211, m)]

rule Zero_21111111: // [process=top-level] Zero 
 [State_21111111($x, ~prog_, ~prog_211, m)] --[]-> []

rule Rep_0_211112: // [process=top-level] Rep, 0 
 [State_211112($x, ~prog_, ~prog_211)] --[]-> [!Semistate_2111121($x, ~prog_, ~prog_211)]

rule Rep_1_211112: // [process=top-level] Rep, 1 
 [!Semistate_2111121($x, ~prog_, ~prog_211)] --[]-> [State_2111121($x, ~prog_, ~prog_211)]

rule in_r_originator_x_m__2111121: // [process=top-level] in 'r',<'originator', $x, m> 
 [State_2111121($x, ~prog_, ~prog_211), In(<'originator', $x, m>), MID_Receiver(mid_2111121)] --[Receive(mid_2111121,<'originator', $x, m>)]-> [State_21111211($x, ~prog_, ~prog_211, m)]

rule Zero_21111211: // [process=top-level] Zero 
 [State_21111211($x, ~prog_, ~prog_211, m)] --[]-> []

 restriction set_in:
"All x y #t3 . IsIn(x,y)@t3 ==>
        (Ex #t2 . Insert(x,y)@t2 & #t2<#t3 
                & ( All #t1 . Delete(x)@t1 ==> (#t1<#t2 |  #t3<#t1))
                & ( All #t1 yp . Insert(x,yp)@t1 ==> (#t1<#t2 | #t1=#t2 | #t3<#t1))
)"

restriction set_notin:
"All x #t3 . IsNotSet(x)@t3 ==> 
        (All #t1 y . Insert(x,y)@t1 ==>  #t3<#t1 )
  | ( Ex #t1 .   Delete(x)@t1 & #t1<#t3 
                &  (All #t2 y . Insert(x,y)@t2 & #t2<#t3 ==>  #t2<#t1))"


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"


restriction progress_111112111112121_to_1111121111121211:
    "All p #t1. ProgressFrom_111112111112121(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111121111121211(p )@t2)
    "

restriction progress_111111111112121_to_1111111111121211:
    "All p #t1. ProgressFrom_111111111112121(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111111111121211(p )@t2)
    "

restriction progress_11112121_to_111121211111_or_1111212112111:
    "All p #t1. ProgressFrom_11112121(p )@t1 ==> 
       (Ex #t2. ProgressTo_111121211111(p )@t2)
	 | (Ex #t2. ProgressTo_1111212112111(p )@t2)
    "

restriction progress_1112121_to_11121211:
    "All p #t1. ProgressFrom_1112121(p )@t1 ==> 
       (Ex #t2. ProgressTo_11121211(p )@t2)
    "

restriction progress_111121121_to_1111211211111_or_11112112112111:
    "All p #t1. ProgressFrom_111121121(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111211211111(p )@t2)
	 | (Ex #t2. ProgressTo_11112112112111(p )@t2)
    "

restriction progress_11111111111111211_to_111111111111112111:
    "All p #t1. ProgressFrom_11111111111111211(p )@t1 ==> 
       (Ex #t2. ProgressTo_111111111111112111(p )@t2)
    "

restriction progress_11111211_to_111112111111111_or_1111121111121:
    "All p #t1. ProgressFrom_11111211(p )@t1 ==> 
       (Ex #t2. ProgressTo_111112111111111(p )@t2)
	 | (Ex #t2. ProgressTo_1111121111121(p )@t2)
    "

restriction progress_211_to_211112:
    "All p #t1. ProgressFrom_211(p )@t1 ==> 
       (Ex #t2. ProgressTo_211112(p )@t2)
    "

restriction progress_211_to_211111:
    "All p #t1. ProgressFrom_211(p )@t1 ==> 
       (Ex #t2. ProgressTo_211111(p )@t2)
    "

restriction progress_111112111112111_to_1111121111121111:
    "All p #t1. ProgressFrom_111112111112111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111121111121111(p )@t2)
    "

restriction progress_111111111112111_to_1111111111121111:
    "All p #t1. ProgressFrom_111111111112111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111111111121111(p )@t2)
    "

restriction progress_1112111_to_11121111:
    "All p #t1. ProgressFrom_1112111(p )@t1 ==> 
       (Ex #t2. ProgressTo_11121111(p )@t2)
    "

restriction progress_111121111_to_1111211111111_or_11112111112111:
    "All p #t1. ProgressFrom_111121111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111211111111(p )@t2)
	 | (Ex #t2. ProgressTo_11112111112111(p )@t2)
    "

restriction progress_11111111_to_11111111111111111_or_1111111111121_or_1111111111111121:
    "All p #t1. ProgressFrom_11111111(p )@t1 ==> 
       (Ex #t2. ProgressTo_11111111111111111(p )@t2)
	 | (Ex #t2. ProgressTo_1111111111121(p )@t2)
	 | (Ex #t2. ProgressTo_1111111111111121(p )@t2)
    "

restriction progress_111_to_1111212:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111212(p )@t2)
    "

restriction progress_111_to_111212:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_111212(p )@t2)
    "

restriction progress_111_to_11112112:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_11112112(p )@t2)
    "

restriction progress_111_to_1111121:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111121(p )@t2)
    "

restriction progress_111_to_111211:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_111211(p )@t2)
    "

restriction progress_111_to_11112111:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_11112111(p )@t2)
    "

restriction progress_111_to_1111111:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111111(p )@t2)
    "

restriction progress__to_2:
    "All p #t1. ProgressFrom_(p )@t1 ==> 
       (Ex #t2. ProgressTo_2(p )@t2)
    "

restriction progress__to_1:
    "All p #t1. ProgressFrom_(p )@t1 ==> 
       (Ex #t2. ProgressTo_1(p )@t2)
    "


restriction progress_init:
    " Ex #t. Init()@t "

restriction resilient: 
    "All #i x y. Send(x,y)@i ==> Ex #j. Receive(x,y)@j & #i<#j "

 
 restriction locking_6: 
 "All p pp l x lp #t1 #t3 . Lock_6(p,l,x)@t1 & Lock(pp,lp,x)@t3 
         ==> 
         ( #t1<#t3 
                  & (Ex #t2. Unlock_6(p,l,x)@t2 & #t1<#t2 & #t2<#t3  
                  & (All #t0 pp  . Unlock(pp,l,x)@t0 ==> #t0=#t2) 
                  & (All pp lpp #t0 . Lock(pp,lpp,x)@t0 ==> #t0<#t1 | #t0=#t1 | #t2<#t0) 
                  & (All pp lpp #t0 . Unlock(pp,lpp,x)@t0 ==> #t0<#t1 | #t2<#t0 | #t2=#t0 ) 
                 )) 
         | #t3<#t1 | #t1=#t3 " 

 lemma sanity_optimistic_AB : exists-trace
"	Ex #i #j a b m1 m2 na nb. ContractA(a, b, m1, m2, na, nb) @ i & ContractB(a, b, m1, m2, na, nb) @ j & not( Ex #k. Corrupt(a) @ k ) & not( Ex #k. Corrupt(b) @ k )"

lemma timelinessA :
"	All #i a m1 na. StartA(a, m1, na) @ i ==> ( Ex #j b m2 nb. ContractA(a, b, m1, m2, na, nb) @ j ) | ( Ex #j. AbortA(a, m1, na) @ j ) | ( Ex #j. Corrupt(a) @ j )"

lemma timelinessB :
"	All #i a b m1 m2 na nb. StartB(a, b, m1, m2, na, nb) @ i ==> ( Ex #j. ContractB(a, b, m1, m2, na, nb) @ j ) | ( Ex #j. AbortB(a, b, m1, m2, na, nb) @ j ) | ( Ex #j. Corrupt(b) @ j )"

lemma partialfairnessA :
"	All #i a m1 na. AbortA(a, m1, na) @ i ==> ( ( Ex #j. K(na) @ j ) ==> ( Ex #k. Corrupt(a) @ k ) )"

lemma partialfairnessB :
"	All #i a b m1 m2 na nb. AbortB(a, b, m1, m2, na, nb) @ i ==> ( ( Ex #j. K(nb) @ j ) ==> ( Ex #k. Corrupt(b) @ k ) )"

lemma fullfairnessAattack : exists-trace
"	not( All #i #l a b m1 m2 na nb. ContractJudge(a, b, m1, m2, na, nb) @ i & Corrupt(b) @ l ==> ( Ex #j. ContractA(a, b, m1, m2, na, nb) @ j ) | ( Ex #k. Corrupt(a) @ k ) )"

end
