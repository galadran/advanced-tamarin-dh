theory ChannelsTestOne
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m

heuristic: p /* heuristic for SAPIC */

rule Init_: // [process=top-level] Init 
 [] --[Init()]-> [State_()]

rule new_c_: // [process=top-level] new c 
 [State_(), Fr(c)] --[]-> [State_1(c)]

rule Par_1: // [process=top-level] Par 
 [State_1(c)] --[]-> [State_11(c), State_12(c)]

rule new_a_11 [color=#569DC0]: // [process=P] new a 
 [State_11(c), Fr(a)] --[]-> [State_111(a, c)]

rule event_Secreta_111 [color=#569DC0]: // [process=P] event Secret(a) 
 [State_111(a, c)] --[Event(), Secret(a)]-> [State_1111(a, c)]

rule out_c_a_0_1111 [color=#569DC0]: // [process=P] out c,a, 0 
 [State_1111(a, c), In(c)] --[ChannelInEvent(c)]-> [Out(a), State_11111(a, c)]

rule out_c_a_1_1111 [color=#569DC0]: // [process=P] out c,a, 1 
 [State_1111(a, c)] --[]-> [Semistate_1111(a, c), Message(c,a)]

rule out_c_a_2_1111 [color=#569DC0]: // [process=P] out c,a, 2 
 [Semistate_1111(a, c), Ack(c,a)] --[]-> [State_11111(a, c)]

rule out_c_11111 [color=#569DC0]: // [process=P] out c 
 [State_11111(a, c)] --[]-> [State_111111(a, c), Out(c)]

rule Zero_111111 [color=#569DC0]: // [process=P] Zero 
 [State_111111(a, c)] --[]-> []

rule in_c_x_0_12 [color=#2CD719]: // [process=Q] in c,x, 0 
 [State_12(c), In(<c, x>)] --[ChannelInEvent(<c, x>)]-> [State_121(c, x)]

rule in_c_x_1_12 [color=#2CD719]: // [process=Q] in c,x, 1 
 [State_12(c), Message(c,x)] --[]-> [Ack(c,x), State_121(c, x)]

rule event_Receivedx_121 [color=#2CD719]: // [process=Q] event Received(x) 
 [State_121(c, x)] --[Event(), Received(x)]-> [State_1211(c, x)]

rule Zero_1211 [color=#2CD719]: // [process=Q] Zero 
 [State_1211(c, x)] --[]-> []


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"

lemma secret :
"	All x #i. ( Secret(x) @ i ==> not( Ex #j. K(x) @ j ) )"

lemma received : exists-trace
"	Ex x #i. Received(x) @ i"

end
