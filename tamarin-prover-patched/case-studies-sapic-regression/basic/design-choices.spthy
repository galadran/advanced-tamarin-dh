theory DesignChoices
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m

heuristic: p /* heuristic for SAPIC */

rule Init_: // [process=top-level] Init 
 [] --[Init()]-> [State_()]

rule Rep_0_: // [process=top-level] Rep, 0 
 [State_()] --[]-> [!Semistate_1()]

rule Rep_1_: // [process=top-level] Rep, 1 
 [!Semistate_1()] --[]-> [State_1()]

rule lock_s__1: // [process=top-level] lock 's' 
 [State_1(), Fr(~lock6)] --[Lock($6, ~lock6, 's'), Lock_6($6, ~lock6, 's')]-> [State_11(~lock6)]

rule lookup_visited_as_v_0_11: // [process=top-level] lookup 'visited' as v, 0 
 [State_11(~lock6)] --[IsIn('visited', v)]-> [State_111(~lock6, v)]

rule lookup_visited_as_v_1_11: // [process=top-level] lookup 'visited' as v, 1 
 [State_11(~lock6)] --[IsNotSet('visited')]-> [State_112(~lock6)]

rule unlock_s__111: // [process=top-level] unlock 's' 
 [State_111(~lock6, v)] --[Unlock($6, ~lock6, 's'), Unlock_6($6, ~lock6, 's')]-> [State_1111(~lock6, v)]

rule Zero_1111: // [process=top-level] Zero 
 [State_1111(~lock6, v)] --[]-> []

rule event_Visit_112: // [process=top-level] event Visit() 
 [State_112(~lock6)] --[Event(), Visit()]-> [State_1121(~lock6)]

rule insert_visited_s__1121: // [process=top-level] insert 'visited','s' 
 [State_1121(~lock6)] --[Insert('visited', 's')]-> [State_11211(~lock6)]

rule unlock_s__11211: // [process=top-level] unlock 's' 
 [State_11211(~lock6)] --[Unlock($6, ~lock6, 's'), Unlock_6($6, ~lock6, 's')]-> [State_112111(~lock6)]

rule Zero_112111: // [process=top-level] Zero 
 [State_112111(~lock6)] --[]-> []

 restriction set_in:
"All x y #t3 . IsIn(x,y)@t3 ==>
        (Ex #t2 . Insert(x,y)@t2 & #t2<#t3 
                & ( All #t1 . Delete(x)@t1 ==> (#t1<#t2 |  #t3<#t1))
                & ( All #t1 yp . Insert(x,yp)@t1 ==> (#t1<#t2 | #t1=#t2 | #t3<#t1))
)"

restriction set_notin:
"All x #t3 . IsNotSet(x)@t3 ==> 
        (All #t1 y . Insert(x,y)@t1 ==>  #t3<#t1 )
  | ( Ex #t1 .   Delete(x)@t1 & #t1<#t3 
                &  (All #t2 y . Insert(x,y)@t2 & #t2<#t3 ==>  #t2<#t1))"


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"

 
 restriction locking_6: 
 "All p pp l x lp #t1 #t3 . Lock_6(p,l,x)@t1 & Lock(pp,lp,x)@t3 
         ==> 
         ( #t1<#t3 
                  & (Ex #t2. Unlock_6(p,l,x)@t2 & #t1<#t2 & #t2<#t3  
                  & (All #t0 pp  . Unlock(pp,l,x)@t0 ==> #t0=#t2) 
                  & (All pp lpp #t0 . Lock(pp,lpp,x)@t0 ==> #t0<#t1 | #t0=#t1 | #t2<#t0) 
                  & (All pp lpp #t0 . Unlock(pp,lpp,x)@t0 ==> #t0<#t1 | #t2<#t0 | #t2=#t0 ) 
                 )) 
         | #t3<#t1 | #t1=#t3 " 

 lemma visit_once :
"	All #t1 #t2. ( Visit() @ t1 & Visit() @ t2 ) ==> #t1 = #t2"

end
