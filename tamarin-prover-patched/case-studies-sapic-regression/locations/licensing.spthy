theory licensing
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m

builtins: symmetric-encryption, asymmetric-encryption

functions: pk/1, run/2, prg/1, tkn/1, ok/2, ask/2, dec/1, dec1/1, dec2/1

heuristic: p /* heuristic for SAPIC */

rule Init_: // [process=top-level] Init 
 [] --[Init()]-> [State_()]

rule new_prog_: // [process=top-level] new prog 
 [State_(), Fr(prog)] --[]-> [State_1(prog)]

rule event_Authprog_1: // [process=top-level] event Auth(prog) 
 [State_1(prog)] --[Event(), Auth(prog)]-> [State_11(prog)]

rule Par_11: // [process=top-level] Par 
 [State_11(prog)] --[]-> [State_111(prog), State_112(prog)]

rule Rep_0_111: // [process=top-level] Rep, 0 
 [State_111(prog)] --[]-> [!Semistate_1111(prog)]

rule Rep_1_111: // [process=top-level] Rep, 1 
 [!Semistate_1111(prog)] --[]-> [State_1111(prog)]

rule in_pkskV_1111 [color=#569DC0]: // [process=p] in pk(skV) 
 [State_1111(prog), In(pk(skV))] --[]-> [State_11111(prog, skV)]

rule new_shared_key_11111 [color=#569DC0]: // [process=p] new shared_key 
 [State_11111(prog, skV), Fr(shared_key)] --[]-> [State_111111(prog, shared_key, skV)]

rule event_SessionPpkskV_shared_key_111111 [color=#569DC0]: // [process=p] event SessionP(pk(skV), shared_key) 
 [State_111111(prog, shared_key, skV)] --[Event(), SessionP(pk(skV), shared_key)]-> [State_1111111(prog, shared_key, skV)]

rule out_aencshared_key_pkskV_repaencshared_key_pkskV_loc_pkskV___1111111 [color=#569DC0]: // [process=p] out <aenc(shared_key, pk(skV)), rep(aenc(shared_key, pk(skV)), <'loc', pk(skV)>)> 
 [State_1111111(prog, shared_key, skV)] --[]-> [State_11111111(prog, shared_key, skV), Out(<aenc(shared_key, pk(skV)), rep(aenc(shared_key, pk(skV)), <'loc', pk(skV)>)>)]

rule in_sencprgprog2_shared_key_11111111 [color=#569DC0]: // [process=p] in senc(prg(prog2), shared_key) 
 [State_11111111(prog, shared_key, skV), In(senc(prg(prog2), shared_key))] --[]-> [State_111111111(prog, prog2, shared_key, skV)]

rule Rep_0_111111111 [color=#569DC0]: // [process=p] Rep, 0 
 [State_111111111(prog, prog2, shared_key, skV)] --[]-> [!Semistate_1111111111(prog, prog2, shared_key, skV)]

rule Rep_1_111111111 [color=#569DC0]: // [process=p] Rep, 1 
 [!Semistate_1111111111(prog, prog2, shared_key, skV)] --[]-> [State_1111111111(prog, prog2, shared_key, skV)]

rule in_input_1111111111 [color=#569DC0]: // [process=p] in input 
 [State_1111111111(prog, prog2, shared_key, skV), In(input)] --[]-> [State_11111111111(input, prog, prog2, shared_key, skV)]

rule in_senctkntoken_shared_key_11111111111 [color=#569DC0]: // [process=p] in senc(tkn(token), shared_key) 
 [State_11111111111(input, prog, prog2, shared_key, skV), In(senc(tkn(token), shared_key))] --[]-> [State_111111111111(input, prog, prog2, shared_key, skV, token)]

rule new_x_111111111111 [color=#569DC0]: // [process=p] new x 
 [State_111111111111(input, prog, prog2, shared_key, skV, token), Fr(x)] --[]-> [State_1111111111111(input, prog, prog2, shared_key, skV, token, x)]

rule out_sencaskx_tkntoken_shared_key_1111111111111 [color=#569DC0]: // [process=p] out senc(ask(x, tkn(token)), shared_key) 
 [State_1111111111111(input, prog, prog2, shared_key, skV, token, x)] --[]-> [State_11111111111111(input, prog, prog2, shared_key, skV, token, x), Out(senc(ask(x, tkn(token)), shared_key))]

rule in_sencokx_tkntoken_shared_key_11111111111111 [color=#569DC0]: // [process=p] in senc(ok(x, tkn(token)), shared_key) 
 [State_11111111111111(input, prog, prog2, shared_key, skV, token, x), In(senc(ok(x, tkn(token)), shared_key))] --[]-> [State_111111111111111(input, prog, prog2, shared_key, skV, token, x)]

rule event_Poutputinput_token_111111111111111 [color=#569DC0]: // [process=p] event Poutput(input, token) 
 [State_111111111111111(input, prog, prog2, shared_key, skV, token, x)] --[Event(), Poutput(input, token)]-> [State_1111111111111111(input, prog, prog2, shared_key, skV, token, x)]

rule out_runprog2_input_1111111111111111 [color=#569DC0]: // [process=p] out run(prog2, input) 
 [State_1111111111111111(input, prog, prog2, shared_key, skV, token, x)] --[]-> [State_11111111111111111(input, prog, prog2, shared_key, skV, token, x), Out(run(prog2, input))]

rule Zero_11111111111111111 [color=#569DC0]: // [process=p] Zero 
 [State_11111111111111111(input, prog, prog2, shared_key, skV, token, x)] --[]-> []

rule Rep_0_112: // [process=top-level] Rep, 0 
 [State_112(prog)] --[]-> [!Semistate_1121(prog)]

rule Rep_1_112: // [process=top-level] Rep, 1 
 [!Semistate_1121(prog)] --[]-> [State_1121(prog)]

rule new_skV_1121 [color=#2CD719]: // [process=vendor] new skV 
 [State_1121(prog), Fr(skV)] --[]-> [State_11211(prog, skV)]

rule event_HonestPpkskV_11211 [color=#2CD719]: // [process=vendor] event HonestP(pk(skV)) 
 [State_11211(prog, skV)] --[Event(), HonestP(pk(skV))]-> [State_112111(prog, skV)]

rule out_pkskV_112111 [color=#2CD719]: // [process=vendor] out pk(skV) 
 [State_112111(prog, skV)] --[]-> [State_1121111(prog, skV), Out(pk(skV))]

rule in_aencshared_key_pkskV_signed__1121111 [color=#2CD719]: // [process=vendor] in <aenc(shared_key, pk(skV)), signed> 
 [State_1121111(prog, skV), In(<aenc(shared_key, pk(skV)), signed>)] --[]-> [State_11211111(prog, shared_key, signed, skV)]

rule if_eqaencshared_key_pkskV_check_repsigned_loc_pkskV__0_11211111 [color=#2CD719]: // [process=vendor] if eq(aenc(shared_key, pk(skV)), check_rep(signed, <'loc', pk(skV)>)), 0 
 [State_11211111(prog, shared_key, signed, skV)] --[Pred_eq(aenc(shared_key, pk(skV)), check_rep(signed, <'loc', pk(skV)>))]-> [State_112111111(prog, shared_key, signed, skV)]

rule if_eqaencshared_key_pkskV_check_repsigned_loc_pkskV__1_11211111 [color=#2CD719]: // [process=vendor] if eq(aenc(shared_key, pk(skV)), check_rep(signed, <'loc', pk(skV)>)), 1 
 [State_11211111(prog, shared_key, signed, skV)] --[Pred_not_eq(aenc(shared_key, pk(skV)), check_rep(signed, <'loc', pk(skV)>))]-> [State_112111112(prog, shared_key, signed, skV)]

rule event_SessionVpkskV_shared_key_112111111 [color=#2CD719]: // [process=vendor] event SessionV(pk(skV), shared_key) 
 [State_112111111(prog, shared_key, signed, skV)] --[Event(), SessionV(pk(skV), shared_key)]-> [State_1121111111(prog, shared_key, signed, skV)]

rule out_sencprgprog_shared_key_1121111111 [color=#2CD719]: // [process=vendor] out senc(prg(prog), shared_key) 
 [State_1121111111(prog, shared_key, signed, skV)] --[]-> [State_11211111111(prog, shared_key, signed, skV), Out(senc(prg(prog), shared_key))]

rule Rep_0_11211111111 [color=#2CD719]: // [process=vendor] Rep, 0 
 [State_11211111111(prog, shared_key, signed, skV)] --[]-> [!Semistate_112111111111(prog, shared_key, signed, skV)]

rule Rep_1_11211111111 [color=#2CD719]: // [process=vendor] Rep, 1 
 [!Semistate_112111111111(prog, shared_key, signed, skV)] --[]-> [State_112111111111(prog, shared_key, signed, skV)]

rule new_token_112111111111 [color=#2CD719]: // [process=vendor] new token 
 [State_112111111111(prog, shared_key, signed, skV), Fr(token)] --[]-> [State_1121111111111(prog, shared_key, signed, skV, token)]

rule event_Tokentoken_1121111111111 [color=#2CD719]: // [process=vendor] event Token(token) 
 [State_1121111111111(prog, shared_key, signed, skV, token)] --[Event(), Token(token)]-> [State_11211111111111(prog, shared_key, signed, skV, token)]

rule out_senctkntoken_shared_key_11211111111111 [color=#2CD719]: // [process=vendor] out senc(tkn(token), shared_key) 
 [State_11211111111111(prog, shared_key, signed, skV, token)] --[]-> [State_112111111111111(prog, shared_key, signed, skV, token), Out(senc(tkn(token), shared_key))]

rule in_sencaskx_tkntoken2_shared_key_112111111111111 [color=#2CD719]: // [process=vendor] in senc(ask(x, tkn(token2)), shared_key) 
 [State_112111111111111(prog, shared_key, signed, skV, token), In(senc(ask(x, tkn(token2)), shared_key))] --[]-> [State_1121111111111111(prog, shared_key, signed, skV, token, token2, x)]

rule if_eqtkntoken_tkntoken2_0_1121111111111111 [color=#2CD719]: // [process=vendor] if eq(tkn(token), tkn(token2)), 0 
 [State_1121111111111111(prog, shared_key, signed, skV, token, token2, x)] --[Pred_eq(tkn(token), tkn(token2))]-> [State_11211111111111111(prog, shared_key, signed, skV, token, token2, x)]

rule if_eqtkntoken_tkntoken2_1_1121111111111111 [color=#2CD719]: // [process=vendor] if eq(tkn(token), tkn(token2)), 1 
 [State_1121111111111111(prog, shared_key, signed, skV, token, token2, x)] --[Pred_not_eq(tkn(token), tkn(token2))]-> [State_11211111111111112(prog, shared_key, signed, skV, token, token2, x)]

rule out_sencokx_tkntoken_shared_key_11211111111111111 [color=#2CD719]: // [process=vendor] out senc(ok(x, tkn(token)), shared_key) 
 [State_11211111111111111(prog, shared_key, signed, skV, token, token2, x)] --[]-> [State_112111111111111111(prog, shared_key, signed, skV, token, token2, x), Out(senc(ok(x, tkn(token)), shared_key))]

rule Zero_112111111111111111 [color=#2CD719]: // [process=vendor] Zero 
 [State_112111111111111111(prog, shared_key, signed, skV, token, token2, x)] --[]-> []

rule Zero_11211111111111112 [color=#2CD719]: // [process=vendor] Zero 
 [State_11211111111111112(prog, shared_key, signed, skV, token, token2, x)] --[]-> []

rule Zero_112111112 [color=#2CD719]: // [process=vendor] Zero 
 [State_112111112(prog, shared_key, signed, skV)] --[]-> []


restriction predicate_eq:
"All #i a b. Pred_eq(a,b)@i ==> a = b"


restriction predicate_not_eq:
"All #i a b. Pred_not_eq(a,b)@i ==> not(a = b)"


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"

restriction predicate1:
	"All #i x y. Pred_not_pred_rep(x,y)@i ==> not(not(Ex z . (y = <'loc', z>)))"

restriction predicate0:
	"All #i x y. Pred_pred_rep(x,y)@i ==> not(Ex z . (y = <'loc', z>))"

lemma attested_comput [reuse]:
"	All #t1 inp pk. Poutput(inp, pk) @ t1 ==> ( Ex #t2. Token(pk) @ t2 & t2 < t1 )"

lemma unique [reuse]:
"	not( Ex #t1 #t2 pk inp inp2. Poutput(inp, pk) @ t1 & Poutput(inp2, pk) @ t2 & not( inp = inp2 ) )"

lemma final :
"	All #t1 #t2 prog inp. K(run(prog, inp)) @ t1 & Auth(prog) @ t2 ==> ( Ex #t3 #t4 pk. Token(pk) @ t4 & t4 < t1 & Poutput(inp, pk) @ t3 & t3 < t1 & not( Ex #t5 inp2. Poutput(inp2, pk) @ t5 & not( inp = inp2 ) ) )"

end
