theory OTP
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m

builtins: asymmetric-encryption, symmetric-encryption

functions: prog/2, list/2, hash/2, h/1, cde/1, dcde/1, shared/1, dshared/1, scode/1, dscode/1, sko/1, dsko/1, chall/1, dchall/1, chall2/1, dchall2/1

equations: dcde(cde(m))=m,dshared(shared(m))=m,dscode(scode(m))=m,dsko(sko(m))=m

heuristic: p /* heuristic for SAPIC */

rule Init_: // [process=top-level] Init 
 [] --[Init()]-> [State_()]

rule new_skV_: // [process=top-level] new skV 
 [State_(), Fr(skV)] --[]-> [State_1(skV)]

rule new_pc_1: // [process=top-level] new pc 
 [State_1(skV), Fr(pc)] --[]-> [State_11(pc, skV)]

rule new_cu_11: // [process=top-level] new cu 
 [State_11(pc, skV), Fr(cu)] --[]-> [State_111(cu, pc, skV)]

rule new_pw_111: // [process=top-level] new pw 
 [State_111(cu, pc, skV), Fr(pw)] --[]-> [State_1111(cu, pc, pw, skV)]

rule event_Chancu_1111: // [process=top-level] event Chan(cu) 
 [State_1111(cu, pc, pw, skV)] --[Event(), Chan(cu)]-> [State_11111(cu, pc, pw, skV)]

rule event_Chanpc_11111: // [process=top-level] event Chan(pc) 
 [State_11111(cu, pc, pw, skV)] --[Event(), Chan(pc)]-> [State_111111(cu, pc, pw, skV)]

rule out_pw_111111: // [process=top-level] out pw 
 [State_111111(cu, pc, pw, skV)] --[]-> [State_1111111(cu, pc, pw, skV), Out(pw)]

rule event_KeyskV_1111111: // [process=top-level] event Key(skV) 
 [State_1111111(cu, pc, pw, skV)] --[Event(), Key(skV)]-> [State_11111111(cu, pc, pw, skV)]

rule out_pkskV_11111111: // [process=top-level] out pk(skV) 
 [State_11111111(cu, pc, pw, skV)] --[]-> [State_111111111(cu, pc, pw, skV), Out(pk(skV))]

rule Par_111111111: // [process=top-level] Par 
 [State_111111111(cu, pc, pw, skV)] --[]-> [State_1111111111(cu, pc, pw, skV), State_1111111112(cu, pc, pw, skV)]

rule Par_1111111111: // [process=top-level] Par 
 [State_1111111111(cu, pc, pw, skV)] --[]-> [State_11111111111(cu, pc, pw, skV), State_11111111112(cu, pc, pw, skV)]

rule Rep_0_11111111111: // [process=top-level] Rep, 0 
 [State_11111111111(cu, pc, pw, skV)] --[]-> [!Semistate_111111111111(cu, pc, pw, skV)]

rule Rep_1_11111111111: // [process=top-level] Rep, 1 
 [!Semistate_111111111111(cu, pc, pw, skV)] --[]-> [State_111111111111(cu, pc, pw, skV)]

rule in_shared_aencshared_k_pkskV_signed__111111111111 [color=#569DC0]: // [process=server] in shared(<aenc(shared_k, pk(skV)), signed>) 
 [State_111111111111(cu, pc, pw, skV), In(shared(<aenc(shared_k, pk(skV)), signed>))] --[]-> [State_1111111111111(cu, pc, pw, shared_k, signed, skV)]

rule if_eqaencshared_k_pkskV_check_repsigned_loc__0_1111111111111 [color=#569DC0]: // [process=server] if eq(aenc(shared_k, pk(skV)), check_rep(signed, 'loc')), 0 
 [State_1111111111111(cu, pc, pw, shared_k, signed, skV)] --[Pred_eq(aenc(shared_k, pk(skV)), check_rep(signed, 'loc'))]-> [State_11111111111111(cu, pc, pw, shared_k, signed, skV)]

rule if_eqaencshared_k_pkskV_check_repsigned_loc__1_1111111111111 [color=#569DC0]: // [process=server] if eq(aenc(shared_k, pk(skV)), check_rep(signed, 'loc')), 1 
 [State_1111111111111(cu, pc, pw, shared_k, signed, skV)] --[Pred_not_eq(aenc(shared_k, pk(skV)), check_rep(signed, 'loc'))]-> [State_11111111111112(cu, pc, pw, shared_k, signed, skV)]

rule event_SessionVpkskV_shared_k_11111111111111 [color=#569DC0]: // [process=server] event SessionV(pk(skV), shared_k) 
 [State_11111111111111(cu, pc, pw, shared_k, signed, skV)] --[Event(), SessionV(pk(skV), shared_k)]-> [State_111111111111111(cu, pc, pw, shared_k, signed, skV)]

rule new_code_111111111111111 [color=#569DC0]: // [process=server] new code 
 [State_111111111111111(cu, pc, pw, shared_k, signed, skV), Fr(code)] --[]-> [State_1111111111111111(code, cu, pc, pw, shared_k, signed, skV)]

rule out_pc_code_0_1111111111111111 [color=#569DC0]: // [process=server] out pc,code, 0 
 [State_1111111111111111(code, cu, pc, pw, shared_k, signed, skV), In(pc)] --[ChannelInEvent(pc)]-> [Out(code), State_11111111111111111(code, cu, pc, pw, shared_k, signed, skV)]

rule out_pc_code_1_1111111111111111 [color=#569DC0]: // [process=server] out pc,code, 1 
 [State_1111111111111111(code, cu, pc, pw, shared_k, signed, skV)] --[]-> [Semistate_1111111111111111(code, cu, pc, pw, shared_k, signed, skV), Message(pc,code)]

rule out_pc_code_2_1111111111111111 [color=#569DC0]: // [process=server] out pc,code, 2 
 [Semistate_1111111111111111(code, cu, pc, pw, shared_k, signed, skV), Ack(pc,code)] --[]-> [State_11111111111111111(code, cu, pc, pw, shared_k, signed, skV)]

rule in_scodesenccode_shared_k_11111111111111111 [color=#569DC0]: // [process=server] in scode(senc(code, shared_k)) 
 [State_11111111111111111(code, cu, pc, pw, shared_k, signed, skV), In(scode(senc(code, shared_k)))] --[]-> [State_111111111111111111(code, cu, pc, pw, shared_k, signed, skV)]

rule event_ProvScode_111111111111111111 [color=#569DC0]: // [process=server] event ProvS(code) 
 [State_111111111111111111(code, cu, pc, pw, shared_k, signed, skV)] --[Event(), ProvS(code)]-> [State_1111111111111111111(code, cu, pc, pw, shared_k, signed, skV)]

rule new_kOTP_1111111111111111111 [color=#569DC0]: // [process=server] new kOTP 
 [State_1111111111111111111(code, cu, pc, pw, shared_k, signed, skV), Fr(kOTP)] --[]-> [State_11111111111111111111(code, cu, kOTP, pc, pw, shared_k, signed, skV)]

rule out_skosenckOTP_shared_k_11111111111111111111 [color=#569DC0]: // [process=server] out sko(senc(kOTP, shared_k)) 
 [State_11111111111111111111(code, cu, kOTP, pc, pw, shared_k, signed, skV)] --[]-> [State_111111111111111111111(code, cu, kOTP, pc, pw, shared_k, signed, skV), Out(sko(senc(kOTP, shared_k)))]

rule Rep_0_111111111111111111111 [color=#569DC0]: // [process=server] Rep, 0 
 [State_111111111111111111111(code, cu, kOTP, pc, pw, shared_k, signed, skV)] --[]-> [!Semistate_1111111111111111111111(code, cu, kOTP, pc, pw, shared_k, signed, skV)]

rule Rep_1_111111111111111111111 [color=#569DC0]: // [process=server] Rep, 1 
 [!Semistate_1111111111111111111111(code, cu, kOTP, pc, pw, shared_k, signed, skV)] --[]-> [State_1111111111111111111111(code, cu, kOTP, pc, pw, shared_k, signed, skV)]

rule new_challenge_1111111111111111111111 [color=#569DC0]: // [process=server] new challenge 
 [State_1111111111111111111111(code, cu, kOTP, pc, pw, shared_k, signed, skV), Fr(challenge)] --[]-> [State_11111111111111111111111(challenge, code, cu, kOTP, pc, pw, shared_k, signed, skV)]

rule event_Challchallenge_shared_k_11111111111111111111111 [color=#569DC0]: // [process=server] event Chall(challenge, shared_k) 
 [State_11111111111111111111111(challenge, code, cu, kOTP, pc, pw, shared_k, signed, skV)] --[Event(), Chall(challenge, shared_k)]-> [State_111111111111111111111111(challenge, code, cu, kOTP, pc, pw, shared_k, signed, skV)]

rule out_sencchallenge_shared_k_111111111111111111111111 [color=#569DC0]: // [process=server] out senc(challenge, shared_k) 
 [State_111111111111111111111111(challenge, code, cu, kOTP, pc, pw, shared_k, signed, skV)] --[]-> [State_1111111111111111111111111(challenge, code, cu, kOTP, pc, pw, shared_k, signed, skV), Out(senc(challenge, shared_k))]

rule in_hpw_hashkOTP_challenge__1111111111111111111111111 [color=#569DC0]: // [process=server] in <h(pw), hash(kOTP, challenge)> 
 [State_1111111111111111111111111(challenge, code, cu, kOTP, pc, pw, shared_k, signed, skV), In(<h(pw), hash(kOTP, challenge)>)] --[]-> [State_11111111111111111111111111(challenge, code, cu, kOTP, pc, pw, shared_k, signed, skV)]

rule event_Acceptpw_challenge_11111111111111111111111111 [color=#569DC0]: // [process=server] event Accept(pw, challenge) 
 [State_11111111111111111111111111(challenge, code, cu, kOTP, pc, pw, shared_k, signed, skV)] --[Event(), Accept(pw, challenge)]-> [State_111111111111111111111111111(challenge, code, cu, kOTP, pc, pw, shared_k, signed, skV)]

rule Zero_111111111111111111111111111 [color=#569DC0]: // [process=server] Zero 
 [State_111111111111111111111111111(challenge, code, cu, kOTP, pc, pw, shared_k, signed, skV)] --[]-> []

rule Zero_11111111111112 [color=#569DC0]: // [process=server] Zero 
 [State_11111111111112(cu, pc, pw, shared_k, signed, skV)] --[]-> []

rule Rep_0_11111111112: // [process=top-level] Rep, 0 
 [State_11111111112(cu, pc, pw, skV)] --[]-> [!Semistate_111111111121(cu, pc, pw, skV)]

rule Rep_1_11111111112: // [process=top-level] Rep, 1 
 [!Semistate_111111111121(cu, pc, pw, skV)] --[]-> [State_111111111121(cu, pc, pw, skV)]

rule in_pc_code_0_111111111121 [color=#2CD719]: // [process=user] in pc,code, 0 
 [State_111111111121(cu, pc, pw, skV), In(<pc, code>)] --[ChannelInEvent(<pc, code>)]-> [State_1111111111211(code, cu, pc, pw, skV)]

rule in_pc_code_1_111111111121 [color=#2CD719]: // [process=user] in pc,code, 1 
 [State_111111111121(cu, pc, pw, skV), Message(pc,code)] --[]-> [Ack(pc,code), State_1111111111211(code, cu, pc, pw, skV)]

rule event_ProvUcode_1111111111211 [color=#2CD719]: // [process=user] event ProvU(code) 
 [State_1111111111211(code, cu, pc, pw, skV)] --[Event(), ProvU(code)]-> [State_11111111112111(code, cu, pc, pw, skV)]

rule out_cdecode_11111111112111 [color=#2CD719]: // [process=user] out cde(code) 
 [State_11111111112111(code, cu, pc, pw, skV)] --[]-> [State_111111111121111(code, cu, pc, pw, skV), Out(cde(code))]

rule Rep_0_111111111121111 [color=#2CD719]: // [process=user] Rep, 0 
 [State_111111111121111(code, cu, pc, pw, skV)] --[]-> [!Semistate_1111111111211111(code, cu, pc, pw, skV)]

rule Rep_1_111111111121111 [color=#2CD719]: // [process=user] Rep, 1 
 [!Semistate_1111111111211111(code, cu, pc, pw, skV)] --[]-> [State_1111111111211111(code, cu, pc, pw, skV)]

rule new_fr_1111111111211111 [color=#2CD719]: // [process=user] new fr 
 [State_1111111111211111(code, cu, pc, pw, skV), Fr(fr)] --[]-> [State_11111111112111111(code, cu, fr, pc, pw, skV)]

rule event_AskUpw_fr_11111111112111111 [color=#2CD719]: // [process=user] event AskU(pw, fr) 
 [State_11111111112111111(code, cu, fr, pc, pw, skV)] --[Event(), AskU(pw, fr)]-> [State_111111111121111111(code, cu, fr, pc, pw, skV)]

rule out_cu_pw_fr_0_111111111121111111 [color=#2CD719]: // [process=user] out cu,<pw, fr>, 0 
 [State_111111111121111111(code, cu, fr, pc, pw, skV), In(cu)] --[ChannelInEvent(cu)]-> [Out(<pw, fr>), State_1111111111211111111(code, cu, fr, pc, pw, skV)]

rule out_cu_pw_fr_1_111111111121111111 [color=#2CD719]: // [process=user] out cu,<pw, fr>, 1 
 [State_111111111121111111(code, cu, fr, pc, pw, skV)] --[]-> [Semistate_111111111121111111(code, cu, fr, pc, pw, skV), Message(cu,<pw, fr>)]

rule out_cu_pw_fr_2_111111111121111111 [color=#2CD719]: // [process=user] out cu,<pw, fr>, 2 
 [Semistate_111111111121111111(code, cu, fr, pc, pw, skV), Ack(cu,<pw, fr>)] --[]-> [State_1111111111211111111(code, cu, fr, pc, pw, skV)]

rule Zero_1111111111211111111 [color=#2CD719]: // [process=user] Zero 
 [State_1111111111211111111(code, cu, fr, pc, pw, skV)] --[]-> []

rule Rep_0_1111111112: // [process=top-level] Rep, 0 
 [State_1111111112(cu, pc, pw, skV)] --[]-> [!Semistate_11111111121(cu, pc, pw, skV)]

rule Rep_1_1111111112: // [process=top-level] Rep, 1 
 [!Semistate_11111111121(cu, pc, pw, skV)] --[]-> [State_11111111121(cu, pc, pw, skV)]

rule new_shared_k_11111111121 [color=#11EC28]: // [process=enclave] new shared_k 
 [State_11111111121(cu, pc, pw, skV), Fr(shared_k)] --[]-> [State_111111111211(cu, pc, pw, shared_k, skV)]

rule event_SessionPpkskV_shared_k_111111111211 [color=#11EC28]: // [process=enclave] event SessionP(pk(skV), shared_k) 
 [State_111111111211(cu, pc, pw, shared_k, skV)] --[Event(), SessionP(pk(skV), shared_k)]-> [State_1111111112111(cu, pc, pw, shared_k, skV)]

rule out_shared_aencshared_k_pkskV_repaencshared_k_pkskV_loc___1111111112111 [color=#11EC28]: // [process=enclave] out shared(<aenc(shared_k, pk(skV)), rep(aenc(shared_k, pk(skV)), 'loc')>) 
 [State_1111111112111(cu, pc, pw, shared_k, skV)] --[]-> [State_11111111121111(cu, pc, pw, shared_k, skV), Out(shared(<aenc(shared_k, pk(skV)), rep(aenc(shared_k, pk(skV)), 'loc')>))]

rule in_cdecode_11111111121111 [color=#11EC28]: // [process=enclave] in cde(code) 
 [State_11111111121111(cu, pc, pw, shared_k, skV), In(cde(code))] --[]-> [State_111111111211111(code, cu, pc, pw, shared_k, skV)]

rule event_ProvEcode_111111111211111 [color=#11EC28]: // [process=enclave] event ProvE(code) 
 [State_111111111211111(code, cu, pc, pw, shared_k, skV)] --[Event(), ProvE(code)]-> [State_1111111112111111(code, cu, pc, pw, shared_k, skV)]

rule out_dscodesenccode_shared_k_1111111112111111 [color=#11EC28]: // [process=enclave] out dscode(senc(code, shared_k)) 
 [State_1111111112111111(code, cu, pc, pw, shared_k, skV)] --[]-> [State_11111111121111111(code, cu, pc, pw, shared_k, skV), Out(dscode(senc(code, shared_k)))]

rule in_skosenckOTP_shared_k_11111111121111111 [color=#11EC28]: // [process=enclave] in sko(senc(kOTP, shared_k)) 
 [State_11111111121111111(code, cu, pc, pw, shared_k, skV), In(sko(senc(kOTP, shared_k)))] --[]-> [State_111111111211111111(code, cu, kOTP, pc, pw, shared_k, skV)]

rule Rep_0_111111111211111111 [color=#11EC28]: // [process=enclave] Rep, 0 
 [State_111111111211111111(code, cu, kOTP, pc, pw, shared_k, skV)] --[]-> [!Semistate_1111111112111111111(code, cu, kOTP, pc, pw, shared_k, skV)]

rule Rep_1_111111111211111111 [color=#11EC28]: // [process=enclave] Rep, 1 
 [!Semistate_1111111112111111111(code, cu, kOTP, pc, pw, shared_k, skV)] --[]-> [State_1111111112111111111(code, cu, kOTP, pc, pw, shared_k, skV)]

rule in_cu_pw_fr_0_1111111112111111111 [color=#11EC28]: // [process=enclave] in cu,<pw, fr>, 0 
 [State_1111111112111111111(code, cu, kOTP, pc, pw, shared_k, skV), In(<cu, <pw, fr>>)] --[ChannelInEvent(<cu, <pw, fr>>)]-> [State_11111111121111111111(code, cu, fr, kOTP, pc, pw, shared_k, skV)]

rule in_cu_pw_fr_1_1111111112111111111 [color=#11EC28]: // [process=enclave] in cu,<pw, fr>, 1 
 [State_1111111112111111111(code, cu, kOTP, pc, pw, shared_k, skV), Message(cu,<pw, fr>)] --[]-> [Ack(cu,<pw, fr>), State_11111111121111111111(code, cu, fr, kOTP, pc, pw, shared_k, skV)]

rule in_sencchallenge_shared_k_11111111121111111111 [color=#11EC28]: // [process=enclave] in senc(challenge, shared_k) 
 [State_11111111121111111111(code, cu, fr, kOTP, pc, pw, shared_k, skV), In(senc(challenge, shared_k))] --[]-> [State_111111111211111111111(challenge, code, cu, fr, kOTP, pc, pw, shared_k, skV)]

rule event_Askpw_challenge_fr_shared_k_111111111211111111111 [color=#11EC28]: // [process=enclave] event Ask(pw, challenge, fr, shared_k) 
 [State_111111111211111111111(challenge, code, cu, fr, kOTP, pc, pw, shared_k, skV)] --[Event(), Ask(pw, challenge, fr, shared_k)]-> [State_1111111112111111111111(challenge, code, cu, fr, kOTP, pc, pw, shared_k, skV)]

rule out_hpw_hashkOTP_challenge__1111111112111111111111 [color=#11EC28]: // [process=enclave] out <h(pw), hash(kOTP, challenge)> 
 [State_1111111112111111111111(challenge, code, cu, fr, kOTP, pc, pw, shared_k, skV)] --[]-> [State_11111111121111111111111(challenge, code, cu, fr, kOTP, pc, pw, shared_k, skV), Out(<h(pw), hash(kOTP, challenge)>)]

rule Zero_11111111121111111111111 [color=#11EC28]: // [process=enclave] Zero 
 [State_11111111121111111111111(challenge, code, cu, fr, kOTP, pc, pw, shared_k, skV)] --[]-> []


restriction predicate_eq:
"All #i a b. Pred_eq(a,b)@i ==> a = b"


restriction predicate_not_eq:
"All #i a b. Pred_not_eq(a,b)@i ==> not(a = b)"


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"

restriction predicate1:
	"All #i x y. Pred_not_pred_rep(x,y)@i ==> not(not(y = 'loc'))"

restriction predicate0:
	"All #i x y. Pred_pred_rep(x,y)@i ==> not(y = 'loc')"

lemma secrecy_key [reuse]:
"	not( Ex k #t1 #t2. Key(k) @ t1 & KU(k) @ t2 )"

lemma key_ex [reuse]:
"	All pka k #t1. SessionV(pka, k) @ t1 ==> Ex #t2. SessionP(pka, k) @ t2 & t2 < t1"

lemma secrecy_ex [reuse]:
"	not( Ex pka k #t1 #t2. SessionV(pka, k) @ t1 & KU(k) @ t2 )"

lemma unic [reuse]:
"	not( Ex #t1 #t2 pw fr. AskU(pw, fr) @ t1 & AskU(pw, fr) @ t2 & not( #t1 = #t2 ) )"

lemma secrecy_chall [reuse]:
"	not( Ex pw chal fr k #t1 #t2. Ask(pw, chal, fr, k) @ t1 & KU(chal) @ t2 )"

lemma valid [reuse]:
"	All #t1 pw ch. Accept(pw, ch) @ t1 ==> Ex #t2 fr k. Ask(pw, ch, fr, k) @ t2 & #t2 < #t1"

lemma unic_2 [reuse]:
"	not( Ex #t1 #t2 pw ch fr k. Ask(pw, ch, fr, k) @ t1 & Ask(pw, ch, fr, k) @ t2 & not( #t1 = #t2 ) )"

lemma valid_final :
"	All #t1 pw ch. Accept(pw, ch) @ t1 ==> Ex #t2 #t3 fr k. Ask(pw, ch, fr, k) @ t2 & AskU(pw, fr) @ t3 & #t2 < #t1 & #t3 < #t2 & not( Ex #t5. Ask(pw, ch, fr, k) @ t5 & not( #t2 = #t5 ) ) & not( Ex #t6. AskU(pw, fr) @ t6 & not( #t3 = #t6 ) )"

end
