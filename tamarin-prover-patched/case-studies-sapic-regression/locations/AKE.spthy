theory AKE
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m

builtins: symmetric-encryption, asymmetric-encryption

heuristic: p /* heuristic for SAPIC */

rule Init_: // [process=top-level] Init 
 [] --[Init()]-> [State_()]

rule new_init_: // [process=top-level] new init 
 [State_(), Fr(init)] --[]-> [State_1(init)]

rule Par_1: // [process=top-level] Par 
 [State_1(init)] --[]-> [State_11(init), State_12(init)]

rule Rep_0_11: // [process=top-level] Rep, 0 
 [State_11(init)] --[]-> [!Semistate_111(init)]

rule Rep_1_11: // [process=top-level] Rep, 1 
 [!Semistate_111(init)] --[]-> [State_111(init)]

rule in_pkskV_111 [color=#569DC0]: // [process=r] in pk(skV) 
 [State_111(init), In(pk(skV))] --[]-> [State_1111(init, skV)]

rule Rep_0_1111 [color=#569DC0]: // [process=r] Rep, 0 
 [State_1111(init, skV)] --[]-> [!Semistate_11111(init, skV)]

rule Rep_1_1111 [color=#569DC0]: // [process=r] Rep, 1 
 [!Semistate_11111(init, skV)] --[]-> [State_11111(init, skV)]

rule new_k_11111 [color=#569DC0]: // [process=r] new k 
 [State_11111(init, skV), Fr(k)] --[]-> [State_111111(init, k, skV)]

rule event_SessionPpkskV_k_111111 [color=#569DC0]: // [process=r] event SessionP(pk(skV), k) 
 [State_111111(init, k, skV)] --[Event(), SessionP(pk(skV), k)]-> [State_1111111(init, k, skV)]

rule event_Poutput_aenck_pkskV_repaenck_pkskV_loc_pkskV___1111111 [color=#569DC0]: // [process=r] event Poutput(<aenc(k, pk(skV)), rep(aenc(k, pk(skV)), <'loc', pk(skV)>)>) 
 [State_1111111(init, k, skV)] --[Event(), Poutput(<aenc(k, pk(skV)), rep(aenc(k, pk(skV)), <'loc', pk(skV)>)>)]-> [State_11111111(init, k, skV)]

rule out_aenck_pkskV_repaenck_pkskV_loc_pkskV___11111111 [color=#569DC0]: // [process=r] out <aenc(k, pk(skV)), rep(aenc(k, pk(skV)), <'loc', pk(skV)>)> 
 [State_11111111(init, k, skV)] --[]-> [State_111111111(init, k, skV), Out(<aenc(k, pk(skV)), rep(aenc(k, pk(skV)), <'loc', pk(skV)>)>)]

rule Zero_111111111 [color=#569DC0]: // [process=r] Zero 
 [State_111111111(init, k, skV)] --[]-> []

rule Rep_0_12: // [process=top-level] Rep, 0 
 [State_12(init)] --[]-> [!Semistate_121(init)]

rule Rep_1_12: // [process=top-level] Rep, 1 
 [!Semistate_121(init)] --[]-> [State_121(init)]

rule new_skV_121 [color=#2CD719]: // [process=v] new skV 
 [State_121(init), Fr(skV)] --[]-> [State_1211(init, skV)]

rule event_HonestPpkskV_1211 [color=#2CD719]: // [process=v] event HonestP(pk(skV)) 
 [State_1211(init, skV)] --[Event(), HonestP(pk(skV))]-> [State_12111(init, skV)]

rule out_pkskV_12111 [color=#2CD719]: // [process=v] out pk(skV) 
 [State_12111(init, skV)] --[]-> [State_121111(init, skV), Out(pk(skV))]

rule in_aenck_pkskV_signed__121111 [color=#2CD719]: // [process=v] in <aenc(k, pk(skV)), signed> 
 [State_121111(init, skV), In(<aenc(k, pk(skV)), signed>)] --[]-> [State_1211111(init, k, signed, skV)]

rule if_eqaenck_pkskV_check_repsigned_loc_pkskV__0_1211111 [color=#2CD719]: // [process=v] if eq(aenc(k, pk(skV)), check_rep(signed, <'loc', pk(skV)>)), 0 
 [State_1211111(init, k, signed, skV)] --[Pred_eq(aenc(k, pk(skV)), check_rep(signed, <'loc', pk(skV)>))]-> [State_12111111(init, k, signed, skV)]

rule if_eqaenck_pkskV_check_repsigned_loc_pkskV__1_1211111 [color=#2CD719]: // [process=v] if eq(aenc(k, pk(skV)), check_rep(signed, <'loc', pk(skV)>)), 1 
 [State_1211111(init, k, signed, skV)] --[Pred_not_eq(aenc(k, pk(skV)), check_rep(signed, <'loc', pk(skV)>))]-> [State_12111112(init, k, signed, skV)]

rule event_Voutput_aenck_pkskV_signed__12111111 [color=#2CD719]: // [process=v] event Voutput(<aenc(k, pk(skV)), signed>) 
 [State_12111111(init, k, signed, skV)] --[Event(), Voutput(<aenc(k, pk(skV)), signed>)]-> [State_121111111(init, k, signed, skV)]

rule event_SessionVpkskV_k_121111111 [color=#2CD719]: // [process=v] event SessionV(pk(skV), k) 
 [State_121111111(init, k, signed, skV)] --[Event(), SessionV(pk(skV), k)]-> [State_1211111111(init, k, signed, skV)]

rule Zero_1211111111 [color=#2CD719]: // [process=v] Zero 
 [State_1211111111(init, k, signed, skV)] --[]-> []

rule Zero_12111112 [color=#2CD719]: // [process=v] Zero 
 [State_12111112(init, k, signed, skV)] --[]-> []


restriction predicate_eq:
"All #i a b. Pred_eq(a,b)@i ==> a = b"


restriction predicate_not_eq:
"All #i a b. Pred_not_eq(a,b)@i ==> not(a = b)"


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"

restriction predicate1:
	"All #i x y. Pred_not_pred_rep(x,y)@i ==> not(not(Ex z . (y = <'loc', z>)))"

restriction predicate0:
	"All #i x y. Pred_pred_rep(x,y)@i ==> not(Ex z . (y = <'loc', z>))"

lemma sanity3 [reuse]:
"	All pka k #t1. SessionV(pka, k) @ t1 ==> Ex #t2. SessionP(pka, k) @ t2 & t2 < t1"

lemma secrecy [reuse]:
"	not( Ex pka k #t1 #t2. SessionV(pka, k) @ t1 & K(k) @ t2 )"

end
