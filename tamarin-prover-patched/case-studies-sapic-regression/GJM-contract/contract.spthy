theory Contract
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m
section{* GM Protocol for Contract signing *}

builtins: signing

functions: pcs/3, checkpcs/5, convertpcs/2, check_getmsg/2, fakepcs/4

equations: check_getmsg(sign(xm, xsk), pk(xsk))=xm,checkpcs(xc, pk(xsk), ypk, zpk, pcs(sign(xc, xsk), ypk, zpk))=true(),convertpcs(zsk, pcs(sign(xc, xsk), ypk, pk(zsk)))=sign(xc, xsk),checkpcs(xc, xpk, pk(ysk), zpk, fakepcs(xpk, ysk, zpk, xc))=true()

heuristic: p /* heuristic for SAPIC */

rule Init_: // [process=top-level] Init 
 [] --[Init()]-> [State_()]

rule Rep_0_: // [process=top-level] Rep, 0 
 [State_()] --[]-> [!Semistate_1()]

rule Rep_1_: // [process=top-level] Rep, 1 
 [!Semistate_1()] --[]-> [State_1()]

rule new_skT_1: // [process=top-level] new skT 
 [State_1(), Fr(skT)] --[]-> [State_11(skT)]

rule out_pkskT_11: // [process=top-level] out pk(skT) 
 [State_11(skT)] --[]-> [State_111(skT), Out(pk(skT))]

rule Par_111: // [process=top-level] Par 
 [State_111(skT)] --[]-> [State_1111(skT), State_1112(skT)]

rule Par_1111: // [process=top-level] Par 
 [State_1111(skT)] --[]-> [State_11111(skT), State_11112(skT)]

rule Par_11111: // [process=top-level] Par 
 [State_11111(skT)] --[]-> [State_111111(skT), State_111112(skT)]

rule Par_111111: // [process=top-level] Par 
 [State_111111(skT)] --[]-> [State_1111111(skT), State_1111112(skT)]

rule Rep_0_1111111: // [process=top-level] Rep, 0 
 [State_1111111(skT)] --[]-> [!Semistate_11111111(skT)]

rule Rep_1_1111111: // [process=top-level] Rep, 1 
 [!Semistate_11111111(skT)] --[]-> [State_11111111(skT)]

rule in_abort_ct_pk1_pk2_ysig__11111111 [color=#569DC0]: // [process=Abort1] in <'abort', <ct, pk1, pk2, ysig>> 
 [State_11111111(skT), In(<'abort', <ct, pk1, pk2, ysig>>)] --[]-> [State_111111111(ct, pk1, pk2, skT, ysig)]

rule if_eqcheck_getmsgysig_pk1_ct_pk1_pk2__0_111111111 [color=#569DC0]: // [process=Abort1] if eq(check_getmsg(ysig, pk1), <ct, pk1, pk2>), 0 
 [State_111111111(ct, pk1, pk2, skT, ysig)] --[Pred_eq(check_getmsg(ysig, pk1), <ct, pk1, pk2>)]-> [State_1111111111(ct, pk1, pk2, skT, ysig)]

rule if_eqcheck_getmsgysig_pk1_ct_pk1_pk2__1_111111111 [color=#569DC0]: // [process=Abort1] if eq(check_getmsg(ysig, pk1), <ct, pk1, pk2>), 1 
 [State_111111111(ct, pk1, pk2, skT, ysig)] --[Pred_not_eq(check_getmsg(ysig, pk1), <ct, pk1, pk2>)]-> [State_1111111112(ct, pk1, pk2, skT, ysig)]

rule lock_ct_1111111111 [color=#569DC0]: // [process=Abort1] lock ct 
 [State_1111111111(ct, pk1, pk2, skT, ysig), Fr(~lock7)] --[Lock($7, ~lock7, ct), Lock_7($7, ~lock7, ct)]-> [State_11111111111(~lock7, ct, pk1, pk2, skT, ysig)]

rule lookup_ct_as_state_0_11111111111 [color=#569DC0]: // [process=Abort1] lookup ct as state, 0 
 [State_11111111111(~lock7, ct, pk1, pk2, skT, ysig)] --[IsIn(ct, state)]-> [State_111111111111(~lock7, ct, pk1, pk2, skT, state, ysig)]

rule lookup_ct_as_state_1_11111111111 [color=#569DC0]: // [process=Abort1] lookup ct as state, 1 
 [State_11111111111(~lock7, ct, pk1, pk2, skT, ysig)] --[IsNotSet(ct)]-> [State_111111111112(~lock7, ct, pk1, pk2, skT, ysig)]

rule unlock_ct_111111111111 [color=#569DC0]: // [process=Abort1] unlock ct 
 [State_111111111111(~lock7, ct, pk1, pk2, skT, state, ysig)] --[Unlock($7, ~lock7, ct), Unlock_7($7, ~lock7, ct)]-> [State_1111111111111(~lock7, ct, pk1, pk2, skT, state, ysig)]

rule Zero_1111111111111 [color=#569DC0]: // [process=Abort1] Zero 
 [State_1111111111111(~lock7, ct, pk1, pk2, skT, state, ysig)] --[]-> []

rule insert_ct_aborted__111111111112 [color=#569DC0]: // [process=Abort1] insert ct,'aborted' 
 [State_111111111112(~lock7, ct, pk1, pk2, skT, ysig)] --[Insert(ct, 'aborted')]-> [State_1111111111121(~lock7, ct, pk1, pk2, skT, ysig)]

rule event_Abort1ct_1111111111121 [color=#569DC0]: // [process=Abort1] event Abort1(ct) 
 [State_1111111111121(~lock7, ct, pk1, pk2, skT, ysig)] --[Event(), Abort1(ct)]-> [State_11111111111211(~lock7, ct, pk1, pk2, skT, ysig)]

rule unlock_ct_11111111111211 [color=#569DC0]: // [process=Abort1] unlock ct 
 [State_11111111111211(~lock7, ct, pk1, pk2, skT, ysig)] --[Unlock($7, ~lock7, ct), Unlock_7($7, ~lock7, ct)]-> [State_111111111112111(~lock7, ct, pk1, pk2, skT, ysig)]

rule out_sign_ct_pk1_pk2_ysig_skT_111111111112111 [color=#569DC0]: // [process=Abort1] out sign(<<ct, pk1, pk2>, ysig>, skT) 
 [State_111111111112111(~lock7, ct, pk1, pk2, skT, ysig)] --[]-> [State_1111111111121111(~lock7, ct, pk1, pk2, skT, ysig), Out(sign(<<ct, pk1, pk2>, ysig>, skT))]

rule Zero_1111111111121111 [color=#569DC0]: // [process=Abort1] Zero 
 [State_1111111111121111(~lock7, ct, pk1, pk2, skT, ysig)] --[]-> []

rule Zero_1111111112 [color=#569DC0]: // [process=Abort1] Zero 
 [State_1111111112(ct, pk1, pk2, skT, ysig)] --[]-> []

rule Rep_0_1111112: // [process=top-level] Rep, 0 
 [State_1111112(skT)] --[]-> [!Semistate_11111121(skT)]

rule Rep_1_1111112: // [process=top-level] Rep, 1 
 [!Semistate_11111121(skT)] --[]-> [State_11111121(skT)]

rule in_resolve2_ct_pk1_pk2_ypcs1_ysig2__11111121 [color=#2CD719]: // [process=Resolve2] in <'resolve2', <ct, pk1, pk2, ypcs1, ysig2>> 
 [State_11111121(skT), In(<'resolve2', <ct, pk1, pk2, ypcs1, ysig2>>)] --[]-> [State_111111211(ct, pk1, pk2, skT, ypcs1, ysig2)]

rule if_eqcheck_getmsgysig2_pk2_ct_0_111111211 [color=#2CD719]: // [process=Resolve2] if eq(check_getmsg(ysig2, pk2), ct), 0 
 [State_111111211(ct, pk1, pk2, skT, ypcs1, ysig2)] --[Pred_eq(check_getmsg(ysig2, pk2), ct)]-> [State_1111112111(ct, pk1, pk2, skT, ypcs1, ysig2)]

rule if_eqcheck_getmsgysig2_pk2_ct_1_111111211 [color=#2CD719]: // [process=Resolve2] if eq(check_getmsg(ysig2, pk2), ct), 1 
 [State_111111211(ct, pk1, pk2, skT, ypcs1, ysig2)] --[Pred_not_eq(check_getmsg(ysig2, pk2), ct)]-> [State_1111112112(ct, pk1, pk2, skT, ypcs1, ysig2)]

rule if_eqcheck_getmsgconvertpcsskT_ypcs1_pk1_ct_0_1111112111 [color=#2CD719]: // [process=Resolve2] if eq(check_getmsg(convertpcs(skT, ypcs1), pk1), ct), 0 
 [State_1111112111(ct, pk1, pk2, skT, ypcs1, ysig2)] --[Pred_eq(check_getmsg(convertpcs(skT, ypcs1), pk1), ct)]-> [State_11111121111(ct, pk1, pk2, skT, ypcs1, ysig2)]

rule if_eqcheck_getmsgconvertpcsskT_ypcs1_pk1_ct_1_1111112111 [color=#2CD719]: // [process=Resolve2] if eq(check_getmsg(convertpcs(skT, ypcs1), pk1), ct), 1 
 [State_1111112111(ct, pk1, pk2, skT, ypcs1, ysig2)] --[Pred_not_eq(check_getmsg(convertpcs(skT, ypcs1), pk1), ct)]-> [State_11111121112(ct, pk1, pk2, skT, ypcs1, ysig2)]

rule if_eqcheckpcsct_pk1_pk2_pkskT_ypcs1_true_0_11111121111 [color=#2CD719]: // [process=Resolve2] if eq(checkpcs(ct, pk1, pk2, pk(skT), ypcs1), true()), 0 
 [State_11111121111(ct, pk1, pk2, skT, ypcs1, ysig2)] --[Pred_eq(checkpcs(ct, pk1, pk2, pk(skT), ypcs1), true())]-> [State_111111211111(ct, pk1, pk2, skT, ypcs1, ysig2)]

rule if_eqcheckpcsct_pk1_pk2_pkskT_ypcs1_true_1_11111121111 [color=#2CD719]: // [process=Resolve2] if eq(checkpcs(ct, pk1, pk2, pk(skT), ypcs1), true()), 1 
 [State_11111121111(ct, pk1, pk2, skT, ypcs1, ysig2)] --[Pred_not_eq(checkpcs(ct, pk1, pk2, pk(skT), ypcs1), true())]-> [State_111111211112(ct, pk1, pk2, skT, ypcs1, ysig2)]

rule lock_ct_111111211111 [color=#2CD719]: // [process=Resolve2] lock ct 
 [State_111111211111(ct, pk1, pk2, skT, ypcs1, ysig2), Fr(~lock7)] --[Lock($7, ~lock7, ct), Lock_7($7, ~lock7, ct)]-> [State_1111112111111(~lock7, ct, pk1, pk2, skT, ypcs1, ysig2)]

rule lookup_ct_as_status_0_1111112111111 [color=#2CD719]: // [process=Resolve2] lookup ct as status, 0 
 [State_1111112111111(~lock7, ct, pk1, pk2, skT, ypcs1, ysig2)] --[IsIn(ct, status)]-> [State_11111121111111(~lock7, ct, pk1, pk2, skT, status, ypcs1, ysig2)]

rule lookup_ct_as_status_1_1111112111111 [color=#2CD719]: // [process=Resolve2] lookup ct as status, 1 
 [State_1111112111111(~lock7, ct, pk1, pk2, skT, ypcs1, ysig2)] --[IsNotSet(ct)]-> [State_11111121111112(~lock7, ct, pk1, pk2, skT, ypcs1, ysig2)]

rule unlock_ct_11111121111111 [color=#2CD719]: // [process=Resolve2] unlock ct 
 [State_11111121111111(~lock7, ct, pk1, pk2, skT, status, ypcs1, ysig2)] --[Unlock($7, ~lock7, ct), Unlock_7($7, ~lock7, ct)]-> [State_111111211111111(~lock7, ct, pk1, pk2, skT, status, ypcs1, ysig2)]

rule Zero_111111211111111 [color=#2CD719]: // [process=Resolve2] Zero 
 [State_111111211111111(~lock7, ct, pk1, pk2, skT, status, ypcs1, ysig2)] --[]-> []

rule insert_ct_resolved2__11111121111112 [color=#2CD719]: // [process=Resolve2] insert ct,'resolved2' 
 [State_11111121111112(~lock7, ct, pk1, pk2, skT, ypcs1, ysig2)] --[Insert(ct, 'resolved2')]-> [State_111111211111121(~lock7, ct, pk1, pk2, skT, ypcs1, ysig2)]

rule event_Resolve2ct_111111211111121 [color=#2CD719]: // [process=Resolve2] event Resolve2(ct) 
 [State_111111211111121(~lock7, ct, pk1, pk2, skT, ypcs1, ysig2)] --[Event(), Resolve2(ct)]-> [State_1111112111111211(~lock7, ct, pk1, pk2, skT, ypcs1, ysig2)]

rule unlock_ct_1111112111111211 [color=#2CD719]: // [process=Resolve2] unlock ct 
 [State_1111112111111211(~lock7, ct, pk1, pk2, skT, ypcs1, ysig2)] --[Unlock($7, ~lock7, ct), Unlock_7($7, ~lock7, ct)]-> [State_11111121111112111(~lock7, ct, pk1, pk2, skT, ypcs1, ysig2)]

rule out_sign_convertpcsskT_ypcs1_ysig2_skT_11111121111112111 [color=#2CD719]: // [process=Resolve2] out sign(<convertpcs(skT, ypcs1), ysig2>, skT) 
 [State_11111121111112111(~lock7, ct, pk1, pk2, skT, ypcs1, ysig2)] --[]-> [State_111111211111121111(~lock7, ct, pk1, pk2, skT, ypcs1, ysig2), Out(sign(<convertpcs(skT, ypcs1), ysig2>, skT))]

rule Zero_111111211111121111 [color=#2CD719]: // [process=Resolve2] Zero 
 [State_111111211111121111(~lock7, ct, pk1, pk2, skT, ypcs1, ysig2)] --[]-> []

rule Zero_111111211112 [color=#2CD719]: // [process=Resolve2] Zero 
 [State_111111211112(ct, pk1, pk2, skT, ypcs1, ysig2)] --[]-> []

rule Zero_11111121112 [color=#2CD719]: // [process=Resolve2] Zero 
 [State_11111121112(ct, pk1, pk2, skT, ypcs1, ysig2)] --[]-> []

rule Zero_1111112112 [color=#2CD719]: // [process=Resolve2] Zero 
 [State_1111112112(ct, pk1, pk2, skT, ypcs1, ysig2)] --[]-> []

rule Rep_0_111112: // [process=top-level] Rep, 0 
 [State_111112(skT)] --[]-> [!Semistate_1111121(skT)]

rule Rep_1_111112: // [process=top-level] Rep, 1 
 [!Semistate_1111121(skT)] --[]-> [State_1111121(skT)]

rule in_resolve1_ct_pk1_pk2_ysig1_ypcs2__1111121 [color=#11EC28]: // [process=Resolve1] in <'resolve1', <ct, pk1, pk2, ysig1, ypcs2>> 
 [State_1111121(skT), In(<'resolve1', <ct, pk1, pk2, ysig1, ypcs2>>)] --[]-> [State_11111211(ct, pk1, pk2, skT, ypcs2, ysig1)]

rule if_eqcheck_getmsgysig1_pk1_ct_0_11111211 [color=#11EC28]: // [process=Resolve1] if eq(check_getmsg(ysig1, pk1), ct), 0 
 [State_11111211(ct, pk1, pk2, skT, ypcs2, ysig1)] --[Pred_eq(check_getmsg(ysig1, pk1), ct)]-> [State_111112111(ct, pk1, pk2, skT, ypcs2, ysig1)]

rule if_eqcheck_getmsgysig1_pk1_ct_1_11111211 [color=#11EC28]: // [process=Resolve1] if eq(check_getmsg(ysig1, pk1), ct), 1 
 [State_11111211(ct, pk1, pk2, skT, ypcs2, ysig1)] --[Pred_not_eq(check_getmsg(ysig1, pk1), ct)]-> [State_111112112(ct, pk1, pk2, skT, ypcs2, ysig1)]

rule if_eqcheck_getmsgconvertpcsskT_ypcs2_pk2_ct_0_111112111 [color=#11EC28]: // [process=Resolve1] if eq(check_getmsg(convertpcs(skT, ypcs2), pk2), ct), 0 
 [State_111112111(ct, pk1, pk2, skT, ypcs2, ysig1)] --[Pred_eq(check_getmsg(convertpcs(skT, ypcs2), pk2), ct)]-> [State_1111121111(ct, pk1, pk2, skT, ypcs2, ysig1)]

rule if_eqcheck_getmsgconvertpcsskT_ypcs2_pk2_ct_1_111112111 [color=#11EC28]: // [process=Resolve1] if eq(check_getmsg(convertpcs(skT, ypcs2), pk2), ct), 1 
 [State_111112111(ct, pk1, pk2, skT, ypcs2, ysig1)] --[Pred_not_eq(check_getmsg(convertpcs(skT, ypcs2), pk2), ct)]-> [State_1111121112(ct, pk1, pk2, skT, ypcs2, ysig1)]

rule if_eqcheckpcsct_pk2_pk1_pkskT_ypcs2_true_0_1111121111 [color=#11EC28]: // [process=Resolve1] if eq(checkpcs(ct, pk2, pk1, pk(skT), ypcs2), true()), 0 
 [State_1111121111(ct, pk1, pk2, skT, ypcs2, ysig1)] --[Pred_eq(checkpcs(ct, pk2, pk1, pk(skT), ypcs2), true())]-> [State_11111211111(ct, pk1, pk2, skT, ypcs2, ysig1)]

rule if_eqcheckpcsct_pk2_pk1_pkskT_ypcs2_true_1_1111121111 [color=#11EC28]: // [process=Resolve1] if eq(checkpcs(ct, pk2, pk1, pk(skT), ypcs2), true()), 1 
 [State_1111121111(ct, pk1, pk2, skT, ypcs2, ysig1)] --[Pred_not_eq(checkpcs(ct, pk2, pk1, pk(skT), ypcs2), true())]-> [State_11111211112(ct, pk1, pk2, skT, ypcs2, ysig1)]

rule lock_ct_11111211111 [color=#11EC28]: // [process=Resolve1] lock ct 
 [State_11111211111(ct, pk1, pk2, skT, ypcs2, ysig1), Fr(~lock7)] --[Lock($7, ~lock7, ct), Lock_7($7, ~lock7, ct)]-> [State_111112111111(~lock7, ct, pk1, pk2, skT, ypcs2, ysig1)]

rule lookup_ct_as_status_0_111112111111 [color=#11EC28]: // [process=Resolve1] lookup ct as status, 0 
 [State_111112111111(~lock7, ct, pk1, pk2, skT, ypcs2, ysig1)] --[IsIn(ct, status)]-> [State_1111121111111(~lock7, ct, pk1, pk2, skT, status, ypcs2, ysig1)]

rule lookup_ct_as_status_1_111112111111 [color=#11EC28]: // [process=Resolve1] lookup ct as status, 1 
 [State_111112111111(~lock7, ct, pk1, pk2, skT, ypcs2, ysig1)] --[IsNotSet(ct)]-> [State_1111121111112(~lock7, ct, pk1, pk2, skT, ypcs2, ysig1)]

rule unlock_ct_1111121111111 [color=#11EC28]: // [process=Resolve1] unlock ct 
 [State_1111121111111(~lock7, ct, pk1, pk2, skT, status, ypcs2, ysig1)] --[Unlock($7, ~lock7, ct), Unlock_7($7, ~lock7, ct)]-> [State_11111211111111(~lock7, ct, pk1, pk2, skT, status, ypcs2, ysig1)]

rule Zero_11111211111111 [color=#11EC28]: // [process=Resolve1] Zero 
 [State_11111211111111(~lock7, ct, pk1, pk2, skT, status, ypcs2, ysig1)] --[]-> []

rule insert_ct_resolved1__1111121111112 [color=#11EC28]: // [process=Resolve1] insert ct,'resolved1' 
 [State_1111121111112(~lock7, ct, pk1, pk2, skT, ypcs2, ysig1)] --[Insert(ct, 'resolved1')]-> [State_11111211111121(~lock7, ct, pk1, pk2, skT, ypcs2, ysig1)]

rule event_Resolve1ct_11111211111121 [color=#11EC28]: // [process=Resolve1] event Resolve1(ct) 
 [State_11111211111121(~lock7, ct, pk1, pk2, skT, ypcs2, ysig1)] --[Event(), Resolve1(ct)]-> [State_111112111111211(~lock7, ct, pk1, pk2, skT, ypcs2, ysig1)]

rule unlock_ct_111112111111211 [color=#11EC28]: // [process=Resolve1] unlock ct 
 [State_111112111111211(~lock7, ct, pk1, pk2, skT, ypcs2, ysig1)] --[Unlock($7, ~lock7, ct), Unlock_7($7, ~lock7, ct)]-> [State_1111121111112111(~lock7, ct, pk1, pk2, skT, ypcs2, ysig1)]

rule out_sign_ysig1_convertpcsskT_ypcs2_skT_1111121111112111 [color=#11EC28]: // [process=Resolve1] out sign(<ysig1, convertpcs(skT, ypcs2)>, skT) 
 [State_1111121111112111(~lock7, ct, pk1, pk2, skT, ypcs2, ysig1)] --[]-> [State_11111211111121111(~lock7, ct, pk1, pk2, skT, ypcs2, ysig1), Out(sign(<ysig1, convertpcs(skT, ypcs2)>, skT))]

rule Zero_11111211111121111 [color=#11EC28]: // [process=Resolve1] Zero 
 [State_11111211111121111(~lock7, ct, pk1, pk2, skT, ypcs2, ysig1)] --[]-> []

rule Zero_11111211112 [color=#11EC28]: // [process=Resolve1] Zero 
 [State_11111211112(ct, pk1, pk2, skT, ypcs2, ysig1)] --[]-> []

rule Zero_1111121112 [color=#11EC28]: // [process=Resolve1] Zero 
 [State_1111121112(ct, pk1, pk2, skT, ypcs2, ysig1)] --[]-> []

rule Zero_111112112 [color=#11EC28]: // [process=Resolve1] Zero 
 [State_111112112(ct, pk1, pk2, skT, ypcs2, ysig1)] --[]-> []

rule Rep_0_11112: // [process=top-level] Rep, 0 
 [State_11112(skT)] --[]-> [!Semistate_111121(skT)]

rule Rep_1_11112: // [process=top-level] Rep, 1 
 [!Semistate_111121(skT)] --[]-> [State_111121(skT)]

rule in_sign_ct_pksk1_pk2_sign_ct_pksk1_pk2_sk1_skT_111121 [color=#45D1E2]: // [process=WitnessAbort] in sign(<<ct, pk(sk1), pk2>, sign(<ct, pk(sk1), pk2>, sk1)>, skT) 
 [State_111121(skT), In(sign(<<ct, pk(sk1), pk2>, sign(<ct, pk(sk1), pk2>, sk1)>, skT))] --[]-> [State_1111211(ct, pk2, sk1, skT)]

rule event_AbortCertct_1111211 [color=#45D1E2]: // [process=WitnessAbort] event AbortCert(ct) 
 [State_1111211(ct, pk2, sk1, skT)] --[Event(), AbortCert(ct)]-> [State_11112111(ct, pk2, sk1, skT)]

rule Zero_11112111 [color=#45D1E2]: // [process=WitnessAbort] Zero 
 [State_11112111(ct, pk2, sk1, skT)] --[]-> []

rule Rep_0_1112: // [process=top-level] Rep, 0 
 [State_1112(skT)] --[]-> [!Semistate_11121(skT)]

rule Rep_1_1112: // [process=top-level] Rep, 1 
 [!Semistate_11121(skT)] --[]-> [State_11121(skT)]

rule in_sign_signct_sk1_signct_sk2_skT_11121 [color=#9F76CD]: // [process=WitnessResolved] in sign(<sign(ct, sk1), sign(ct, sk2)>, skT) 
 [State_11121(skT), In(sign(<sign(ct, sk1), sign(ct, sk2)>, skT))] --[]-> [State_111211(ct, sk1, sk2, skT)]

rule event_ResolveCertct_111211 [color=#9F76CD]: // [process=WitnessResolved] event ResolveCert(ct) 
 [State_111211(ct, sk1, sk2, skT)] --[Event(), ResolveCert(ct)]-> [State_1112111(ct, sk1, sk2, skT)]

rule Zero_1112111 [color=#9F76CD]: // [process=WitnessResolved] Zero 
 [State_1112111(ct, sk1, sk2, skT)] --[]-> []

 restriction set_in:
"All x y #t3 . IsIn(x,y)@t3 ==>
        (Ex #t2 . Insert(x,y)@t2 & #t2<#t3 
                & ( All #t1 . Delete(x)@t1 ==> (#t1<#t2 |  #t3<#t1))
                & ( All #t1 yp . Insert(x,yp)@t1 ==> (#t1<#t2 | #t1=#t2 | #t3<#t1))
)"

restriction set_notin:
"All x #t3 . IsNotSet(x)@t3 ==> 
        (All #t1 y . Insert(x,y)@t1 ==>  #t3<#t1 )
  | ( Ex #t1 .   Delete(x)@t1 & #t1<#t3 
                &  (All #t2 y . Insert(x,y)@t2 & #t2<#t3 ==>  #t2<#t1))"


restriction predicate_eq:
"All #i a b. Pred_eq(a,b)@i ==> a = b"


restriction predicate_not_eq:
"All #i a b. Pred_not_eq(a,b)@i ==> not(a = b)"


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"

 
 restriction locking_7: 
 "All p pp l x lp #t1 #t3 . Lock_7(p,l,x)@t1 & Lock(pp,lp,x)@t3 
         ==> 
         ( #t1<#t3 
                  & (Ex #t2. Unlock_7(p,l,x)@t2 & #t1<#t2 & #t2<#t3  
                  & (All #t0 pp  . Unlock(pp,l,x)@t0 ==> #t0=#t2) 
                  & (All pp lpp #t0 . Lock(pp,lpp,x)@t0 ==> #t0<#t1 | #t0=#t1 | #t2<#t0) 
                  & (All pp lpp #t0 . Unlock(pp,lpp,x)@t0 ==> #t0<#t1 | #t2<#t0 | #t2=#t0 ) 
                 )) 
         | #t3<#t1 | #t1=#t3 " 

 lemma aborted_and_resolved_exclusive :
"	not( Ex ct #i #j. AbortCert(ct) @ i & ResolveCert(ct) @ j )"

lemma aborted_contract_reachable : exists-trace
"	( Ex ct #i. AbortCert(ct) @ i ) & ( All ct1 ct2 #i1 #i2. Abort1(ct1) @ i1 & Abort1(ct2) @ i2 ==> #i1 = #i2 ) & ( All ct #i. Resolve1(ct) @ i ==> F ) & ( All ct #i. Resolve2(ct) @ i ==> F )"

lemma resolved1_contract_reachable : exists-trace
"	( Ex ct #i. ResolveCert(ct) @ i ) & ( All ct #i. Abort1(ct) @ i ==> F ) & ( All ct1 ct2 #i1 #i2. Resolve1(ct1) @ i1 & Resolve1(ct2) @ i2 ==> #i1 = #i2 ) & ( All ct #i. Resolve2(ct) @ i ==> F )"

lemma resolved2_contract_reachable : exists-trace
"	( Ex ct #i. ResolveCert(ct) @ i ) & ( All ct #i. Abort1(ct) @ i ==> F ) & ( All ct #i. Resolve1(ct) @ i ==> F ) & ( All ct1 ct2 #i1 #i2. Resolve2(ct1) @ i1 & Resolve2(ct2) @ i2 ==> #i1 = #i2 )"

end
