theory SetAbst
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m
section{* The PKI-example *}

builtins: asymmetric-encryption, signing

heuristic: p /* heuristic for SAPIC */

rule Init_: // [process=top-level] Init 
 [] --[Init()]-> [State_()]

rule Rep_0_: // [process=top-level] Rep, 0 
 [State_()] --[]-> [!Semistate_1()]

rule Rep_1_: // [process=top-level] Rep, 1 
 [!Semistate_1()] --[]-> [State_1()]

rule Par_1: // [process=top-level] Par 
 [State_1()] --[]-> [State_11(), State_12()]

rule new_pki_11: // [process=top-level] new pki 
 [State_11(), Fr(pki)] --[]-> [State_111(pki)]

rule Rep_0_111: // [process=top-level] Rep, 0 
 [State_111(pki)] --[]-> [!Semistate_1111(pki)]

rule Rep_1_111: // [process=top-level] Rep, 1 
 [!Semistate_1111(pki)] --[]-> [State_1111(pki)]

rule Par_1111 [color=#569DC0]: // [process=Server] Par 
 [State_1111(pki)] --[]-> [State_11111(pki), State_11112(pki)]

rule in_new_user__11111 [color=#569DC0]: // [process=Server] in <'new', user> 
 [State_11111(pki), In(<'new', user>)] --[]-> [State_111111(pki, user)]

rule new_sk_111111 [color=#569DC0]: // [process=Server] new ~sk 
 [State_111111(pki, user), Fr(~sk)] --[]-> [State_1111111(~sk, pki, user)]

rule lock_SERVER_user__1111111 [color=#569DC0]: // [process=Server] lock <'SERVER', user> 
 [State_1111111(~sk, pki, user), Fr(~lock8)] --[Lock($8, ~lock8, <'SERVER', user>), Lock_8($8, ~lock8, <'SERVER', user>)]-> [State_11111111(~lock8, ~sk, pki, user)]

rule event_HonestKeysk_11111111 [color=#569DC0]: // [process=Server] event HonestKey(~sk) 
 [State_11111111(~lock8, ~sk, pki, user)] --[Event(), HonestKey(~sk)]-> [State_111111111(~lock8, ~sk, pki, user)]

rule insert_SERVER_pki_user_pksk_111111111 [color=#569DC0]: // [process=Server] insert <'SERVER', pki, user>,pk(~sk) 
 [State_111111111(~lock8, ~sk, pki, user)] --[Insert(<'SERVER', pki, user>, pk(~sk))]-> [State_1111111111(~lock8, ~sk, pki, user)]

rule insert_USER_user_sk_1111111111 [color=#569DC0]: // [process=Server] insert <'USER', user>,~sk 
 [State_1111111111(~lock8, ~sk, pki, user)] --[Insert(<'USER', user>, ~sk)]-> [State_11111111111(~lock8, ~sk, pki, user)]

rule event_HonestKeysk_11111111111 [color=#569DC0]: // [process=Server] event HonestKey(~sk) 
 [State_11111111111(~lock8, ~sk, pki, user)] --[Event(), HonestKey(~sk)]-> [State_111111111111(~lock8, ~sk, pki, user)]

rule unlock_SERVER_user__111111111111 [color=#569DC0]: // [process=Server] unlock <'SERVER', user> 
 [State_111111111111(~lock8, ~sk, pki, user)] --[Unlock($8, ~lock8, <'SERVER', user>), Unlock_8($8, ~lock8, <'SERVER', user>)]-> [State_1111111111111(~lock8, ~sk, pki, user)]

rule out_pksk_1111111111111 [color=#569DC0]: // [process=Server] out pk(~sk) 
 [State_1111111111111(~lock8, ~sk, pki, user)] --[]-> [State_11111111111111(~lock8, ~sk, pki, user), Out(pk(~sk))]

rule Zero_11111111111111 [color=#569DC0]: // [process=Server] Zero 
 [State_11111111111111(~lock8, ~sk, pki, user)] --[]-> []

rule in_renew_user_pknsk__11112 [color=#569DC0]: // [process=Server] in <'renew', user, pk(nsk)> 
 [State_11112(pki), In(<'renew', user, pk(nsk)>)] --[]-> [State_111121(nsk, pki, user)]

rule in_sign_renew_user_pknsk_sk_111121 [color=#569DC0]: // [process=Server] in sign(<'renew', user, pk(nsk)>, sk) 
 [State_111121(nsk, pki, user), In(sign(<'renew', user, pk(nsk)>, sk))] --[]-> [State_1111211(nsk, pki, sk, user)]

rule lock_SERVER_user__1111211 [color=#569DC0]: // [process=Server] lock <'SERVER', user> 
 [State_1111211(nsk, pki, sk, user), Fr(~lock8)] --[Lock($8, ~lock8, <'SERVER', user>), Lock_8($8, ~lock8, <'SERVER', user>)]-> [State_11112111(~lock8, nsk, pki, sk, user)]

rule lookup_SERVER_pki_user_as_pksk_0_11112111 [color=#569DC0]: // [process=Server] lookup <'SERVER', pki, user> as pksk, 0 
 [State_11112111(~lock8, nsk, pki, sk, user)] --[IsIn(<'SERVER', pki, user>, pksk)]-> [State_111121111(~lock8, nsk, pki, pksk, sk, user)]

rule lookup_SERVER_pki_user_as_pksk_1_11112111 [color=#569DC0]: // [process=Server] lookup <'SERVER', pki, user> as pksk, 1 
 [State_11112111(~lock8, nsk, pki, sk, user)] --[IsNotSet(<'SERVER', pki, user>)]-> [State_111121112(~lock8, nsk, pki, sk, user)]

rule if_eqpksk_pksk_0_111121111 [color=#569DC0]: // [process=Server] if eq(pksk, pk(sk)), 0 
 [State_111121111(~lock8, nsk, pki, pksk, sk, user)] --[Pred_eq(pksk, pk(sk))]-> [State_1111211111(~lock8, nsk, pki, pksk, sk, user)]

rule if_eqpksk_pksk_1_111121111 [color=#569DC0]: // [process=Server] if eq(pksk, pk(sk)), 1 
 [State_111121111(~lock8, nsk, pki, pksk, sk, user)] --[Pred_not_eq(pksk, pk(sk))]-> [State_1111211112(~lock8, nsk, pki, pksk, sk, user)]

rule delete_SERVER_pki_user__1111211111 [color=#569DC0]: // [process=Server] delete <'SERVER', pki, user> 
 [State_1111211111(~lock8, nsk, pki, pksk, sk, user)] --[Delete(<'SERVER', pki, user>)]-> [State_11112111111(~lock8, nsk, pki, pksk, sk, user)]

rule insert_SERVER_pki_user_pknsk_11112111111 [color=#569DC0]: // [process=Server] insert <'SERVER', pki, user>,pk(nsk) 
 [State_11112111111(~lock8, nsk, pki, pksk, sk, user)] --[Insert(<'SERVER', pki, user>, pk(nsk))]-> [State_111121111111(~lock8, nsk, pki, pksk, sk, user)]

rule unlock_SERVER_user__111121111111 [color=#569DC0]: // [process=Server] unlock <'SERVER', user> 
 [State_111121111111(~lock8, nsk, pki, pksk, sk, user)] --[Unlock($8, ~lock8, <'SERVER', user>), Unlock_8($8, ~lock8, <'SERVER', user>)]-> [State_1111211111111(~lock8, nsk, pki, pksk, sk, user)]

rule out_sign_confirm_sign_renew_user_pknsk_sk_pki_1111211111111 [color=#569DC0]: // [process=Server] out sign(<'confirm', sign(<'renew', user, pk(nsk)>, sk)>, pki) 
 [State_1111211111111(~lock8, nsk, pki, pksk, sk, user)] --[]-> [State_11112111111111(~lock8, nsk, pki, pksk, sk, user), Out(sign(<'confirm', sign(<'renew', user, pk(nsk)>, sk)>, pki))]

rule Zero_11112111111111 [color=#569DC0]: // [process=Server] Zero 
 [State_11112111111111(~lock8, nsk, pki, pksk, sk, user)] --[]-> []

rule Zero_1111211112 [color=#569DC0]: // [process=Server] Zero 
 [State_1111211112(~lock8, nsk, pki, pksk, sk, user)] --[]-> []

rule Zero_111121112 [color=#569DC0]: // [process=Server] Zero 
 [State_111121112(~lock8, nsk, pki, sk, user)] --[]-> []

rule new_user_12: // [process=top-level] new user 
 [State_12(), Fr(user)] --[]-> [State_121(user)]

rule out_user_121: // [process=top-level] out user 
 [State_121(user)] --[]-> [State_1211(user), Out(user)]

rule Rep_0_1211: // [process=top-level] Rep, 0 
 [State_1211(user)] --[]-> [!Semistate_12111(user)]

rule Rep_1_1211: // [process=top-level] Rep, 1 
 [!Semistate_12111(user)] --[]-> [State_12111(user)]

rule new_nsk_12111 [color=#2CD719]: // [process=Client] new ~nsk 
 [State_12111(user), Fr(~nsk)] --[]-> [State_121111(~nsk, user)]

rule lock_USER_user__121111 [color=#2CD719]: // [process=Client] lock <'USER', user> 
 [State_121111(~nsk, user), Fr(~lock12)] --[Lock($12, ~lock12, <'USER', user>), Lock_12($12, ~lock12, <'USER', user>)]-> [State_1211111(~lock12, ~nsk, user)]

rule lookup_USER_user_as_sk_0_1211111 [color=#2CD719]: // [process=Client] lookup <'USER', user> as ~sk, 0 
 [State_1211111(~lock12, ~nsk, user)] --[IsIn(<'USER', user>, ~sk)]-> [State_12111111(~lock12, ~nsk, ~sk, user)]

rule lookup_USER_user_as_sk_1_1211111 [color=#2CD719]: // [process=Client] lookup <'USER', user> as ~sk, 1 
 [State_1211111(~lock12, ~nsk, user)] --[IsNotSet(<'USER', user>)]-> [State_12111112(~lock12, ~nsk, user)]

rule event_HonestKeynsk_12111111 [color=#2CD719]: // [process=Client] event HonestKey(~nsk) 
 [State_12111111(~lock12, ~nsk, ~sk, user)] --[Event(), HonestKey(~nsk)]-> [State_121111111(~lock12, ~nsk, ~sk, user)]

rule delete_USER_user__121111111 [color=#2CD719]: // [process=Client] delete <'USER', user> 
 [State_121111111(~lock12, ~nsk, ~sk, user)] --[Delete(<'USER', user>)]-> [State_1211111111(~lock12, ~nsk, ~sk, user)]

rule insert_USER_user_nsk_1211111111 [color=#2CD719]: // [process=Client] insert <'USER', user>,~nsk 
 [State_1211111111(~lock12, ~nsk, ~sk, user)] --[Insert(<'USER', user>, ~nsk)]-> [State_12111111111(~lock12, ~nsk, ~sk, user)]

rule unlock_USER_user__12111111111 [color=#2CD719]: // [process=Client] unlock <'USER', user> 
 [State_12111111111(~lock12, ~nsk, ~sk, user)] --[Unlock($12, ~lock12, <'USER', user>), Unlock_12($12, ~lock12, <'USER', user>)]-> [State_121111111111(~lock12, ~nsk, ~sk, user)]

rule out_renew_user_pknsk__121111111111 [color=#2CD719]: // [process=Client] out <'renew', user, pk(~nsk)> 
 [State_121111111111(~lock12, ~nsk, ~sk, user)] --[]-> [State_1211111111111(~lock12, ~nsk, ~sk, user), Out(<'renew', user, pk(~nsk)>)]

rule out_sign_renew_user_pknsk_sk_1211111111111 [color=#2CD719]: // [process=Client] out sign(<'renew', user, pk(~nsk)>, ~sk) 
 [State_1211111111111(~lock12, ~nsk, ~sk, user)] --[]-> [State_12111111111111(~lock12, ~nsk, ~sk, user), Out(sign(<'renew', user, pk(~nsk)>, ~sk))]

rule in_sign_confirm_sign_renew_user_pknsk_sk_pki_12111111111111 [color=#2CD719]: // [process=Client] in sign(<'confirm', sign(<'renew', user, pk(~nsk)>, ~sk)>, pki) 
 [State_12111111111111(~lock12, ~nsk, ~sk, user), In(sign(<'confirm', sign(<'renew', user, pk(~nsk)>, ~sk)>, pki))] --[]-> [State_121111111111111(~lock12, ~nsk, ~sk, pki, user)]

rule event_Revokedsk_121111111111111 [color=#2CD719]: // [process=Client] event Revoked(~sk) 
 [State_121111111111111(~lock12, ~nsk, ~sk, pki, user)] --[Event(), Revoked(~sk)]-> [State_1211111111111111(~lock12, ~nsk, ~sk, pki, user)]

rule out_sk_1211111111111111 [color=#2CD719]: // [process=Client] out ~sk 
 [State_1211111111111111(~lock12, ~nsk, ~sk, pki, user)] --[]-> [State_12111111111111111(~lock12, ~nsk, ~sk, pki, user), Out(~sk)]

rule Zero_12111111111111111 [color=#2CD719]: // [process=Client] Zero 
 [State_12111111111111111(~lock12, ~nsk, ~sk, pki, user)] --[]-> []

rule Zero_12111112 [color=#2CD719]: // [process=Client] Zero 
 [State_12111112(~lock12, ~nsk, user)] --[]-> []

 restriction set_in:
"All x y #t3 . IsIn(x,y)@t3 ==>
        (Ex #t2 . Insert(x,y)@t2 & #t2<#t3 
                & ( All #t1 . Delete(x)@t1 ==> (#t1<#t2 |  #t3<#t1))
                & ( All #t1 yp . Insert(x,yp)@t1 ==> (#t1<#t2 | #t1=#t2 | #t3<#t1))
)"

restriction set_notin:
"All x #t3 . IsNotSet(x)@t3 ==> 
        (All #t1 y . Insert(x,y)@t1 ==>  #t3<#t1 )
  | ( Ex #t1 .   Delete(x)@t1 & #t1<#t3 
                &  (All #t2 y . Insert(x,y)@t2 & #t2<#t3 ==>  #t2<#t1))"


restriction predicate_eq:
"All #i a b. Pred_eq(a,b)@i ==> a = b"


restriction predicate_not_eq:
"All #i a b. Pred_not_eq(a,b)@i ==> not(a = b)"


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"

 
 restriction locking_8: 
 "All p pp l x lp #t1 #t3 . Lock_8(p,l,x)@t1 & Lock(pp,lp,x)@t3 
         ==> 
         ( #t1<#t3 
                  & (Ex #t2. Unlock_8(p,l,x)@t2 & #t1<#t2 & #t2<#t3  
                  & (All #t0 pp  . Unlock(pp,l,x)@t0 ==> #t0=#t2) 
                  & (All pp lpp #t0 . Lock(pp,lpp,x)@t0 ==> #t0<#t1 | #t0=#t1 | #t2<#t0) 
                  & (All pp lpp #t0 . Unlock(pp,lpp,x)@t0 ==> #t0<#t1 | #t2<#t0 | #t2=#t0 ) 
                 )) 
         | #t3<#t1 | #t1=#t3 " 

  
 restriction locking_12: 
 "All p pp l x lp #t1 #t3 . Lock_12(p,l,x)@t1 & Lock(pp,lp,x)@t3 
         ==> 
         ( #t1<#t3 
                  & (Ex #t2. Unlock_12(p,l,x)@t2 & #t1<#t2 & #t2<#t3  
                  & (All #t0 pp  . Unlock(pp,l,x)@t0 ==> #t0=#t2) 
                  & (All pp lpp #t0 . Lock(pp,lpp,x)@t0 ==> #t0<#t1 | #t0=#t1 | #t2<#t0) 
                  & (All pp lpp #t0 . Unlock(pp,lpp,x)@t0 ==> #t0<#t1 | #t2<#t0 | #t2=#t0 ) 
                 )) 
         | #t3<#t1 | #t1=#t3 " 

 lemma Knows_Honest_Key_imp_Revoked :
"	All sk #i #d. HonestKey(sk) @ i & K(sk) @ d ==> ( Ex #r. Revoked(sk) @ r )"

end
