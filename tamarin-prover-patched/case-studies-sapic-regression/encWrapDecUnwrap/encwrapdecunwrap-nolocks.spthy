theory EncWrapDecUnwrap
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m

builtins: symmetric-encryption

heuristic: p /* heuristic for SAPIC */

rule Init_: // [process=top-level] Init 
 [] --[Init()]-> [State_()]

rule Rep_0_: // [process=top-level] Rep, 0 
 [State_()] --[]-> [!Semistate_1()]

rule Rep_1_: // [process=top-level] Rep, 1 
 [!Semistate_1()] --[]-> [State_1()]

rule Par_1: // [process=top-level] Par 
 [State_1()] --[]-> [State_11(), State_12()]

rule Par_11: // [process=top-level] Par 
 [State_11()] --[]-> [State_111(), State_112()]

rule Par_111: // [process=top-level] Par 
 [State_111()] --[]-> [State_1111(), State_1112()]

rule Par_1111: // [process=top-level] Par 
 [State_1111()] --[]-> [State_11111(), State_11112()]

rule Par_11111: // [process=top-level] Par 
 [State_11111()] --[]-> [State_111111(), State_111112()]

rule Par_111111: // [process=top-level] Par 
 [State_111111()] --[]-> [State_1111111(), State_1111112()]

rule in_create__1111111: // [process=top-level] in 'create' 
 [State_1111111(), In('create')] --[]-> [State_11111111()]

rule new_h_11111111: // [process=top-level] new h 
 [State_11111111(), Fr(h)] --[]-> [State_111111111(h)]

rule new_k_111111111: // [process=top-level] new k 
 [State_111111111(h), Fr(k)] --[]-> [State_1111111111(h, k)]

rule event_NewKeyh_k_1111111111: // [process=top-level] event NewKey(h, k) 
 [State_1111111111(h, k)] --[Event(), NewKey(h, k)]-> [State_11111111111(h, k)]

rule insert_key_h_k_11111111111: // [process=top-level] insert <'key', h>,k 
 [State_11111111111(h, k)] --[Insert(<'key', h>, k)]-> [State_111111111111(h, k)]

rule insert_att_h_init__111111111111: // [process=top-level] insert <'att', h>,'init' 
 [State_111111111111(h, k)] --[Insert(<'att', h>, 'init')]-> [State_1111111111111(h, k)]

rule out_h_1111111111111: // [process=top-level] out h 
 [State_1111111111111(h, k)] --[]-> [State_11111111111111(h, k), Out(h)]

rule Zero_11111111111111: // [process=top-level] Zero 
 [State_11111111111111(h, k)] --[]-> []

rule in_set_wrap_h__1111112: // [process=top-level] in <'set_wrap', h> 
 [State_1111112(), In(<'set_wrap', h>)] --[]-> [State_11111121(h)]

rule lookup_att_h_as_a_0_11111121: // [process=top-level] lookup <'att', h> as a, 0 
 [State_11111121(h)] --[IsIn(<'att', h>, a)]-> [State_111111211(a, h)]

rule lookup_att_h_as_a_1_11111121: // [process=top-level] lookup <'att', h> as a, 1 
 [State_11111121(h)] --[IsNotSet(<'att', h>)]-> [State_111111212(h)]

rule if_eqa_init__0_111111211: // [process=top-level] if eq(a, 'init'), 0 
 [State_111111211(a, h)] --[Pred_eq(a, 'init')]-> [State_1111112111(a, h)]

rule if_eqa_init__1_111111211: // [process=top-level] if eq(a, 'init'), 1 
 [State_111111211(a, h)] --[Pred_not_eq(a, 'init')]-> [State_1111112112(a, h)]

rule delete_att_h__1111112111: // [process=top-level] delete <'att', h> 
 [State_1111112111(a, h)] --[Delete(<'att', h>)]-> [State_11111121111(a, h)]

rule insert_att_h_wrap__11111121111: // [process=top-level] insert <'att', h>,'wrap' 
 [State_11111121111(a, h)] --[Insert(<'att', h>, 'wrap')]-> [State_111111211111(a, h)]

rule event_WrapHandleh_111111211111: // [process=top-level] event WrapHandle(h) 
 [State_111111211111(a, h)] --[Event(), WrapHandle(h)]-> [State_1111112111111(a, h)]

rule Zero_1111112111111: // [process=top-level] Zero 
 [State_1111112111111(a, h)] --[]-> []

rule Zero_1111112112: // [process=top-level] Zero 
 [State_1111112112(a, h)] --[]-> []

rule Zero_111111212: // [process=top-level] Zero 
 [State_111111212(h)] --[]-> []

rule in_set_dec_h__111112: // [process=top-level] in <'set_dec', h> 
 [State_111112(), In(<'set_dec', h>)] --[]-> [State_1111121(h)]

rule lookup_att_h_as_a_0_1111121: // [process=top-level] lookup <'att', h> as a, 0 
 [State_1111121(h)] --[IsIn(<'att', h>, a)]-> [State_11111211(a, h)]

rule lookup_att_h_as_a_1_1111121: // [process=top-level] lookup <'att', h> as a, 1 
 [State_1111121(h)] --[IsNotSet(<'att', h>)]-> [State_11111212(h)]

rule if_eqa_init__0_11111211: // [process=top-level] if eq(a, 'init'), 0 
 [State_11111211(a, h)] --[Pred_eq(a, 'init')]-> [State_111112111(a, h)]

rule if_eqa_init__1_11111211: // [process=top-level] if eq(a, 'init'), 1 
 [State_11111211(a, h)] --[Pred_not_eq(a, 'init')]-> [State_111112112(a, h)]

rule delete_att_h__111112111: // [process=top-level] delete <'att', h> 
 [State_111112111(a, h)] --[Delete(<'att', h>)]-> [State_1111121111(a, h)]

rule insert_att_h_dec__1111121111: // [process=top-level] insert <'att', h>,'dec' 
 [State_1111121111(a, h)] --[Insert(<'att', h>, 'dec')]-> [State_11111211111(a, h)]

rule Zero_11111211111: // [process=top-level] Zero 
 [State_11111211111(a, h)] --[]-> []

rule Zero_111112112: // [process=top-level] Zero 
 [State_111112112(a, h)] --[]-> []

rule Zero_11111212: // [process=top-level] Zero 
 [State_11111212(h)] --[]-> []

rule in_h_sencm_k__11112: // [process=top-level] in <h, senc(m, k)> 
 [State_11112(), In(<h, senc(m, k)>)] --[]-> [State_111121(h, k, m)]

rule lookup_att_h_as_a_0_111121: // [process=top-level] lookup <'att', h> as a, 0 
 [State_111121(h, k, m)] --[IsIn(<'att', h>, a)]-> [State_1111211(a, h, k, m)]

rule lookup_att_h_as_a_1_111121: // [process=top-level] lookup <'att', h> as a, 1 
 [State_111121(h, k, m)] --[IsNotSet(<'att', h>)]-> [State_1111212(h, k, m)]

rule if_eqa_dec__0_1111211: // [process=top-level] if eq(a, 'dec'), 0 
 [State_1111211(a, h, k, m)] --[Pred_eq(a, 'dec')]-> [State_11112111(a, h, k, m)]

rule if_eqa_dec__1_1111211: // [process=top-level] if eq(a, 'dec'), 1 
 [State_1111211(a, h, k, m)] --[Pred_not_eq(a, 'dec')]-> [State_11112112(a, h, k, m)]

rule lookup_key_h_as_kp_0_11112111: // [process=top-level] lookup <'key', h> as kp, 0 
 [State_11112111(a, h, k, m)] --[IsIn(<'key', h>, kp)]-> [State_111121111(a, h, k, kp, m)]

rule lookup_key_h_as_kp_1_11112111: // [process=top-level] lookup <'key', h> as kp, 1 
 [State_11112111(a, h, k, m)] --[IsNotSet(<'key', h>)]-> [State_111121112(a, h, k, m)]

rule if_eqkp_k_0_111121111: // [process=top-level] if eq(kp, k), 0 
 [State_111121111(a, h, k, kp, m)] --[Pred_eq(kp, k)]-> [State_1111211111(a, h, k, kp, m)]

rule if_eqkp_k_1_111121111: // [process=top-level] if eq(kp, k), 1 
 [State_111121111(a, h, k, kp, m)] --[Pred_not_eq(kp, k)]-> [State_1111211112(a, h, k, kp, m)]

rule event_DecUsingk_m_1111211111: // [process=top-level] event DecUsing(k, m) 
 [State_1111211111(a, h, k, kp, m)] --[Event(), DecUsing(k, m)]-> [State_11112111111(a, h, k, kp, m)]

rule out_m_11112111111: // [process=top-level] out m 
 [State_11112111111(a, h, k, kp, m)] --[]-> [State_111121111111(a, h, k, kp, m), Out(m)]

rule Zero_111121111111: // [process=top-level] Zero 
 [State_111121111111(a, h, k, kp, m)] --[]-> []

rule Zero_1111211112: // [process=top-level] Zero 
 [State_1111211112(a, h, k, kp, m)] --[]-> []

rule Zero_111121112: // [process=top-level] Zero 
 [State_111121112(a, h, k, m)] --[]-> []

rule Zero_11112112: // [process=top-level] Zero 
 [State_11112112(a, h, k, m)] --[]-> []

rule Zero_1111212: // [process=top-level] Zero 
 [State_1111212(h, k, m)] --[]-> []

rule in_h_m__1112: // [process=top-level] in <h, m> 
 [State_1112(), In(<h, m>)] --[]-> [State_11121(h, m)]

rule lookup_att_h_as_a_0_11121: // [process=top-level] lookup <'att', h> as a, 0 
 [State_11121(h, m)] --[IsIn(<'att', h>, a)]-> [State_111211(a, h, m)]

rule lookup_att_h_as_a_1_11121: // [process=top-level] lookup <'att', h> as a, 1 
 [State_11121(h, m)] --[IsNotSet(<'att', h>)]-> [State_111212(h, m)]

rule if_eqa_dec__0_111211: // [process=top-level] if eq(a, 'dec'), 0 
 [State_111211(a, h, m)] --[Pred_eq(a, 'dec')]-> [State_1112111(a, h, m)]

rule if_eqa_dec__1_111211: // [process=top-level] if eq(a, 'dec'), 1 
 [State_111211(a, h, m)] --[Pred_not_eq(a, 'dec')]-> [State_1112112(a, h, m)]

rule lookup_key_h_as_k_0_1112111: // [process=top-level] lookup <'key', h> as k, 0 
 [State_1112111(a, h, m)] --[IsIn(<'key', h>, k)]-> [State_11121111(a, h, k, m)]

rule lookup_key_h_as_k_1_1112111: // [process=top-level] lookup <'key', h> as k, 1 
 [State_1112111(a, h, m)] --[IsNotSet(<'key', h>)]-> [State_11121112(a, h, m)]

rule event_EncUsingk_m_11121111: // [process=top-level] event EncUsing(k, m) 
 [State_11121111(a, h, k, m)] --[Event(), EncUsing(k, m)]-> [State_111211111(a, h, k, m)]

rule out_sencm_k_111211111: // [process=top-level] out senc(m, k) 
 [State_111211111(a, h, k, m)] --[]-> [State_1112111111(a, h, k, m), Out(senc(m, k))]

rule Zero_1112111111: // [process=top-level] Zero 
 [State_1112111111(a, h, k, m)] --[]-> []

rule Zero_11121112: // [process=top-level] Zero 
 [State_11121112(a, h, m)] --[]-> []

rule Zero_1112112: // [process=top-level] Zero 
 [State_1112112(a, h, m)] --[]-> []

rule Zero_111212: // [process=top-level] Zero 
 [State_111212(h, m)] --[]-> []

rule in_h1_h2__112: // [process=top-level] in <h1, h2> 
 [State_112(), In(<h1, h2>)] --[]-> [State_1121(h1, h2)]

rule lookup_att_h1_as_a1_0_1121: // [process=top-level] lookup <'att', h1> as a1, 0 
 [State_1121(h1, h2)] --[IsIn(<'att', h1>, a1)]-> [State_11211(a1, h1, h2)]

rule lookup_att_h1_as_a1_1_1121: // [process=top-level] lookup <'att', h1> as a1, 1 
 [State_1121(h1, h2)] --[IsNotSet(<'att', h1>)]-> [State_11212(h1, h2)]

rule if_eqa1_wrap__0_11211: // [process=top-level] if eq(a1, 'wrap'), 0 
 [State_11211(a1, h1, h2)] --[Pred_eq(a1, 'wrap')]-> [State_112111(a1, h1, h2)]

rule if_eqa1_wrap__1_11211: // [process=top-level] if eq(a1, 'wrap'), 1 
 [State_11211(a1, h1, h2)] --[Pred_not_eq(a1, 'wrap')]-> [State_112112(a1, h1, h2)]

rule lookup_key_h1_as_k1_0_112111: // [process=top-level] lookup <'key', h1> as k1, 0 
 [State_112111(a1, h1, h2)] --[IsIn(<'key', h1>, k1)]-> [State_1121111(a1, h1, h2, k1)]

rule lookup_key_h1_as_k1_1_112111: // [process=top-level] lookup <'key', h1> as k1, 1 
 [State_112111(a1, h1, h2)] --[IsNotSet(<'key', h1>)]-> [State_1121112(a1, h1, h2)]

rule lookup_key_h2_as_k2_0_1121111: // [process=top-level] lookup <'key', h2> as k2, 0 
 [State_1121111(a1, h1, h2, k1)] --[IsIn(<'key', h2>, k2)]-> [State_11211111(a1, h1, h2, k1, k2)]

rule lookup_key_h2_as_k2_1_1121111: // [process=top-level] lookup <'key', h2> as k2, 1 
 [State_1121111(a1, h1, h2, k1)] --[IsNotSet(<'key', h2>)]-> [State_11211112(a1, h1, h2, k1)]

rule event_Wrapk1_k2_11211111: // [process=top-level] event Wrap(k1, k2) 
 [State_11211111(a1, h1, h2, k1, k2)] --[Event(), Wrap(k1, k2)]-> [State_112111111(a1, h1, h2, k1, k2)]

rule out_senck2_k1_112111111: // [process=top-level] out senc(k2, k1) 
 [State_112111111(a1, h1, h2, k1, k2)] --[]-> [State_1121111111(a1, h1, h2, k1, k2), Out(senc(k2, k1))]

rule Zero_1121111111: // [process=top-level] Zero 
 [State_1121111111(a1, h1, h2, k1, k2)] --[]-> []

rule Zero_11211112: // [process=top-level] Zero 
 [State_11211112(a1, h1, h2, k1)] --[]-> []

rule Zero_1121112: // [process=top-level] Zero 
 [State_1121112(a1, h1, h2)] --[]-> []

rule Zero_112112: // [process=top-level] Zero 
 [State_112112(a1, h1, h2)] --[]-> []

rule Zero_11212: // [process=top-level] Zero 
 [State_11212(h1, h2)] --[]-> []

rule in_h1_sencm_k__12: // [process=top-level] in <h1, senc(m, k)> 
 [State_12(), In(<h1, senc(m, k)>)] --[]-> [State_121(h1, k, m)]

rule lookup_att_h1_as_a1_0_121: // [process=top-level] lookup <'att', h1> as a1, 0 
 [State_121(h1, k, m)] --[IsIn(<'att', h1>, a1)]-> [State_1211(a1, h1, k, m)]

rule lookup_att_h1_as_a1_1_121: // [process=top-level] lookup <'att', h1> as a1, 1 
 [State_121(h1, k, m)] --[IsNotSet(<'att', h1>)]-> [State_1212(h1, k, m)]

rule if_eqa1_wrap__0_1211: // [process=top-level] if eq(a1, 'wrap'), 0 
 [State_1211(a1, h1, k, m)] --[Pred_eq(a1, 'wrap')]-> [State_12111(a1, h1, k, m)]

rule if_eqa1_wrap__1_1211: // [process=top-level] if eq(a1, 'wrap'), 1 
 [State_1211(a1, h1, k, m)] --[Pred_not_eq(a1, 'wrap')]-> [State_12112(a1, h1, k, m)]

rule lookup_key_h1_as_k1_0_12111: // [process=top-level] lookup <'key', h1> as k1, 0 
 [State_12111(a1, h1, k, m)] --[IsIn(<'key', h1>, k1)]-> [State_121111(a1, h1, k, k1, m)]

rule lookup_key_h1_as_k1_1_12111: // [process=top-level] lookup <'key', h1> as k1, 1 
 [State_12111(a1, h1, k, m)] --[IsNotSet(<'key', h1>)]-> [State_121112(a1, h1, k, m)]

rule if_eqk1_k_0_121111: // [process=top-level] if eq(k1, k), 0 
 [State_121111(a1, h1, k, k1, m)] --[Pred_eq(k1, k)]-> [State_1211111(a1, h1, k, k1, m)]

rule if_eqk1_k_1_121111: // [process=top-level] if eq(k1, k), 1 
 [State_121111(a1, h1, k, k1, m)] --[Pred_not_eq(k1, k)]-> [State_1211112(a1, h1, k, k1, m)]

rule new_h2_1211111: // [process=top-level] new h2 
 [State_1211111(a1, h1, k, k1, m), Fr(h2)] --[]-> [State_12111111(a1, h1, h2, k, k1, m)]

rule event_Unwrappedh2_m_12111111: // [process=top-level] event Unwrapped(h2, m) 
 [State_12111111(a1, h1, h2, k, k1, m)] --[Event(), Unwrapped(h2, m)]-> [State_121111111(a1, h1, h2, k, k1, m)]

rule insert_key_h2_m_121111111: // [process=top-level] insert <'key', h2>,m 
 [State_121111111(a1, h1, h2, k, k1, m)] --[Insert(<'key', h2>, m)]-> [State_1211111111(a1, h1, h2, k, k1, m)]

rule insert_attr_h2_wrap__1211111111: // [process=top-level] insert <'attr', h2>,'wrap' 
 [State_1211111111(a1, h1, h2, k, k1, m)] --[Insert(<'attr', h2>, 'wrap')]-> [State_12111111111(a1, h1, h2, k, k1, m)]

rule Zero_12111111111: // [process=top-level] Zero 
 [State_12111111111(a1, h1, h2, k, k1, m)] --[]-> []

rule Zero_1211112: // [process=top-level] Zero 
 [State_1211112(a1, h1, k, k1, m)] --[]-> []

rule Zero_121112: // [process=top-level] Zero 
 [State_121112(a1, h1, k, m)] --[]-> []

rule Zero_12112: // [process=top-level] Zero 
 [State_12112(a1, h1, k, m)] --[]-> []

rule Zero_1212: // [process=top-level] Zero 
 [State_1212(h1, k, m)] --[]-> []

 restriction set_in:
"All x y #t3 . IsIn(x,y)@t3 ==>
        (Ex #t2 . Insert(x,y)@t2 & #t2<#t3 
                & ( All #t1 . Delete(x)@t1 ==> (#t1<#t2 |  #t3<#t1))
                & ( All #t1 yp . Insert(x,yp)@t1 ==> (#t1<#t2 | #t1=#t2 | #t3<#t1))
)"

restriction set_notin:
"All x #t3 . IsNotSet(x)@t3 ==> 
        (All #t1 y . Insert(x,y)@t1 ==>  #t3<#t1 )
  | ( Ex #t1 .   Delete(x)@t1 & #t1<#t3 
                &  (All #t2 y . Insert(x,y)@t2 & #t2<#t3 ==>  #t2<#t1))"


restriction predicate_eq:
"All #i a b. Pred_eq(a,b)@i ==> a = b"


restriction predicate_not_eq:
"All #i a b. Pred_not_eq(a,b)@i ==> not(a = b)"


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"

lemma can_obtain_key : exists-trace
"	( Ex #i #j h k. NewKey(h, k) @ i & K(k) @ j )"

end
