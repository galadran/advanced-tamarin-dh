theory EncWrapDecUnwrap
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m

builtins: symmetric-encryption

functions: key/1, att/1

equations: key(<k, a>)=k,att(<k, a>)=a

heuristic: p /* heuristic for SAPIC */

rule Init_: // [process=top-level] Init 
 [] --[Init()]-> [State_()]

rule Rep_0_: // [process=top-level] Rep, 0 
 [State_()] --[]-> [!Semistate_1()]

rule Rep_1_: // [process=top-level] Rep, 1 
 [!Semistate_1()] --[]-> [State_1()]

rule Par_1: // [process=top-level] Par 
 [State_1()] --[]-> [State_11(), State_12()]

rule Par_11: // [process=top-level] Par 
 [State_11()] --[]-> [State_111(), State_112()]

rule Par_111: // [process=top-level] Par 
 [State_111()] --[]-> [State_1111(), State_1112()]

rule Par_1111: // [process=top-level] Par 
 [State_1111()] --[]-> [State_11111(), State_11112()]

rule Par_11111: // [process=top-level] Par 
 [State_11111()] --[]-> [State_111111(), State_111112()]

rule Par_111111: // [process=top-level] Par 
 [State_111111()] --[]-> [State_1111111(), State_1111112()]

rule in_create__1111111: // [process=top-level] in 'create' 
 [State_1111111(), In('create')] --[]-> [State_11111111()]

rule new_L_h_11111111: // [process=top-level] new L_h 
 [State_11111111(), Fr(L_h)] --[]-> [State_111111111(L_h)]

rule lock_L_h_111111111: // [process=top-level] lock L_h 
 [State_111111111(L_h), Fr(~lock7)] --[Lock($7, ~lock7, L_h), Lock_7($7, ~lock7, L_h)]-> [State_1111111111(~lock7, L_h)]

rule new_k_1111111111: // [process=top-level] new k 
 [State_1111111111(~lock7, L_h), Fr(k)] --[]-> [State_11111111111(~lock7, L_h, k)]

rule event_NewKeyL_h_k_11111111111: // [process=top-level] event NewKey(L_h, k) 
 [State_11111111111(~lock7, L_h, k)] --[Event(), NewKey(L_h, k)]-> [State_111111111111(~lock7, L_h, k)]

rule insert_L_h_k_init__111111111111: // [process=top-level] insert L_h,<k, 'init'> 
 [State_111111111111(~lock7, L_h, k)] --[Insert(L_h, <k, 'init'>)]-> [State_1111111111111(~lock7, L_h, k)]

rule out_L_h_1111111111111: // [process=top-level] out L_h 
 [State_1111111111111(~lock7, L_h, k)] --[]-> [State_11111111111111(~lock7, L_h, k), Out(L_h)]

rule unlock_L_h_11111111111111: // [process=top-level] unlock L_h 
 [State_11111111111111(~lock7, L_h, k)] --[Unlock($7, ~lock7, L_h), Unlock_7($7, ~lock7, L_h)]-> [State_111111111111111(~lock7, L_h, k)]

rule Zero_111111111111111: // [process=top-level] Zero 
 [State_111111111111111(~lock7, L_h, k)] --[]-> []

rule in_set_wrap_L_h__1111112: // [process=top-level] in <'set_wrap', L_h> 
 [State_1111112(), In(<'set_wrap', L_h>)] --[]-> [State_11111121(L_h)]

rule lock_L_h_11111121: // [process=top-level] lock L_h 
 [State_11111121(L_h), Fr(~lock8)] --[Lock($8, ~lock8, L_h), Lock_8($8, ~lock8, L_h)]-> [State_111111211(~lock8, L_h)]

rule lookup_L_h_as_v_0_111111211: // [process=top-level] lookup L_h as v, 0 
 [State_111111211(~lock8, L_h)] --[IsIn(L_h, v)]-> [State_1111112111(~lock8, L_h, v)]

rule lookup_L_h_as_v_1_111111211: // [process=top-level] lookup L_h as v, 1 
 [State_111111211(~lock8, L_h)] --[IsNotSet(L_h)]-> [State_1111112112(~lock8, L_h)]

rule if_eqattv_init__0_1111112111: // [process=top-level] if eq(att(v), 'init'), 0 
 [State_1111112111(~lock8, L_h, v)] --[Pred_eq(att(v), 'init')]-> [State_11111121111(~lock8, L_h, v)]

rule if_eqattv_init__1_1111112111: // [process=top-level] if eq(att(v), 'init'), 1 
 [State_1111112111(~lock8, L_h, v)] --[Pred_not_eq(att(v), 'init')]-> [State_11111121112(~lock8, L_h, v)]

rule event_WrapKeyL_h_keyv_11111121111: // [process=top-level] event WrapKey(L_h, key(v)) 
 [State_11111121111(~lock8, L_h, v)] --[Event(), WrapKey(L_h, key(v))]-> [State_111111211111(~lock8, L_h, v)]

rule insert_L_h_keyv_wrap__111111211111: // [process=top-level] insert L_h,<key(v), 'wrap'> 
 [State_111111211111(~lock8, L_h, v)] --[Insert(L_h, <key(v), 'wrap'>)]-> [State_1111112111111(~lock8, L_h, v)]

rule event_WrapHandleL_h_1111112111111: // [process=top-level] event WrapHandle(L_h) 
 [State_1111112111111(~lock8, L_h, v)] --[Event(), WrapHandle(L_h)]-> [State_11111121111111(~lock8, L_h, v)]

rule unlock_L_h_11111121111111: // [process=top-level] unlock L_h 
 [State_11111121111111(~lock8, L_h, v)] --[Unlock($8, ~lock8, L_h), Unlock_8($8, ~lock8, L_h)]-> [State_111111211111111(~lock8, L_h, v)]

rule Zero_111111211111111: // [process=top-level] Zero 
 [State_111111211111111(~lock8, L_h, v)] --[]-> []

rule Zero_11111121112: // [process=top-level] Zero 
 [State_11111121112(~lock8, L_h, v)] --[]-> []

rule Zero_1111112112: // [process=top-level] Zero 
 [State_1111112112(~lock8, L_h)] --[]-> []

rule in_set_dec_L_h__111112: // [process=top-level] in <'set_dec', L_h> 
 [State_111112(), In(<'set_dec', L_h>)] --[]-> [State_1111121(L_h)]

rule lock_L_h_1111121: // [process=top-level] lock L_h 
 [State_1111121(L_h), Fr(~lock7)] --[Lock($7, ~lock7, L_h), Lock_7($7, ~lock7, L_h)]-> [State_11111211(~lock7, L_h)]

rule lookup_L_h_as_v_0_11111211: // [process=top-level] lookup L_h as v, 0 
 [State_11111211(~lock7, L_h)] --[IsIn(L_h, v)]-> [State_111112111(~lock7, L_h, v)]

rule lookup_L_h_as_v_1_11111211: // [process=top-level] lookup L_h as v, 1 
 [State_11111211(~lock7, L_h)] --[IsNotSet(L_h)]-> [State_111112112(~lock7, L_h)]

rule if_eqattv_init__0_111112111: // [process=top-level] if eq(att(v), 'init'), 0 
 [State_111112111(~lock7, L_h, v)] --[Pred_eq(att(v), 'init')]-> [State_1111121111(~lock7, L_h, v)]

rule if_eqattv_init__1_111112111: // [process=top-level] if eq(att(v), 'init'), 1 
 [State_111112111(~lock7, L_h, v)] --[Pred_not_eq(att(v), 'init')]-> [State_1111121112(~lock7, L_h, v)]

rule event_DecKeyL_h_keyv_1111121111: // [process=top-level] event DecKey(L_h, key(v)) 
 [State_1111121111(~lock7, L_h, v)] --[Event(), DecKey(L_h, key(v))]-> [State_11111211111(~lock7, L_h, v)]

rule insert_L_h_keyv_dec__11111211111: // [process=top-level] insert L_h,<key(v), 'dec'> 
 [State_11111211111(~lock7, L_h, v)] --[Insert(L_h, <key(v), 'dec'>)]-> [State_111112111111(~lock7, L_h, v)]

rule unlock_L_h_111112111111: // [process=top-level] unlock L_h 
 [State_111112111111(~lock7, L_h, v)] --[Unlock($7, ~lock7, L_h), Unlock_7($7, ~lock7, L_h)]-> [State_1111121111111(~lock7, L_h, v)]

rule Zero_1111121111111: // [process=top-level] Zero 
 [State_1111121111111(~lock7, L_h, v)] --[]-> []

rule Zero_1111121112: // [process=top-level] Zero 
 [State_1111121112(~lock7, L_h, v)] --[]-> []

rule Zero_111112112: // [process=top-level] Zero 
 [State_111112112(~lock7, L_h)] --[]-> []

rule in_L_h_c__11112: // [process=top-level] in <L_h, c> 
 [State_11112(), In(<L_h, c>)] --[]-> [State_111121(L_h, c)]

rule lock_L_h_111121: // [process=top-level] lock L_h 
 [State_111121(L_h, c), Fr(~lock8)] --[Lock($8, ~lock8, L_h), Lock_8($8, ~lock8, L_h)]-> [State_1111211(~lock8, L_h, c)]

rule lookup_L_h_as_v_0_1111211: // [process=top-level] lookup L_h as v, 0 
 [State_1111211(~lock8, L_h, c)] --[IsIn(L_h, v)]-> [State_11112111(~lock8, L_h, c, v)]

rule lookup_L_h_as_v_1_1111211: // [process=top-level] lookup L_h as v, 1 
 [State_1111211(~lock8, L_h, c)] --[IsNotSet(L_h)]-> [State_11112112(~lock8, L_h, c)]

rule if_eqattv_dec__0_11112111: // [process=top-level] if eq(att(v), 'dec'), 0 
 [State_11112111(~lock8, L_h, c, v)] --[Pred_eq(att(v), 'dec')]-> [State_111121111(~lock8, L_h, c, v)]

rule if_eqattv_dec__1_11112111: // [process=top-level] if eq(att(v), 'dec'), 1 
 [State_11112111(~lock8, L_h, c, v)] --[Pred_not_eq(att(v), 'dec')]-> [State_111121112(~lock8, L_h, c, v)]

rule if_sencSuccc_keyv_0_111121111: // [process=top-level] if sencSucc(c, key(v)), 0 
 [State_111121111(~lock8, L_h, c, v)] --[Pred_sencSucc(c, key(v))]-> [State_1111211111(~lock8, L_h, c, v)]

rule if_sencSuccc_keyv_1_111121111: // [process=top-level] if sencSucc(c, key(v)), 1 
 [State_111121111(~lock8, L_h, c, v)] --[Pred_not_sencSucc(c, key(v))]-> [State_1111211112(~lock8, L_h, c, v)]

rule event_DecUsingkeyv_sdecc_keyv_1111211111: // [process=top-level] event DecUsing(key(v), sdec(c, key(v))) 
 [State_1111211111(~lock8, L_h, c, v)] --[Event(), DecUsing(key(v), sdec(c, key(v)))]-> [State_11112111111(~lock8, L_h, c, v)]

rule out_sdecc_keyv_11112111111: // [process=top-level] out sdec(c, key(v)) 
 [State_11112111111(~lock8, L_h, c, v)] --[]-> [State_111121111111(~lock8, L_h, c, v), Out(sdec(c, key(v)))]

rule unlock_L_h_111121111111: // [process=top-level] unlock L_h 
 [State_111121111111(~lock8, L_h, c, v)] --[Unlock($8, ~lock8, L_h), Unlock_8($8, ~lock8, L_h)]-> [State_1111211111111(~lock8, L_h, c, v)]

rule Zero_1111211111111: // [process=top-level] Zero 
 [State_1111211111111(~lock8, L_h, c, v)] --[]-> []

rule Zero_1111211112: // [process=top-level] Zero 
 [State_1111211112(~lock8, L_h, c, v)] --[]-> []

rule Zero_111121112: // [process=top-level] Zero 
 [State_111121112(~lock8, L_h, c, v)] --[]-> []

rule Zero_11112112: // [process=top-level] Zero 
 [State_11112112(~lock8, L_h, c)] --[]-> []

rule in_L_h_m__1112: // [process=top-level] in <L_h, m> 
 [State_1112(), In(<L_h, m>)] --[]-> [State_11121(L_h, m)]

rule lock_L_h_11121: // [process=top-level] lock L_h 
 [State_11121(L_h, m), Fr(~lock7)] --[Lock($7, ~lock7, L_h), Lock_7($7, ~lock7, L_h)]-> [State_111211(~lock7, L_h, m)]

rule lookup_L_h_as_v_0_111211: // [process=top-level] lookup L_h as v, 0 
 [State_111211(~lock7, L_h, m)] --[IsIn(L_h, v)]-> [State_1112111(~lock7, L_h, m, v)]

rule lookup_L_h_as_v_1_111211: // [process=top-level] lookup L_h as v, 1 
 [State_111211(~lock7, L_h, m)] --[IsNotSet(L_h)]-> [State_1112112(~lock7, L_h, m)]

rule if_eqattv_dec__0_1112111: // [process=top-level] if eq(att(v), 'dec'), 0 
 [State_1112111(~lock7, L_h, m, v)] --[Pred_eq(att(v), 'dec')]-> [State_11121111(~lock7, L_h, m, v)]

rule if_eqattv_dec__1_1112111: // [process=top-level] if eq(att(v), 'dec'), 1 
 [State_1112111(~lock7, L_h, m, v)] --[Pred_not_eq(att(v), 'dec')]-> [State_11121112(~lock7, L_h, m, v)]

rule event_EncUsingkeyv_m_11121111: // [process=top-level] event EncUsing(key(v), m) 
 [State_11121111(~lock7, L_h, m, v)] --[Event(), EncUsing(key(v), m)]-> [State_111211111(~lock7, L_h, m, v)]

rule out_sencm_keyv_111211111: // [process=top-level] out senc(m, key(v)) 
 [State_111211111(~lock7, L_h, m, v)] --[]-> [State_1112111111(~lock7, L_h, m, v), Out(senc(m, key(v)))]

rule unlock_L_h_1112111111: // [process=top-level] unlock L_h 
 [State_1112111111(~lock7, L_h, m, v)] --[Unlock($7, ~lock7, L_h), Unlock_7($7, ~lock7, L_h)]-> [State_11121111111(~lock7, L_h, m, v)]

rule Zero_11121111111: // [process=top-level] Zero 
 [State_11121111111(~lock7, L_h, m, v)] --[]-> []

rule Zero_11121112: // [process=top-level] Zero 
 [State_11121112(~lock7, L_h, m, v)] --[]-> []

rule Zero_1112112: // [process=top-level] Zero 
 [State_1112112(~lock7, L_h, m)] --[]-> []

rule in_L_h1_L_h2__112: // [process=top-level] in <L_h1, L_h2> 
 [State_112(), In(<L_h1, L_h2>)] --[]-> [State_1121(L_h1, L_h2)]

rule lock_L_h1_1121: // [process=top-level] lock L_h1 
 [State_1121(L_h1, L_h2), Fr(~lock9)] --[Lock($9, ~lock9, L_h1), Lock_9($9, ~lock9, L_h1)]-> [State_11211(~lock9, L_h1, L_h2)]

rule lookup_L_h1_as_v1_0_11211: // [process=top-level] lookup L_h1 as v1, 0 
 [State_11211(~lock9, L_h1, L_h2)] --[IsIn(L_h1, v1)]-> [State_112111(~lock9, L_h1, L_h2, v1)]

rule lookup_L_h1_as_v1_1_11211: // [process=top-level] lookup L_h1 as v1, 1 
 [State_11211(~lock9, L_h1, L_h2)] --[IsNotSet(L_h1)]-> [State_112112(~lock9, L_h1, L_h2)]

rule if_eqattv1_wrap__0_112111: // [process=top-level] if eq(att(v1), 'wrap'), 0 
 [State_112111(~lock9, L_h1, L_h2, v1)] --[Pred_eq(att(v1), 'wrap')]-> [State_1121111(~lock9, L_h1, L_h2, v1)]

rule if_eqattv1_wrap__1_112111: // [process=top-level] if eq(att(v1), 'wrap'), 1 
 [State_112111(~lock9, L_h1, L_h2, v1)] --[Pred_not_eq(att(v1), 'wrap')]-> [State_1121112(~lock9, L_h1, L_h2, v1)]

rule lookup_L_h2_as_v2_0_1121111: // [process=top-level] lookup L_h2 as v2, 0 
 [State_1121111(~lock9, L_h1, L_h2, v1)] --[IsIn(L_h2, v2)]-> [State_11211111(~lock9, L_h1, L_h2, v1, v2)]

rule lookup_L_h2_as_v2_1_1121111: // [process=top-level] lookup L_h2 as v2, 1 
 [State_1121111(~lock9, L_h1, L_h2, v1)] --[IsNotSet(L_h2)]-> [State_11211112(~lock9, L_h1, L_h2, v1)]

rule if_eqattv2_wrap__0_11211111: // [process=top-level] if eq(att(v2), 'wrap'), 0 
 [State_11211111(~lock9, L_h1, L_h2, v1, v2)] --[Pred_eq(att(v2), 'wrap')]-> [State_112111111(~lock9, L_h1, L_h2, v1, v2)]

rule if_eqattv2_wrap__1_11211111: // [process=top-level] if eq(att(v2), 'wrap'), 1 
 [State_11211111(~lock9, L_h1, L_h2, v1, v2)] --[Pred_not_eq(att(v2), 'wrap')]-> [State_112111112(~lock9, L_h1, L_h2, v1, v2)]

rule event_Wrapkeyv1_keyv2_112111111: // [process=top-level] event Wrap(key(v1), key(v2)) 
 [State_112111111(~lock9, L_h1, L_h2, v1, v2)] --[Event(), Wrap(key(v1), key(v2))]-> [State_1121111111(~lock9, L_h1, L_h2, v1, v2)]

rule out_senckeyv2_keyv1_1121111111: // [process=top-level] out senc(key(v2), key(v1)) 
 [State_1121111111(~lock9, L_h1, L_h2, v1, v2)] --[]-> [State_11211111111(~lock9, L_h1, L_h2, v1, v2), Out(senc(key(v2), key(v1)))]

rule unlock_L_h1_11211111111: // [process=top-level] unlock L_h1 
 [State_11211111111(~lock9, L_h1, L_h2, v1, v2)] --[Unlock($9, ~lock9, L_h1), Unlock_9($9, ~lock9, L_h1)]-> [State_112111111111(~lock9, L_h1, L_h2, v1, v2)]

rule Zero_112111111111: // [process=top-level] Zero 
 [State_112111111111(~lock9, L_h1, L_h2, v1, v2)] --[]-> []

rule Zero_112111112: // [process=top-level] Zero 
 [State_112111112(~lock9, L_h1, L_h2, v1, v2)] --[]-> []

rule Zero_11211112: // [process=top-level] Zero 
 [State_11211112(~lock9, L_h1, L_h2, v1)] --[]-> []

rule Zero_1121112: // [process=top-level] Zero 
 [State_1121112(~lock9, L_h1, L_h2, v1)] --[]-> []

rule Zero_112112: // [process=top-level] Zero 
 [State_112112(~lock9, L_h1, L_h2)] --[]-> []

rule in_L_h_sencm_k__12: // [process=top-level] in <L_h, senc(m, k)> 
 [State_12(), In(<L_h, senc(m, k)>)] --[]-> [State_121(L_h, k, m)]

rule lock_L_h_121: // [process=top-level] lock L_h 
 [State_121(L_h, k, m), Fr(~lock10)] --[Lock($10, ~lock10, L_h), Lock_10($10, ~lock10, L_h)]-> [State_1211(~lock10, L_h, k, m)]

rule lookup_L_h_as_v_0_1211: // [process=top-level] lookup L_h as v, 0 
 [State_1211(~lock10, L_h, k, m)] --[IsIn(L_h, v)]-> [State_12111(~lock10, L_h, k, m, v)]

rule lookup_L_h_as_v_1_1211: // [process=top-level] lookup L_h as v, 1 
 [State_1211(~lock10, L_h, k, m)] --[IsNotSet(L_h)]-> [State_12112(~lock10, L_h, k, m)]

rule if_eqattv_wrap__0_12111: // [process=top-level] if eq(att(v), 'wrap'), 0 
 [State_12111(~lock10, L_h, k, m, v)] --[Pred_eq(att(v), 'wrap')]-> [State_121111(~lock10, L_h, k, m, v)]

rule if_eqattv_wrap__1_12111: // [process=top-level] if eq(att(v), 'wrap'), 1 
 [State_12111(~lock10, L_h, k, m, v)] --[Pred_not_eq(att(v), 'wrap')]-> [State_121112(~lock10, L_h, k, m, v)]

rule if_eqkeyv_k_0_121111: // [process=top-level] if eq(key(v), k), 0 
 [State_121111(~lock10, L_h, k, m, v)] --[Pred_eq(key(v), k)]-> [State_1211111(~lock10, L_h, k, m, v)]

rule if_eqkeyv_k_1_121111: // [process=top-level] if eq(key(v), k), 1 
 [State_121111(~lock10, L_h, k, m, v)] --[Pred_not_eq(key(v), k)]-> [State_1211112(~lock10, L_h, k, m, v)]

rule new_L_h2_1211111: // [process=top-level] new L_h2 
 [State_1211111(~lock10, L_h, k, m, v), Fr(L_h2)] --[]-> [State_12111111(~lock10, L_h, L_h2, k, m, v)]

rule event_UnwrappedL_h2_m_12111111: // [process=top-level] event Unwrapped(L_h2, m) 
 [State_12111111(~lock10, L_h, L_h2, k, m, v)] --[Event(), Unwrapped(L_h2, m)]-> [State_121111111(~lock10, L_h, L_h2, k, m, v)]

rule insert_L_h2_m_wrap__121111111: // [process=top-level] insert L_h2,<m, 'wrap'> 
 [State_121111111(~lock10, L_h, L_h2, k, m, v)] --[Insert(L_h2, <m, 'wrap'>)]-> [State_1211111111(~lock10, L_h, L_h2, k, m, v)]

rule out_L_h2_1211111111: // [process=top-level] out L_h2 
 [State_1211111111(~lock10, L_h, L_h2, k, m, v)] --[]-> [State_12111111111(~lock10, L_h, L_h2, k, m, v), Out(L_h2)]

rule unlock_L_h_12111111111: // [process=top-level] unlock L_h 
 [State_12111111111(~lock10, L_h, L_h2, k, m, v)] --[Unlock($10, ~lock10, L_h), Unlock_10($10, ~lock10, L_h)]-> [State_121111111111(~lock10, L_h, L_h2, k, m, v)]

rule Zero_121111111111: // [process=top-level] Zero 
 [State_121111111111(~lock10, L_h, L_h2, k, m, v)] --[]-> []

rule Zero_1211112: // [process=top-level] Zero 
 [State_1211112(~lock10, L_h, k, m, v)] --[]-> []

rule Zero_121112: // [process=top-level] Zero 
 [State_121112(~lock10, L_h, k, m, v)] --[]-> []

rule Zero_12112: // [process=top-level] Zero 
 [State_12112(~lock10, L_h, k, m)] --[]-> []

 restriction set_in:
"All x y #t3 . IsIn(x,y)@t3 ==>
        (Ex #t2 . Insert(x,y)@t2 & #t2<#t3 
                & ( All #t1 . Delete(x)@t1 ==> (#t1<#t2 |  #t3<#t1))
                & ( All #t1 yp . Insert(x,yp)@t1 ==> (#t1<#t2 | #t1=#t2 | #t3<#t1))
)"

restriction set_notin:
"All x #t3 . IsNotSet(x)@t3 ==> 
        (All #t1 y . Insert(x,y)@t1 ==>  #t3<#t1 )
  | ( Ex #t1 .   Delete(x)@t1 & #t1<#t3 
                &  (All #t2 y . Insert(x,y)@t2 & #t2<#t3 ==>  #t2<#t1))"


restriction predicate_eq:
"All #i a b. Pred_eq(a,b)@i ==> a = b"


restriction predicate_not_eq:
"All #i a b. Pred_not_eq(a,b)@i ==> not(a = b)"


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"

 
 restriction locking_7: 
 "All p pp l x lp #t1 #t3 . Lock_7(p,l,x)@t1 & Lock(pp,lp,x)@t3 
         ==> 
         ( #t1<#t3 
                  & (Ex #t2. Unlock_7(p,l,x)@t2 & #t1<#t2 & #t2<#t3  
                  & (All #t0 pp  . Unlock(pp,l,x)@t0 ==> #t0=#t2) 
                  & (All pp lpp #t0 . Lock(pp,lpp,x)@t0 ==> #t0<#t1 | #t0=#t1 | #t2<#t0) 
                  & (All pp lpp #t0 . Unlock(pp,lpp,x)@t0 ==> #t0<#t1 | #t2<#t0 | #t2=#t0 ) 
                 )) 
         | #t3<#t1 | #t1=#t3 " 

  
 restriction locking_8: 
 "All p pp l x lp #t1 #t3 . Lock_8(p,l,x)@t1 & Lock(pp,lp,x)@t3 
         ==> 
         ( #t1<#t3 
                  & (Ex #t2. Unlock_8(p,l,x)@t2 & #t1<#t2 & #t2<#t3  
                  & (All #t0 pp  . Unlock(pp,l,x)@t0 ==> #t0=#t2) 
                  & (All pp lpp #t0 . Lock(pp,lpp,x)@t0 ==> #t0<#t1 | #t0=#t1 | #t2<#t0) 
                  & (All pp lpp #t0 . Unlock(pp,lpp,x)@t0 ==> #t0<#t1 | #t2<#t0 | #t2=#t0 ) 
                 )) 
         | #t3<#t1 | #t1=#t3 " 

  
 restriction locking_9: 
 "All p pp l x lp #t1 #t3 . Lock_9(p,l,x)@t1 & Lock(pp,lp,x)@t3 
         ==> 
         ( #t1<#t3 
                  & (Ex #t2. Unlock_9(p,l,x)@t2 & #t1<#t2 & #t2<#t3  
                  & (All #t0 pp  . Unlock(pp,l,x)@t0 ==> #t0=#t2) 
                  & (All pp lpp #t0 . Lock(pp,lpp,x)@t0 ==> #t0<#t1 | #t0=#t1 | #t2<#t0) 
                  & (All pp lpp #t0 . Unlock(pp,lpp,x)@t0 ==> #t0<#t1 | #t2<#t0 | #t2=#t0 ) 
                 )) 
         | #t3<#t1 | #t1=#t3 " 

  
 restriction locking_10: 
 "All p pp l x lp #t1 #t3 . Lock_10(p,l,x)@t1 & Lock(pp,lp,x)@t3 
         ==> 
         ( #t1<#t3 
                  & (Ex #t2. Unlock_10(p,l,x)@t2 & #t1<#t2 & #t2<#t3  
                  & (All #t0 pp  . Unlock(pp,l,x)@t0 ==> #t0=#t2) 
                  & (All pp lpp #t0 . Lock(pp,lpp,x)@t0 ==> #t0<#t1 | #t0=#t1 | #t2<#t0) 
                  & (All pp lpp #t0 . Unlock(pp,lpp,x)@t0 ==> #t0<#t1 | #t2<#t0 | #t2=#t0 ) 
                 )) 
         | #t3<#t1 | #t1=#t3 " 

 restriction predicate1:
	"All #i c k. Pred_not_sencSucc(c,k)@i ==> not(Ex m . (senc(m, k) = c))"

restriction predicate0:
	"All #i c k. Pred_sencSucc(c,k)@i ==> Ex m . (senc(m, k) = c)"

lemma can_create_key : exists-trace
"	Ex #t h k. NewKey(h, k) @ t"

lemma can_set_wrap : exists-trace
"	Ex #t h. WrapHandle(h) @ t"

lemma can_unwrap : exists-trace
"	Ex #t h k. Unwrapped(h, k) @ t"

lemma dec_limits [sources]:
"	( All k m #t1. DecUsing(k, m) @ t1 ==> ( Ex h2 k2 #t2 #t3. NewKey(h2, k2) @ t2 & KU(k2) @ t3 & t2 < t1 & t3 < t1 ) | ( Ex #t2. EncUsing(k, m) @ t2 & t2 < t1 ) | ( Ex h2 k2 #t2 #t3. Unwrapped(h2, k2) @ t2 & KU(k2) @ t3 & t2 < t1 & t3 < t1 ) | ( Ex #t2 #t3 h1 h2 k2. WrapKey(h2, k2) @ t2 & DecKey(h1, k2) @ t3 & t2 < t1 & t3 < t1 ) | ( Ex #t2 #t3 h1 h2 k2. Unwrapped(h2, k2) @ t2 & DecKey(h1, k2) @ t3 & t2 < t1 & t3 < t1 ) )"

lemma wrap_key_origins [use_induction, reuse]:
"	All h2 k #t2. Unwrapped(h2, k) @ t2 ==> ( Ex h1 #t1. NewKey(h1, k) @ t1 & t1 < t2 ) & ( Ex hp #t0. WrapKey(hp, k) @ t0 & ( #t0 = #t2 | #t0 < #t2 ) & ( All hpp #t1. Unwrapped(hpp, k) @ #t1 ==> #t0 < #t1 ) ) | ( Ex h k2 #t1 #t0. NewKey(h, k2) @ t0 & KU(k2) @ t1 & t1 < t2 & t0 < t2 ) | ( Ex #t0 #t1 h1 h2 k. WrapKey(h2, k) @ t0 & DecKey(h1, k) @ t1 & t0 < t2 & t1 < t2 ) | ( Ex #t0 #t1 h1 h2 k. Unwrapped(h2, k) @ t0 & DecKey(h1, k) @ t1 & t0 < t2 & t1 < t2 )"

lemma no_key_is_wrap_and_dec_ind [use_induction, reuse]:
"	All #t2 #t3 h1 h2 k. ( DecKey(h1, k) @ t2 & WrapKey(h2, k) @ t3 ) ==> ( Ex h k2 #t1 #t0. NewKey(h, k2) @ t0 & KU(k2) @ t1 & ( ( t1 < t3 & t0 < t3 ) | ( t1 < t2 & t0 < t2 ) ) )"

lemma no_key_is_wrap_and_dec_ind2 [use_induction, reuse]:
"	All #t2 #t3 h1 h2 k. ( DecKey(h1, k) @ t2 & Unwrapped(h2, k) @ t3 ) ==> ( Ex h k2 #t1 #t0. NewKey(h, k2) @ t0 & KU(k2) @ t1 & ( ( t1 < t3 & t0 < t3 ) | ( t1 < t2 & t0 < t2 ) ) )"

lemma cannot_obtain_key_ind [reuse, use_induction]:
"	not( Ex #i #j h k. NewKey(h, k) @ i & KU(k) @ j )"

lemma cannot_obtain_key :
"	not( Ex #i #j h k. NewKey(h, k) @ i & K(k) @ j )"

end
