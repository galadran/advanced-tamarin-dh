theory OPC_UA_Secure_Communication
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m
section{* The OPC UA Secure Conversation protocol *}

builtins: symmetric-encryption, hashing, multiset

functions: mac/2, verifyMac/3, true/0

equations: verifyMac(mac(m, sk), m, sk)=true

heuristic: l /* heuristic for SAPIC in liveness mode, i.e., with progress) */ 

rule Init_: // [process=top-level] Init 
 [] --[Init()]-> [State_()]

rule MessageID_rule_: // [process=top-level] MessageID-rule 
 [Fr(~x)] --[]-> [MID_Sender(~x), MID_Receiver(~x)]

rule Rep_0_: // [process=top-level] Rep, 0 
 [State_()] --[]-> [!Semistate_1()]

rule Rep_1_: // [process=top-level] Rep, 1 
 [Fr(~prog_1), !Semistate_1()] --[ProgressFrom_1(~prog_1)]-> [State_1(~prog_1)]

rule new_a_1: // [process=top-level] new a 
 [State_1(~prog_1), Fr(a)] --[]-> [State_11(~prog_1, a)]

rule new_b_11: // [process=top-level] new b 
 [State_11(~prog_1, a), Fr(b)] --[]-> [State_111(~prog_1, a, b)]

rule new_kSign_111: // [process=top-level] new kSign 
 [State_111(~prog_1, a, b), Fr(kSign)] --[]-> [State_1111(~prog_1, a, b, kSign)]

rule new_kEnc_1111: // [process=top-level] new kEnc 
 [State_1111(~prog_1, a, b, kSign), Fr(kEnc)] --[]-> [State_11111(~prog_1, a, b, kEnc, kSign)]

rule Par_11111: // [process=top-level] Par 
 [State_11111(~prog_1, a, b, kEnc, kSign)] --[]-> [State_111111(~prog_1, a, b, kEnc, kSign), State_111112(~prog_1, a, b, kEnc, kSign)]

rule Rep_0_111111 [color=#569DC0]: // [process=A] Rep, 0 
 [State_111111(~prog_1, a, b, kEnc, kSign)] --[ProgressTo_1111111(~prog_1)]-> [!Semistate_1111111(~prog_1, a, b, kEnc, kSign)]

rule Rep_1_111111 [color=#569DC0]: // [process=A] Rep, 1 
 [!Semistate_1111111(~prog_1, a, b, kEnc, kSign)] --[]-> [State_1111111(~prog_1, a, b, kEnc, kSign)]

rule lock_a_b__1111111 [color=#569DC0]: // [process=A] lock <a, b> 
 [Fr(~prog_11111111), State_1111111(~prog_1, a, b, kEnc, kSign), Fr(~lock8)] --[ProgressFrom_11111111(~prog_11111111), Lock($8, ~lock8, <a, b>), Lock_8($8, ~lock8, <a, b>)]-> [State_11111111(~lock8, ~prog_1, ~prog_11111111, a, b, kEnc, kSign)]

rule in_c_seq_11111111 [color=#569DC0]: // [process=A] in 'c',seq 
 [State_11111111(~lock8, ~prog_1, ~prog_11111111, a, b, kEnc, kSign), In(<'c', seq>)] --[ProgressTo_111111111(~prog_11111111), ChannelInEvent(<'c', seq>)]-> [State_111111111(~lock8, ~prog_1, ~prog_11111111, a, b, kEnc, kSign, seq)]

rule event_Seq_Senta_b_seq_111111111 [color=#569DC0]: // [process=A] event Seq_Sent(a, b, seq) 
 [Fr(~prog_1111111111), State_111111111(~lock8, ~prog_1, ~prog_11111111, a, b, kEnc, kSign, seq)] --[ProgressFrom_1111111111(~prog_1111111111), Event(), Seq_Sent(a, b, seq)]-> [State_1111111111(~lock8, ~prog_1, ~prog_11111111, ~prog_1111111111, a, b, kEnc, kSign, seq)]

rule new_m_1111111111 [color=#569DC0]: // [process=A] new m 
 [State_1111111111(~lock8, ~prog_1, ~prog_11111111, ~prog_1111111111, a, b, kEnc, kSign, seq), Fr(m)] --[]-> [State_11111111111(~lock8, ~prog_1, ~prog_11111111, ~prog_1111111111, a, b, kEnc, kSign, m, seq)]

rule event_Senta_b_m_11111111111 [color=#569DC0]: // [process=A] event Sent(a, b, m) 
 [State_11111111111(~lock8, ~prog_1, ~prog_11111111, ~prog_1111111111, a, b, kEnc, kSign, m, seq)] --[Event(), Sent(a, b, m)]-> [State_111111111111(~lock8, ~prog_1, ~prog_11111111, ~prog_1111111111, a, b, kEnc, kSign, m, seq)]

rule out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111 [color=#569DC0]: // [process=A] out 'r',<$MH, $SH, senc(<seq, m, $pad, mac(<$MH, $SH, seq, m, $pad>, kSign)>, kEnc)> 
 [MID_Sender(mid_111111111111), State_111111111111(~lock8, ~prog_1, ~prog_11111111, ~prog_1111111111, a, b, kEnc, kSign, m, seq)] --[Send(mid_111111111111,<$MH, $SH, senc(<seq, m, $pad, mac(<$MH, $SH, seq, m, $pad>, kSign)>, kEnc)>)]-> [Out(<$MH, $SH, senc(<seq, m, $pad, mac(<$MH, $SH, seq, m, $pad>, kSign)>, kEnc)>), State_1111111111111(~lock8, ~prog_1, ~prog_11111111, ~prog_1111111111, a, b, kEnc, kSign, m, seq)]

rule unlock_a_b__1111111111111 [color=#569DC0]: // [process=A] unlock <a, b> 
 [State_1111111111111(~lock8, ~prog_1, ~prog_11111111, ~prog_1111111111, a, b, kEnc, kSign, m, seq)] --[Unlock($8, ~lock8, <a, b>), Unlock_8($8, ~lock8, <a, b>)]-> [State_11111111111111(~lock8, ~prog_1, ~prog_11111111, ~prog_1111111111, a, b, kEnc, kSign, m, seq)]

rule Zero_11111111111111 [color=#569DC0]: // [process=A] Zero 
 [State_11111111111111(~lock8, ~prog_1, ~prog_11111111, ~prog_1111111111, a, b, kEnc, kSign, m, seq)] --[ProgressTo_111111111111111(~prog_1111111111)]-> []

rule Rep_0_111112 [color=#2CD719]: // [process=B] Rep, 0 
 [State_111112(~prog_1, a, b, kEnc, kSign)] --[ProgressTo_1111121(~prog_1)]-> [!Semistate_1111121(~prog_1, a, b, kEnc, kSign)]

rule Rep_1_111112 [color=#2CD719]: // [process=B] Rep, 1 
 [!Semistate_1111121(~prog_1, a, b, kEnc, kSign)] --[]-> [State_1111121(~prog_1, a, b, kEnc, kSign)]

rule lock_b_a__1111121 [color=#2CD719]: // [process=B] lock <b, a> 
 [Fr(~prog_11111211), State_1111121(~prog_1, a, b, kEnc, kSign), Fr(~lock6)] --[ProgressFrom_11111211(~prog_11111211), Lock($6, ~lock6, <b, a>), Lock_6($6, ~lock6, <b, a>)]-> [State_11111211(~lock6, ~prog_1, ~prog_11111211, a, b, kEnc, kSign)]

rule in_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__11111211 [color=#2CD719]: // [process=B] in 'r',<MH, SH, senc(<seq, m, pad, mac(<MH, SH, seq, m, pad>, kSign)>, kEnc)> 
 [State_11111211(~lock6, ~prog_1, ~prog_11111211, a, b, kEnc, kSign), In(<MH, SH, senc(<seq, m, pad, mac(<MH, SH, seq, m, pad>, kSign)>, kEnc)>), MID_Receiver(mid_11111211)] --[ProgressTo_111112111(~prog_11111211), Receive(mid_11111211,<MH, SH, senc(<seq, m, pad, mac(<MH, SH, seq, m, pad>, kSign)>, kEnc)>)]-> [State_111112111(~lock6, ~prog_1, ~prog_11111211, MH, SH, a, b, kEnc, kSign, m, pad, seq)]

rule event_Seq_Recva_b_seq_111112111 [color=#2CD719]: // [process=B] event Seq_Recv(a, b, seq) 
 [Fr(~prog_1111121111), State_111112111(~lock6, ~prog_1, ~prog_11111211, MH, SH, a, b, kEnc, kSign, m, pad, seq)] --[ProgressFrom_1111121111(~prog_1111121111), Event(), Seq_Recv(a, b, seq)]-> [State_1111121111(~lock6, ~prog_1, ~prog_11111211, ~prog_1111121111, MH, SH, a, b, kEnc, kSign, m, pad, seq)]

rule event_Recva_b_m_1111121111 [color=#2CD719]: // [process=B] event Recv(a, b, m) 
 [State_1111121111(~lock6, ~prog_1, ~prog_11111211, ~prog_1111121111, MH, SH, a, b, kEnc, kSign, m, pad, seq)] --[Event(), Recv(a, b, m)]-> [State_11111211111(~lock6, ~prog_1, ~prog_11111211, ~prog_1111121111, MH, SH, a, b, kEnc, kSign, m, pad, seq)]

rule unlock_b_a__11111211111 [color=#2CD719]: // [process=B] unlock <b, a> 
 [State_11111211111(~lock6, ~prog_1, ~prog_11111211, ~prog_1111121111, MH, SH, a, b, kEnc, kSign, m, pad, seq)] --[Unlock($6, ~lock6, <b, a>), Unlock_6($6, ~lock6, <b, a>)]-> [State_111112111111(~lock6, ~prog_1, ~prog_11111211, ~prog_1111121111, MH, SH, a, b, kEnc, kSign, m, pad, seq)]

rule Zero_111112111111 [color=#2CD719]: // [process=B] Zero 
 [State_111112111111(~lock6, ~prog_1, ~prog_11111211, ~prog_1111121111, MH, SH, a, b, kEnc, kSign, m, pad, seq)] --[ProgressTo_1111121111111(~prog_1111121111)]-> []

restriction A_Counter_Increases :
"	All A B seq1 seq2 #i #j. ( Seq_Sent(A, B, seq1) @ #i & Seq_Sent(A, B, seq2) @ #j & #i < #j ==> Ex dif. seq2 = (seq1) + (dif) )"

restriction A_Counter_No_Reuse :
"	All A B seq #i #j. ( Seq_Sent(A, B, seq) @ #i & Seq_Sent(A, B, seq) @ #j ==> #i = #j )"

restriction B_Counter_Counter_Increases :
"	All A B seq1 seq2 #i #j. ( Seq_Recv(A, B, seq1) @ #i & Seq_Recv(A, B, seq2) @ #j & #i < #j ==> Ex dif. seq2 = (seq1) + (dif) )"

restriction B_Counter_No_Reuse :
"	All A B seq #i #j. ( Seq_Recv(A, B, seq) @ #i & Seq_Recv(A, B, seq) @ #j ==> #i = #j )"


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"


restriction progress_11111211_to_111112111:
    "All p #t1. ProgressFrom_11111211(p )@t1 ==> 
       (Ex #t2. ProgressTo_111112111(p )@t2)
    "

restriction progress_1111121111_to_1111121111111:
    "All p #t1. ProgressFrom_1111121111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111121111111(p )@t2)
    "

restriction progress_1111111111_to_111111111111111:
    "All p #t1. ProgressFrom_1111111111(p )@t1 ==> 
       (Ex #t2. ProgressTo_111111111111111(p )@t2)
    "

restriction progress_11111111_to_111111111:
    "All p #t1. ProgressFrom_11111111(p )@t1 ==> 
       (Ex #t2. ProgressTo_111111111(p )@t2)
    "

restriction progress_1_to_1111121:
    "All p #t1. ProgressFrom_1(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111121(p )@t2)
    "

restriction progress_1_to_1111111:
    "All p #t1. ProgressFrom_1(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111111(p )@t2)
    "


restriction progress_init:
    " Ex #t. Init()@t "

restriction resilient: 
    "All #i x y. Send(x,y)@i ==> Ex #j. Receive(x,y)@j & #i<#j "

 
 restriction locking_8: 
 "All p pp l x lp #t1 #t3 . Lock_8(p,l,x)@t1 & Lock(pp,lp,x)@t3 
         ==> 
         ( #t1<#t3 
                  & (Ex #t2. Unlock_8(p,l,x)@t2 & #t1<#t2 & #t2<#t3  
                  & (All #t0 pp  . Unlock(pp,l,x)@t0 ==> #t0=#t2) 
                  & (All pp lpp #t0 . Lock(pp,lpp,x)@t0 ==> #t0<#t1 | #t0=#t1 | #t2<#t0) 
                  & (All pp lpp #t0 . Unlock(pp,lpp,x)@t0 ==> #t0<#t1 | #t2<#t0 | #t2=#t0 ) 
                 )) 
         | #t3<#t1 | #t1=#t3 " 

  
 restriction locking_6: 
 "All p pp l x lp #t1 #t3 . Lock_6(p,l,x)@t1 & Lock(pp,lp,x)@t3 
         ==> 
         ( #t1<#t3 
                  & (Ex #t2. Unlock_6(p,l,x)@t2 & #t1<#t2 & #t2<#t3  
                  & (All #t0 pp  . Unlock(pp,l,x)@t0 ==> #t0=#t2) 
                  & (All pp lpp #t0 . Lock(pp,lpp,x)@t0 ==> #t0<#t1 | #t0=#t1 | #t2<#t0) 
                  & (All pp lpp #t0 . Unlock(pp,lpp,x)@t0 ==> #t0<#t1 | #t2<#t0 | #t2=#t0 ) 
                 )) 
         | #t3<#t1 | #t1=#t3 " 

 lemma Executable : exists-trace
"	Ex A B m #i. Recv(A, B, m) @ #i"

lemma all_received_were_sent : all-traces
"	All A B m #i. ( Recv(A, B, m) @ #i ==> ( Ex #k. ( Sent(A, B, m) @ #k & #k < #i ) ) )"

lemma all_received_were_sent_injective :
"	All A B t #i. Recv(A, B, t) @ #i ==> ( Ex #j. Sent(A, B, t) @ #j & #j < #i & not( Ex A2 B2 #i2. Recv(A2, B2, t) @ i2 & not( #i2 = #i ) ) )"

lemma order : all-traces
"	All A B m m2 #i #j. ( Recv(A, B, m) @ #i & Recv(A, B, m2) @ #j & #i < #j ==> ( Ex #k #l. ( Sent(A, B, m) @ #k & Sent(A, B, m2) @ #l & #k < #l ) ) )"

lemma delivery : all-traces
"	All A B m #i. ( Sent(A, B, m) @ #i ==> ( Ex #k. ( Recv(A, B, m) @ #k & #i < #k ) ) )"

lemma delivery_order : all-traces
"	All A B m m2 #i #j. ( Sent(A, B, m) @ #i & Sent(A, B, m2) @ #j & #i < #j ==> ( Ex #k #l. ( Recv(A, B, m) @ #k & Recv(A, B, m2) @ #l & #k < #l ) ) )"

end
