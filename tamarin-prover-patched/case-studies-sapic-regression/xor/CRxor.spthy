theory CRXOR
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m

builtins: xor, hashing

heuristic: p /* heuristic for SAPIC */

rule Init_: // [process=top-level] Init 
 [] --[Init()]-> [State_()]

rule new_k_: // [process=top-level] new ~k 
 [State_(), Fr(~k)] --[]-> [State_1(~k)]

rule Rep_0_1: // [process=top-level] Rep, 0 
 [State_1(~k)] --[]-> [!Semistate_11(~k)]

rule Rep_1_1: // [process=top-level] Rep, 1 
 [!Semistate_11(~k)] --[]-> [State_11(~k)]

rule Par_11: // [process=top-level] Par 
 [State_11(~k)] --[]-> [State_111(~k), State_112(~k)]

rule new_na_111 [color=#569DC0]: // [process=Initiator] new ~na 
 [State_111(~k), Fr(~na)] --[]-> [State_1111(~k, ~na)]

rule event_Challengena_1111 [color=#569DC0]: // [process=Initiator] event Challenge(~na) 
 [State_1111(~k, ~na)] --[Event(), Challenge(~na)]-> [State_11111(~k, ~na)]

rule out_na_11111 [color=#569DC0]: // [process=Initiator] out ~na 
 [State_11111(~k, ~na)] --[]-> [State_111111(~k, ~na), Out(~na)]

rule in_m_nb__111111 [color=#569DC0]: // [process=Initiator] in <m, nb> 
 [State_111111(~k, ~na), In(<m, nb>)] --[]-> [State_1111111(~k, ~na, m, nb)]

rule if_eqhna_XOR_k_XOR_nb_m_0_1111111 [color=#569DC0]: // [process=Initiator] if eq(h(~na XOR ~k XOR nb), m), 0 
 [State_1111111(~k, ~na, m, nb)] --[Pred_eq(h(~na XOR ~k XOR nb), m)]-> [State_11111111(~k, ~na, m, nb)]

rule if_eqhna_XOR_k_XOR_nb_m_1_1111111 [color=#569DC0]: // [process=Initiator] if eq(h(~na XOR ~k XOR nb), m), 1 
 [State_1111111(~k, ~na, m, nb)] --[Pred_not_eq(h(~na XOR ~k XOR nb), m)]-> [State_11111112(~k, ~na, m, nb)]

rule event_Alivena_k_11111111 [color=#569DC0]: // [process=Initiator] event Alive(~na, ~k) 
 [State_11111111(~k, ~na, m, nb)] --[Event(), Alive(~na, ~k)]-> [State_111111111(~k, ~na, m, nb)]

rule Zero_111111111 [color=#569DC0]: // [process=Initiator] Zero 
 [State_111111111(~k, ~na, m, nb)] --[]-> []

rule Zero_11111112 [color=#569DC0]: // [process=Initiator] Zero 
 [State_11111112(~k, ~na, m, nb)] --[]-> []

rule in_na_112 [color=#2CD719]: // [process=Responder] in na 
 [State_112(~k), In(na)] --[]-> [State_1121(~k, na)]

rule new_nb_1121 [color=#2CD719]: // [process=Responder] new ~nb 
 [State_1121(~k, na), Fr(~nb)] --[]-> [State_11211(~k, ~nb, na)]

rule if_eqna_zero_0_11211 [color=#2CD719]: // [process=Responder] if eq(na, zero()), 0 
 [State_11211(~k, ~nb, na)] --[Pred_eq(na, zero())]-> [State_112111(~k, ~nb, na)]

rule if_eqna_zero_1_11211 [color=#2CD719]: // [process=Responder] if eq(na, zero()), 1 
 [State_11211(~k, ~nb, na)] --[Pred_not_eq(na, zero())]-> [State_112112(~k, ~nb, na)]

rule Zero_112111 [color=#2CD719]: // [process=Responder] Zero 
 [State_112111(~k, ~nb, na)] --[]-> []

rule event_NeqForExecna_zero_112112 [color=#2CD719]: // [process=Responder] event NeqForExec(na, zero()) 
 [State_112112(~k, ~nb, na)] --[Event(), NeqForExec(na, zero())]-> [State_1121121(~k, ~nb, na)]

rule event_Responsek_1121121 [color=#2CD719]: // [process=Responder] event Response(~k) 
 [State_1121121(~k, ~nb, na)] --[Event(), Response(~k)]-> [State_11211211(~k, ~nb, na)]

rule out_hna_XOR_k_XOR_nb_nb__11211211 [color=#2CD719]: // [process=Responder] out <h(na XOR ~k XOR ~nb), ~nb> 
 [State_11211211(~k, ~nb, na)] --[]-> [State_112112111(~k, ~nb, na), Out(<h(na XOR ~k XOR ~nb), ~nb>)]

rule Zero_112112111 [color=#2CD719]: // [process=Responder] Zero 
 [State_112112111(~k, ~nb, na)] --[]-> []


restriction predicate_eq:
"All #i a b. Pred_eq(a,b)@i ==> a = b"


restriction predicate_not_eq:
"All #i a b. Pred_not_eq(a,b)@i ==> not(a = b)"


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"

lemma alive :
"	All x y #i. Alive(x, y) @ i ==> Ex #j. Response(y) @ j"

lemma recentalive_tag : all-traces
"	All x y #i. ( Alive(x, y) @ #i ) ==> ( Ex #j #k. Challenge(x) @ k & Response(y) @ #j & k < j & j < i )"

lemma executable : exists-trace
"	Ex x y #i #j. Alive(x, y) @ i & Response(y) @ j & ( notEx #k. Response(y) @ k & ( not( #j = #k ) ) ) & ( notEx #l. NeqForExec(x, x) @ l )"

end
