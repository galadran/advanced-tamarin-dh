theory NSLPK3XOR
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m

builtins: asymmetric-encryption, xor

heuristic: p /* heuristic for SAPIC */

rule Init_: // [process=top-level] Init 
 [] --[Init()]-> [State_()]

rule Par_: // [process=top-level] Par 
 [State_()] --[]-> [State_1(), State_2()]

rule Par_1: // [process=top-level] Par 
 [State_1()] --[]-> [State_11(), State_12()]

rule Par_11: // [process=top-level] Par 
 [State_11()] --[]-> [State_111(), State_112()]

rule Rep_0_111: // [process=top-level] Rep, 0 
 [State_111()] --[]-> [!Semistate_1111()]

rule Rep_1_111: // [process=top-level] Rep, 1 
 [!Semistate_1111()] --[]-> [State_1111()]

rule in_A_1111 [color=#569DC0]: // [process=Register] in $A 
 [State_1111(), In($A)] --[]-> [State_11111($A)]

rule new_ltkA_11111 [color=#569DC0]: // [process=Register] new ~ltkA 
 [State_11111($A), Fr(~ltkA)] --[]-> [State_111111($A, ~ltkA)]

rule event_Register_A_111111 [color=#569DC0]: // [process=Register] event Register($A) 
 [State_111111($A, ~ltkA)] --[Event(), Register($A)]-> [State_1111111($A, ~ltkA)]

rule lock_A_1111111 [color=#569DC0]: // [process=Register] lock $A 
 [State_1111111($A, ~ltkA), Fr(~lock6)] --[Lock($6, ~lock6, $A), Lock_6($6, ~lock6, $A)]-> [State_11111111($A, ~lock6, ~ltkA)]

rule insert_Ltk_A_ltkA_11111111 [color=#569DC0]: // [process=Register] insert <'Ltk', $A>,~ltkA 
 [State_11111111($A, ~lock6, ~ltkA)] --[Insert(<'Ltk', $A>, ~ltkA)]-> [State_111111111($A, ~lock6, ~ltkA)]

rule insert_Pk_A_pkltkA_111111111 [color=#569DC0]: // [process=Register] insert <'Pk', $A>,pk(~ltkA) 
 [State_111111111($A, ~lock6, ~ltkA)] --[Insert(<'Pk', $A>, pk(~ltkA))]-> [State_1111111111($A, ~lock6, ~ltkA)]

rule unlock_A_1111111111 [color=#569DC0]: // [process=Register] unlock $A 
 [State_1111111111($A, ~lock6, ~ltkA)] --[Unlock($6, ~lock6, $A), Unlock_6($6, ~lock6, $A)]-> [State_11111111111($A, ~lock6, ~ltkA)]

rule out_pkltkA_11111111111 [color=#569DC0]: // [process=Register] out pk(~ltkA) 
 [State_11111111111($A, ~lock6, ~ltkA)] --[]-> [State_111111111111($A, ~lock6, ~ltkA), Out(pk(~ltkA))]

rule Zero_111111111111 [color=#569DC0]: // [process=Register] Zero 
 [State_111111111111($A, ~lock6, ~ltkA)] --[]-> []

rule Rep_0_112: // [process=top-level] Rep, 0 
 [State_112()] --[]-> [!Semistate_1121()]

rule Rep_1_112: // [process=top-level] Rep, 1 
 [!Semistate_1121()] --[]-> [State_1121()]

rule in_A_1121 [color=#2CD719]: // [process=Reveal_ltk] in A 
 [State_1121(), In(A)] --[]-> [State_11211(A)]

rule lookup_Ltk_A_as_ltkA_0_11211 [color=#2CD719]: // [process=Reveal_ltk] lookup <'Ltk', A> as ltkA, 0 
 [State_11211(A)] --[IsIn(<'Ltk', A>, ltkA)]-> [State_112111(A, ltkA)]

rule lookup_Ltk_A_as_ltkA_1_11211 [color=#2CD719]: // [process=Reveal_ltk] lookup <'Ltk', A> as ltkA, 1 
 [State_11211(A)] --[IsNotSet(<'Ltk', A>)]-> [State_112112(A)]

rule event_RevLtkA_112111 [color=#2CD719]: // [process=Reveal_ltk] event RevLtk(A) 
 [State_112111(A, ltkA)] --[Event(), RevLtk(A)]-> [State_1121111(A, ltkA)]

rule out_ltkA_1121111 [color=#2CD719]: // [process=Reveal_ltk] out ltkA 
 [State_1121111(A, ltkA)] --[]-> [State_11211111(A, ltkA), Out(ltkA)]

rule Zero_11211111 [color=#2CD719]: // [process=Reveal_ltk] Zero 
 [State_11211111(A, ltkA)] --[]-> []

rule Zero_112112 [color=#2CD719]: // [process=Reveal_ltk] Zero 
 [State_112112(A)] --[]-> []

rule Rep_0_12: // [process=top-level] Rep, 0 
 [State_12()] --[]-> [!Semistate_121()]

rule Rep_1_12: // [process=top-level] Rep, 1 
 [!Semistate_121()] --[]-> [State_121()]

rule in_I_R__121 [color=#11EC28]: // [process=Initiator] in <$I, $R> 
 [State_121(), In(<$I, $R>)] --[]-> [State_1211($I, $R)]

rule lookup_Pk_R_as_pkR_0_1211 [color=#11EC28]: // [process=Initiator] lookup <'Pk', $R> as pkR, 0 
 [State_1211($I, $R)] --[IsIn(<'Pk', $R>, pkR)]-> [State_12111($I, $R, pkR)]

rule lookup_Pk_R_as_pkR_1_1211 [color=#11EC28]: // [process=Initiator] lookup <'Pk', $R> as pkR, 1 
 [State_1211($I, $R)] --[IsNotSet(<'Pk', $R>)]-> [State_12112($I, $R)]

rule new_ni_12111 [color=#11EC28]: // [process=Initiator] new ~ni 
 [State_12111($I, $R, pkR), Fr(~ni)] --[]-> [State_121111($I, $R, ~ni, pkR)]

rule event_OUT_I_1aenc_1_ni_I_pkR_121111 [color=#11EC28]: // [process=Initiator] event OUT_I_1(aenc(<'1', ~ni, $I>, pkR)) 
 [State_121111($I, $R, ~ni, pkR)] --[Event(), OUT_I_1(aenc(<'1', ~ni, $I>, pkR))]-> [State_1211111($I, $R, ~ni, pkR)]

rule out_aenc_1_ni_I_pkR_1211111 [color=#11EC28]: // [process=Initiator] out aenc(<'1', ~ni, $I>, pkR) 
 [State_1211111($I, $R, ~ni, pkR)] --[]-> [State_12111111($I, $R, ~ni, pkR), Out(aenc(<'1', ~ni, $I>, pkR))]

rule lookup_Ltk_I_as_ltkI_0_12111111 [color=#11EC28]: // [process=Initiator] lookup <'Ltk', $I> as ltkI, 0 
 [State_12111111($I, $R, ~ni, pkR)] --[IsIn(<'Ltk', $I>, ltkI)]-> [State_121111111($I, $R, ~ni, ltkI, pkR)]

rule lookup_Ltk_I_as_ltkI_1_12111111 [color=#11EC28]: // [process=Initiator] lookup <'Ltk', $I> as ltkI, 1 
 [State_12111111($I, $R, ~ni, pkR)] --[IsNotSet(<'Ltk', $I>)]-> [State_121111112($I, $R, ~ni, pkR)]

rule in_aenc_2_ni_x_pkltkI_121111111 [color=#11EC28]: // [process=Initiator] in aenc(<'2', ~ni, x>, pk(ltkI)) 
 [State_121111111($I, $R, ~ni, ltkI, pkR), In(aenc(<'2', ~ni, x>, pk(ltkI)))] --[]-> [State_1211111111($I, $R, ~ni, ltkI, pkR, x)]

rule event_IN_I_2_nrx_XOR_R_aenc_2_ni_x_pkltkI_1211111111 [color=#11EC28]: // [process=Initiator] event IN_I_2_nr(x XOR $R, aenc(<'2', ~ni, x>, pk(ltkI))) 
 [State_1211111111($I, $R, ~ni, ltkI, pkR, x)] --[Event(), IN_I_2_nr(x XOR $R, aenc(<'2', ~ni, x>, pk(ltkI)))]-> [State_12111111111($I, $R, ~ni, ltkI, pkR, x)]

rule event_Commit_I_R_init_ni_x_XOR_R__12111111111 [color=#11EC28]: // [process=Initiator] event Commit($I, $R, <'init', ~ni, x XOR $R>) 
 [State_12111111111($I, $R, ~ni, ltkI, pkR, x)] --[Event(), Commit($I, $R, <'init', ~ni, x XOR $R>)]-> [State_121111111111($I, $R, ~ni, ltkI, pkR, x)]

rule event_Running_R_I_resp_ni_x_XOR_R__121111111111 [color=#11EC28]: // [process=Initiator] event Running($R, $I, <'resp', ~ni, x XOR $R>) 
 [State_121111111111($I, $R, ~ni, ltkI, pkR, x)] --[Event(), Running($R, $I, <'resp', ~ni, x XOR $R>)]-> [State_1211111111111($I, $R, ~ni, ltkI, pkR, x)]

rule out_aenc_3_x_XOR_R_pkR_1211111111111 [color=#11EC28]: // [process=Initiator] out aenc(<'3', x XOR $R>, pkR) 
 [State_1211111111111($I, $R, ~ni, ltkI, pkR, x)] --[]-> [State_12111111111111($I, $R, ~ni, ltkI, pkR, x), Out(aenc(<'3', x XOR $R>, pkR))]

rule event_Secret_I_R_x_XOR_R_12111111111111 [color=#11EC28]: // [process=Initiator] event Secret($I, $R, x XOR $R) 
 [State_12111111111111($I, $R, ~ni, ltkI, pkR, x)] --[Event(), Secret($I, $R, x XOR $R)]-> [State_121111111111111($I, $R, ~ni, ltkI, pkR, x)]

rule event_Secret_I_R_ni_121111111111111 [color=#11EC28]: // [process=Initiator] event Secret($I, $R, ~ni) 
 [State_121111111111111($I, $R, ~ni, ltkI, pkR, x)] --[Event(), Secret($I, $R, ~ni)]-> [State_1211111111111111($I, $R, ~ni, ltkI, pkR, x)]

rule Zero_1211111111111111 [color=#11EC28]: // [process=Initiator] Zero 
 [State_1211111111111111($I, $R, ~ni, ltkI, pkR, x)] --[]-> []

rule Zero_121111112 [color=#11EC28]: // [process=Initiator] Zero 
 [State_121111112($I, $R, ~ni, pkR)] --[]-> []

rule Zero_12112 [color=#11EC28]: // [process=Initiator] Zero 
 [State_12112($I, $R)] --[]-> []

rule Rep_0_2: // [process=top-level] Rep, 0 
 [State_2()] --[]-> [!Semistate_21()]

rule Rep_1_2: // [process=top-level] Rep, 1 
 [!Semistate_21()] --[]-> [State_21()]

rule in_R_21 [color=#45D1E2]: // [process=Responder] in $R 
 [State_21(), In($R)] --[]-> [State_211($R)]

rule lookup_Ltk_R_as_ltkR_0_211 [color=#45D1E2]: // [process=Responder] lookup <'Ltk', $R> as ltkR, 0 
 [State_211($R)] --[IsIn(<'Ltk', $R>, ltkR)]-> [State_2111($R, ltkR)]

rule lookup_Ltk_R_as_ltkR_1_211 [color=#45D1E2]: // [process=Responder] lookup <'Ltk', $R> as ltkR, 1 
 [State_211($R)] --[IsNotSet(<'Ltk', $R>)]-> [State_2112($R)]

rule in_aenc_1_ni_I_pkltkR_2111 [color=#45D1E2]: // [process=Responder] in aenc(<'1', ni, $I>, pk(ltkR)) 
 [State_2111($R, ltkR), In(aenc(<'1', ni, $I>, pk(ltkR)))] --[]-> [State_21111($I, $R, ltkR, ni)]

rule lookup_Pk_I_as_pkI_0_21111 [color=#45D1E2]: // [process=Responder] lookup <'Pk', $I> as pkI, 0 
 [State_21111($I, $R, ltkR, ni)] --[IsIn(<'Pk', $I>, pkI)]-> [State_211111($I, $R, ltkR, ni, pkI)]

rule lookup_Pk_I_as_pkI_1_21111 [color=#45D1E2]: // [process=Responder] lookup <'Pk', $I> as pkI, 1 
 [State_21111($I, $R, ltkR, ni)] --[IsNotSet(<'Pk', $I>)]-> [State_211112($I, $R, ltkR, ni)]

rule new_nr_211111 [color=#45D1E2]: // [process=Responder] new ~nr 
 [State_211111($I, $R, ltkR, ni, pkI), Fr(~nr)] --[]-> [State_2111111($I, $R, ~nr, ltkR, ni, pkI)]

rule event_IN_R_1_nini_aenc_1_ni_I_pkltkR_2111111 [color=#45D1E2]: // [process=Responder] event IN_R_1_ni(ni, aenc(<'1', ni, $I>, pk(ltkR))) 
 [State_2111111($I, $R, ~nr, ltkR, ni, pkI)] --[Event(), IN_R_1_ni(ni, aenc(<'1', ni, $I>, pk(ltkR)))]-> [State_21111111($I, $R, ~nr, ltkR, ni, pkI)]

rule event_OUT_R_1aenc_2_ni_nr_XOR_R_pkI_21111111 [color=#45D1E2]: // [process=Responder] event OUT_R_1(aenc(<'2', ni, ~nr XOR $R>, pkI)) 
 [State_21111111($I, $R, ~nr, ltkR, ni, pkI)] --[Event(), OUT_R_1(aenc(<'2', ni, ~nr XOR $R>, pkI))]-> [State_211111111($I, $R, ~nr, ltkR, ni, pkI)]

rule event_Running_I_R_init_ni_nr__211111111 [color=#45D1E2]: // [process=Responder] event Running($I, $R, <'init', ni, ~nr>) 
 [State_211111111($I, $R, ~nr, ltkR, ni, pkI)] --[Event(), Running($I, $R, <'init', ni, ~nr>)]-> [State_2111111111($I, $R, ~nr, ltkR, ni, pkI)]

rule out_aenc_2_ni_nr_XOR_R_pkI_2111111111 [color=#45D1E2]: // [process=Responder] out aenc(<'2', ni, ~nr XOR $R>, pkI) 
 [State_2111111111($I, $R, ~nr, ltkR, ni, pkI)] --[]-> [State_21111111111($I, $R, ~nr, ltkR, ni, pkI), Out(aenc(<'2', ni, ~nr XOR $R>, pkI))]

rule in_aenc_3_nr_pkltkR_21111111111 [color=#45D1E2]: // [process=Responder] in aenc(<'3', ~nr>, pk(ltkR)) 
 [State_21111111111($I, $R, ~nr, ltkR, ni, pkI), In(aenc(<'3', ~nr>, pk(ltkR)))] --[]-> [State_211111111111($I, $R, ~nr, ltkR, ni, pkI)]

rule event_Commit_R_I_resp_ni_nr__211111111111 [color=#45D1E2]: // [process=Responder] event Commit($R, $I, <'resp', ni, ~nr>) 
 [State_211111111111($I, $R, ~nr, ltkR, ni, pkI)] --[Event(), Commit($R, $I, <'resp', ni, ~nr>)]-> [State_2111111111111($I, $R, ~nr, ltkR, ni, pkI)]

rule event_Secret_R_I_nr_2111111111111 [color=#45D1E2]: // [process=Responder] event Secret($R, $I, ~nr) 
 [State_2111111111111($I, $R, ~nr, ltkR, ni, pkI)] --[Event(), Secret($R, $I, ~nr)]-> [State_21111111111111($I, $R, ~nr, ltkR, ni, pkI)]

rule event_Secret_R_I_ni_21111111111111 [color=#45D1E2]: // [process=Responder] event Secret($R, $I, ni) 
 [State_21111111111111($I, $R, ~nr, ltkR, ni, pkI)] --[Event(), Secret($R, $I, ni)]-> [State_211111111111111($I, $R, ~nr, ltkR, ni, pkI)]

rule Zero_211111111111111 [color=#45D1E2]: // [process=Responder] Zero 
 [State_211111111111111($I, $R, ~nr, ltkR, ni, pkI)] --[]-> []

rule Zero_211112 [color=#45D1E2]: // [process=Responder] Zero 
 [State_211112($I, $R, ltkR, ni)] --[]-> []

rule Zero_2112 [color=#45D1E2]: // [process=Responder] Zero 
 [State_2112($R)] --[]-> []

restriction onekeypername :
"	not( Ex A #i #j. Register(A) @ i & Register(A) @ j & ( not( #i = #j ) ) )"

 restriction set_in:
"All x y #t3 . IsIn(x,y)@t3 ==>
        (Ex #t2 . Insert(x,y)@t2 & #t2<#t3 
                & ( All #t1 . Delete(x)@t1 ==> (#t1<#t2 |  #t3<#t1))
                & ( All #t1 yp . Insert(x,yp)@t1 ==> (#t1<#t2 | #t1=#t2 | #t3<#t1))
)"

restriction set_notin:
"All x #t3 . IsNotSet(x)@t3 ==> 
        (All #t1 y . Insert(x,y)@t1 ==>  #t3<#t1 )
  | ( Ex #t1 .   Delete(x)@t1 & #t1<#t3 
                &  (All #t2 y . Insert(x,y)@t2 & #t2<#t3 ==>  #t2<#t1))"


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"

 
 restriction locking_6: 
 "All p pp l x lp #t1 #t3 . Lock_6(p,l,x)@t1 & Lock(pp,lp,x)@t3 
         ==> 
         ( #t1<#t3 
                  & (Ex #t2. Unlock_6(p,l,x)@t2 & #t1<#t2 & #t2<#t3  
                  & (All #t0 pp  . Unlock(pp,l,x)@t0 ==> #t0=#t2) 
                  & (All pp lpp #t0 . Lock(pp,lpp,x)@t0 ==> #t0<#t1 | #t0=#t1 | #t2<#t0) 
                  & (All pp lpp #t0 . Unlock(pp,lpp,x)@t0 ==> #t0<#t1 | #t2<#t0 | #t2=#t0 ) 
                 )) 
         | #t3<#t1 | #t1=#t3 " 

 lemma types [sources]:
"	( All ni m1 #i. IN_R_1_ni(ni, m1) @ i ==> ( ( Ex #j. KU(ni) @ j & j < i ) | ( Ex #j. OUT_I_1(m1) @ j ) ) ) & ( All nr m2 #i. IN_I_2_nr(nr, m2) @ i ==> ( ( Ex #j. KU(nr) @ j & j < i ) | ( Ex #j. OUT_R_1(m2) @ j ) ) )"

lemma nonce_secrecy :
"	not( Ex A B s #i. Secret(A, B, s) @ i & ( Ex #j. K(s) @ j ) & not( Ex #r. RevLtk(A) @ r ) & not( Ex #r. RevLtk(B) @ r ) )"

lemma injective_agree :
"	All actor peer params #i. Commit(actor, peer, params) @ i ==> ( Ex #j. Running(actor, peer, params) @ j & j < i & not( Ex actor2 peer2 #i2. Commit(actor2, peer2, params) @ i2 & not( #i = #i2 ) ) ) | ( Ex #r. RevLtk(actor) @ r ) | ( Ex #r. RevLtk(peer) @ r )"

lemma session_key_setup_possible : exists-trace
"	Ex A B s #i. Secret(A, B, s) @ i & not( Ex #r. RevLtk(A) @ r ) & not( Ex #r. RevLtk(B) @ r )"

end
