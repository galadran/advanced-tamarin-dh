theory KCL07
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m

builtins: xor, hashing

heuristic: p /* heuristic for SAPIC */

rule Init_: // [process=top-level] Init 
 [] --[Init()]-> [State_()]

rule new_k_: // [process=top-level] new ~k 
 [State_(), Fr(~k)] --[]-> [State_1(~k)]

rule new_id_1: // [process=top-level] new ~id 
 [State_1(~k), Fr(~id)] --[]-> [State_11(~id, ~k)]

rule Par_11: // [process=top-level] Par 
 [State_11(~id, ~k)] --[]-> [State_111(~id, ~k), State_112(~id, ~k)]

rule Rep_0_111: // [process=top-level] Rep, 0 
 [State_111(~id, ~k)] --[]-> [!Semistate_1111(~id, ~k)]

rule Rep_1_111: // [process=top-level] Rep, 1 
 [!Semistate_1111(~id, ~k)] --[]-> [State_1111(~id, ~k)]

rule new_r1_1111 [color=#569DC0]: // [process=Reader] new ~r1 
 [State_1111(~id, ~k), Fr(~r1)] --[]-> [State_11111(~id, ~k, ~r1)]

rule event_Challenger1_Reader__11111 [color=#569DC0]: // [process=Reader] event Challenge(~r1, 'Reader') 
 [State_11111(~id, ~k, ~r1)] --[Event(), Challenge(~r1, 'Reader')]-> [State_111111(~id, ~k, ~r1)]

rule out_r1_111111 [color=#569DC0]: // [process=Reader] out ~r1 
 [State_111111(~id, ~k, ~r1)] --[]-> [State_1111111(~id, ~k, ~r1), Out(~r1)]

rule in_xoredhash_1111111 [color=#569DC0]: // [process=Reader] in xoredhash 
 [State_1111111(~id, ~k, ~r1), In(xoredhash)] --[]-> [State_11111111(~id, ~k, ~r1, xoredhash)]

rule if_eqxoredhash_id_XOR_h_r1_k__0_11111111 [color=#569DC0]: // [process=Reader] if eq(xoredhash, ~id XOR h(<~r1, ~k>)), 0 
 [State_11111111(~id, ~k, ~r1, xoredhash)] --[Pred_eq(xoredhash, ~id XOR h(<~r1, ~k>))]-> [State_111111111(~id, ~k, ~r1, xoredhash)]

rule if_eqxoredhash_id_XOR_h_r1_k__1_11111111 [color=#569DC0]: // [process=Reader] if eq(xoredhash, ~id XOR h(<~r1, ~k>)), 1 
 [State_11111111(~id, ~k, ~r1, xoredhash)] --[Pred_not_eq(xoredhash, ~id XOR h(<~r1, ~k>))]-> [State_111111112(~id, ~k, ~r1, xoredhash)]

rule event_Alivek_Tag__111111111 [color=#569DC0]: // [process=Reader] event Alive(~k, 'Tag') 
 [State_111111111(~id, ~k, ~r1, xoredhash)] --[Event(), Alive(~k, 'Tag')]-> [State_1111111111(~id, ~k, ~r1, xoredhash)]

rule Zero_1111111111 [color=#569DC0]: // [process=Reader] Zero 
 [State_1111111111(~id, ~k, ~r1, xoredhash)] --[]-> []

rule Zero_111111112 [color=#569DC0]: // [process=Reader] Zero 
 [State_111111112(~id, ~k, ~r1, xoredhash)] --[]-> []

rule Rep_0_112: // [process=top-level] Rep, 0 
 [State_112(~id, ~k)] --[]-> [!Semistate_1121(~id, ~k)]

rule Rep_1_112: // [process=top-level] Rep, 1 
 [!Semistate_1121(~id, ~k)] --[]-> [State_1121(~id, ~k)]

rule in_r1_1121 [color=#2CD719]: // [process=Tag] in r1 
 [State_1121(~id, ~k), In(r1)] --[]-> [State_11211(~id, ~k, r1)]

rule new_r2_11211 [color=#2CD719]: // [process=Tag] new ~r2 
 [State_11211(~id, ~k, r1), Fr(~r2)] --[]-> [State_112111(~id, ~k, ~r2, r1)]

rule event_Responsek_Tag__112111 [color=#2CD719]: // [process=Tag] event Response(~k, 'Tag') 
 [State_112111(~id, ~k, ~r2, r1)] --[Event(), Response(~k, 'Tag')]-> [State_1121111(~id, ~k, ~r2, r1)]

rule out_id_XOR_r2_h_r1_k__XOR_r2__1121111 [color=#2CD719]: // [process=Tag] out <~id XOR ~r2, h(<r1, ~k>) XOR ~r2> 
 [State_1121111(~id, ~k, ~r2, r1)] --[]-> [State_11211111(~id, ~k, ~r2, r1), Out(<~id XOR ~r2, h(<r1, ~k>) XOR ~r2>)]

rule Zero_11211111 [color=#2CD719]: // [process=Tag] Zero 
 [State_11211111(~id, ~k, ~r2, r1)] --[]-> []


restriction predicate_eq:
"All #i a b. Pred_eq(a,b)@i ==> a = b"


restriction predicate_not_eq:
"All #i a b. Pred_not_eq(a,b)@i ==> not(a = b)"


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"

lemma recentalive_tag : all-traces
"	All x #i. ( Alive(x, 'Tag') @ #i ) ==> ( Ex y #j #k. Challenge(y, 'Reader') @ k & Response(x, 'Tag') @ #j & k < j & j < i )"

lemma executable : exists-trace
"	Ex x #i #j. ( Alive(x, 'Tag') @ #i ) & ( Response(x, 'Tag') @ #j ) & ( notEx #k. Response(x, 'Tag') @ #k & ( not( #j = #k ) ) )"

end
