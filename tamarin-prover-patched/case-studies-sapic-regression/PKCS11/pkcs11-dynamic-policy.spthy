theory PKCS11DynamicPolicy
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m

builtins: symmetric-encryption

functions: key/1, attwrap/1, attunwrap/1, attenc/1, attdec/1, attsens/1, attextr/1, atttrus/1, attwwt/1, attwt/1, attut/1, key/1, tem/1

equations: attwrap(<wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut>)=wrap,attunwrap(<wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut>)=unwrap,attenc(<wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut>)=enc,attdec(<wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut>)=dec,attsens(<wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut>)=sens,attextr(<wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut>)=extr,atttrus(<wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut>)=trus,attwwt(<wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut>)=wwt,attwt(<wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut>)=wt,attut(<wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, ut>)=ut,key(<k, templ>)=k,tem(<k, templ>)=templ

heuristic: p /* heuristic for SAPIC */

rule Init_: // [process=top-level] Init 
 [] --[Init()]-> [State_()]

rule insert_F_template_trusted_on_on_off_off_on_on_off_off_usage_usage__: // [process=top-level] insert <'F_template', 'trusted'>,<'on', 'on', 'off', 'off', 'on', 'on', 'off', 'off', 'usage', 'usage'> 
 [State_()] --[Insert(<'F_template', 'trusted'>, <'on', 'on', 'off', 'off', 'on', 'on', 'off', 'off', 'usage', 'usage'>)]-> [State_1()]

rule insert_F_template_usage_on_on_on_on_on_on_off_off_trusted_trusted__1: // [process=top-level] insert <'F_template', 'usage'>,<'on', 'on', 'on', 'on', 'on', 'on', 'off', 'off', 'trusted', 'trusted'> 
 [State_1()] --[Insert(<'F_template', 'usage'>, <'on', 'on', 'on', 'on', 'on', 'on', 'off', 'off', 'trusted', 'trusted'>)]-> [State_11()]

rule insert_F_template_untrusted_off_off_on_on_off_on_off_off_undef_undef__11: // [process=top-level] insert <'F_template', 'untrusted'>,<'off', 'off', 'on', 'on', 'off', 'on', 'off', 'off', 'undef', 'undef'> 
 [State_11()] --[Insert(<'F_template', 'untrusted'>, <'off', 'off', 'on', 'on', 'off', 'on', 'off', 'off', 'undef', 'undef'>)]-> [State_111()]

rule Rep_0_111: // [process=top-level] Rep, 0 
 [State_111()] --[]-> [!Semistate_1111()]

rule Rep_1_111: // [process=top-level] Rep, 1 
 [!Semistate_1111()] --[]-> [State_1111()]

rule Par_1111: // [process=top-level] Par 
 [State_1111()] --[]-> [State_11111(), State_11112()]

rule Par_11111: // [process=top-level] Par 
 [State_11111()] --[]-> [State_111111(), State_111112()]

rule Par_111111: // [process=top-level] Par 
 [State_111111()] --[]-> [State_1111111(), State_1111112()]

rule Par_1111111: // [process=top-level] Par 
 [State_1111111()] --[]-> [State_11111111(), State_11111112()]

rule Par_11111111: // [process=top-level] Par 
 [State_11111111()] --[]-> [State_111111111(), State_111111112()]

rule in_create_atts_ptr__111111111 [color=#569DC0]: // [process=create] in <'create', atts, ptr> 
 [State_111111111(), In(<'create', atts, ptr>)] --[]-> [State_1111111111(atts, ptr)]

rule lock_device__1111111111 [color=#569DC0]: // [process=create] lock 'device' 
 [State_1111111111(atts, ptr), Fr(~lock14)] --[Lock($14, ~lock14, 'device'), Lock_14($14, ~lock14, 'device')]-> [State_11111111111(~lock14, atts, ptr)]

rule new_L_h_11111111111 [color=#569DC0]: // [process=create] new L_h 
 [State_11111111111(~lock14, atts, ptr), Fr(L_h)] --[]-> [State_111111111111(~lock14, L_h, atts, ptr)]

rule new_k_111111111111 [color=#569DC0]: // [process=create] new k 
 [State_111111111111(~lock14, L_h, atts, ptr), Fr(k)] --[]-> [State_1111111111111(~lock14, L_h, atts, k, ptr)]

rule lookup_F_template_ptr_as_templ_0_1111111111111 [color=#569DC0]: // [process=create] lookup <'F_template', ptr> as templ, 0 
 [State_1111111111111(~lock14, L_h, atts, k, ptr)] --[IsIn(<'F_template', ptr>, templ)]-> [State_11111111111111(~lock14, L_h, atts, k, ptr, templ)]

rule lookup_F_template_ptr_as_templ_1_1111111111111 [color=#569DC0]: // [process=create] lookup <'F_template', ptr> as templ, 1 
 [State_1111111111111(~lock14, L_h, atts, k, ptr)] --[IsNotSet(<'F_template', ptr>)]-> [State_11111111111112(~lock14, L_h, atts, k, ptr)]

rule if_permitsattwraptempl_attunwraptempl_attenctempl_attdectempl_attsenstempl_attextrtempl_atttrustempl_attwwttempl_attwttempl_attuttempl_attwrapatts_attunwrapatts_attencatts_attdecatts_attsensatts_attextratts_atttrusatts_attwwtatts_attwtatts_attutatts_0_11111111111111 [color=#569DC0]: // [process=create] if permits(attwrap(templ), attunwrap(templ), attenc(templ), attdec(templ), attsens(templ), attextr(templ), atttrus(templ), attwwt(templ), attwt(templ), attut(templ), attwrap(atts), attunwrap(atts), attenc(atts), attdec(atts), attsens(atts), attextr(atts), atttrus(atts), attwwt(atts), attwt(atts), attut(atts)), 0 
 [State_11111111111111(~lock14, L_h, atts, k, ptr, templ)] --[Pred_permits(attwrap(templ), attunwrap(templ), attenc(templ), attdec(templ), attsens(templ), attextr(templ), atttrus(templ), attwwt(templ), attwt(templ), attut(templ), attwrap(atts), attunwrap(atts), attenc(atts), attdec(atts), attsens(atts), attextr(atts), atttrus(atts), attwwt(atts), attwt(atts), attut(atts))]-> [State_111111111111111(~lock14, L_h, atts, k, ptr, templ)]

rule if_permitsattwraptempl_attunwraptempl_attenctempl_attdectempl_attsenstempl_attextrtempl_atttrustempl_attwwttempl_attwttempl_attuttempl_attwrapatts_attunwrapatts_attencatts_attdecatts_attsensatts_attextratts_atttrusatts_attwwtatts_attwtatts_attutatts_1_11111111111111 [color=#569DC0]: // [process=create] if permits(attwrap(templ), attunwrap(templ), attenc(templ), attdec(templ), attsens(templ), attextr(templ), atttrus(templ), attwwt(templ), attwt(templ), attut(templ), attwrap(atts), attunwrap(atts), attenc(atts), attdec(atts), attsens(atts), attextr(atts), atttrus(atts), attwwt(atts), attwt(atts), attut(atts)), 1 
 [State_11111111111111(~lock14, L_h, atts, k, ptr, templ)] --[Pred_not_permits(attwrap(templ), attunwrap(templ), attenc(templ), attdec(templ), attsens(templ), attextr(templ), atttrus(templ), attwwt(templ), attwt(templ), attut(templ), attwrap(atts), attunwrap(atts), attenc(atts), attdec(atts), attsens(atts), attextr(atts), atttrus(atts), attwwt(atts), attwt(atts), attut(atts))]-> [State_111111111111112(~lock14, L_h, atts, k, ptr, templ)]

rule event_NewKeyL_h_k_attsensatts_111111111111111 [color=#569DC0]: // [process=create] event NewKey(L_h, k, attsens(atts)) 
 [State_111111111111111(~lock14, L_h, atts, k, ptr, templ)] --[Event(), NewKey(L_h, k, attsens(atts))]-> [State_1111111111111111(~lock14, L_h, atts, k, ptr, templ)]

rule insert_obj_L_h_k_atts__1111111111111111 [color=#569DC0]: // [process=create] insert <'obj', L_h>,<k, atts> 
 [State_1111111111111111(~lock14, L_h, atts, k, ptr, templ)] --[Insert(<'obj', L_h>, <k, atts>)]-> [State_11111111111111111(~lock14, L_h, atts, k, ptr, templ)]

rule event_WrapKeyL_h_k_attwrapatts_11111111111111111 [color=#569DC0]: // [process=create] event WrapKey(L_h, k, attwrap(atts)) 
 [State_11111111111111111(~lock14, L_h, atts, k, ptr, templ)] --[Event(), WrapKey(L_h, k, attwrap(atts))]-> [State_111111111111111111(~lock14, L_h, atts, k, ptr, templ)]

rule event_DecKeyL_h_k_attdecatts_111111111111111111 [color=#569DC0]: // [process=create] event DecKey(L_h, k, attdec(atts)) 
 [State_111111111111111111(~lock14, L_h, atts, k, ptr, templ)] --[Event(), DecKey(L_h, k, attdec(atts))]-> [State_1111111111111111111(~lock14, L_h, atts, k, ptr, templ)]

rule event_EncKeyL_h_k_attencatts_1111111111111111111 [color=#569DC0]: // [process=create] event EncKey(L_h, k, attenc(atts)) 
 [State_1111111111111111111(~lock14, L_h, atts, k, ptr, templ)] --[Event(), EncKey(L_h, k, attenc(atts))]-> [State_11111111111111111111(~lock14, L_h, atts, k, ptr, templ)]

rule event_UnwrapKeyL_h_k_attunwrapatts_11111111111111111111 [color=#569DC0]: // [process=create] event UnwrapKey(L_h, k, attunwrap(atts)) 
 [State_11111111111111111111(~lock14, L_h, atts, k, ptr, templ)] --[Event(), UnwrapKey(L_h, k, attunwrap(atts))]-> [State_111111111111111111111(~lock14, L_h, atts, k, ptr, templ)]

rule out_L_h_111111111111111111111 [color=#569DC0]: // [process=create] out L_h 
 [State_111111111111111111111(~lock14, L_h, atts, k, ptr, templ)] --[]-> [State_1111111111111111111111(~lock14, L_h, atts, k, ptr, templ), Out(L_h)]

rule unlock_device__1111111111111111111111 [color=#569DC0]: // [process=create] unlock 'device' 
 [State_1111111111111111111111(~lock14, L_h, atts, k, ptr, templ)] --[Unlock($14, ~lock14, 'device'), Unlock_14($14, ~lock14, 'device')]-> [State_11111111111111111111111(~lock14, L_h, atts, k, ptr, templ)]

rule Zero_11111111111111111111111 [color=#569DC0]: // [process=create] Zero 
 [State_11111111111111111111111(~lock14, L_h, atts, k, ptr, templ)] --[]-> []

rule Zero_111111111111112 [color=#569DC0]: // [process=create] Zero 
 [State_111111111111112(~lock14, L_h, atts, k, ptr, templ)] --[]-> []

rule Zero_11111111111112 [color=#569DC0]: // [process=create] Zero 
 [State_11111111111112(~lock14, L_h, atts, k, ptr)] --[]-> []

rule in_L_h_sencm_k__111111112 [color=#2CD719]: // [process=decrypt] in <L_h, senc(m, k)> 
 [State_111111112(), In(<L_h, senc(m, k)>)] --[]-> [State_1111111121(L_h, k, m)]

rule lock_device__1111111121 [color=#2CD719]: // [process=decrypt] lock 'device' 
 [State_1111111121(L_h, k, m), Fr(~lock8)] --[Lock($8, ~lock8, 'device'), Lock_8($8, ~lock8, 'device')]-> [State_11111111211(~lock8, L_h, k, m)]

rule lookup_obj_L_h_as_v_0_11111111211 [color=#2CD719]: // [process=decrypt] lookup <'obj', L_h> as v, 0 
 [State_11111111211(~lock8, L_h, k, m)] --[IsIn(<'obj', L_h>, v)]-> [State_111111112111(~lock8, L_h, k, m, v)]

rule lookup_obj_L_h_as_v_1_11111111211 [color=#2CD719]: // [process=decrypt] lookup <'obj', L_h> as v, 1 
 [State_11111111211(~lock8, L_h, k, m)] --[IsNotSet(<'obj', L_h>)]-> [State_111111112112(~lock8, L_h, k, m)]

rule if_can_decryptattwraptemv_attunwraptemv_attenctemv_attdectemv_attsenstemv_attextrtemv_atttrustemv_attwwttemv_attwttemv_attuttemv_0_111111112111 [color=#2CD719]: // [process=decrypt] if can_decrypt(attwrap(tem(v)), attunwrap(tem(v)), attenc(tem(v)), attdec(tem(v)), attsens(tem(v)), attextr(tem(v)), atttrus(tem(v)), attwwt(tem(v)), attwt(tem(v)), attut(tem(v))), 0 
 [State_111111112111(~lock8, L_h, k, m, v)] --[Pred_can_decrypt(attwrap(tem(v)), attunwrap(tem(v)), attenc(tem(v)), attdec(tem(v)), attsens(tem(v)), attextr(tem(v)), atttrus(tem(v)), attwwt(tem(v)), attwt(tem(v)), attut(tem(v)))]-> [State_1111111121111(~lock8, L_h, k, m, v)]

rule if_can_decryptattwraptemv_attunwraptemv_attenctemv_attdectemv_attsenstemv_attextrtemv_atttrustemv_attwwttemv_attwttemv_attuttemv_1_111111112111 [color=#2CD719]: // [process=decrypt] if can_decrypt(attwrap(tem(v)), attunwrap(tem(v)), attenc(tem(v)), attdec(tem(v)), attsens(tem(v)), attextr(tem(v)), atttrus(tem(v)), attwwt(tem(v)), attwt(tem(v)), attut(tem(v))), 1 
 [State_111111112111(~lock8, L_h, k, m, v)] --[Pred_not_can_decrypt(attwrap(tem(v)), attunwrap(tem(v)), attenc(tem(v)), attdec(tem(v)), attsens(tem(v)), attextr(tem(v)), atttrus(tem(v)), attwwt(tem(v)), attwt(tem(v)), attut(tem(v)))]-> [State_1111111121112(~lock8, L_h, k, m, v)]

rule if_eqkeyv_k_0_1111111121111 [color=#2CD719]: // [process=decrypt] if eq(key(v), k), 0 
 [State_1111111121111(~lock8, L_h, k, m, v)] --[Pred_eq(key(v), k)]-> [State_11111111211111(~lock8, L_h, k, m, v)]

rule if_eqkeyv_k_1_1111111121111 [color=#2CD719]: // [process=decrypt] if eq(key(v), k), 1 
 [State_1111111121111(~lock8, L_h, k, m, v)] --[Pred_not_eq(key(v), k)]-> [State_11111111211112(~lock8, L_h, k, m, v)]

rule event_DecUsingk_m_11111111211111 [color=#2CD719]: // [process=decrypt] event DecUsing(k, m) 
 [State_11111111211111(~lock8, L_h, k, m, v)] --[Event(), DecUsing(k, m)]-> [State_111111112111111(~lock8, L_h, k, m, v)]

rule out_m_111111112111111 [color=#2CD719]: // [process=decrypt] out m 
 [State_111111112111111(~lock8, L_h, k, m, v)] --[]-> [State_1111111121111111(~lock8, L_h, k, m, v), Out(m)]

rule unlock_device__1111111121111111 [color=#2CD719]: // [process=decrypt] unlock 'device' 
 [State_1111111121111111(~lock8, L_h, k, m, v)] --[Unlock($8, ~lock8, 'device'), Unlock_8($8, ~lock8, 'device')]-> [State_11111111211111111(~lock8, L_h, k, m, v)]

rule Zero_11111111211111111 [color=#2CD719]: // [process=decrypt] Zero 
 [State_11111111211111111(~lock8, L_h, k, m, v)] --[]-> []

rule Zero_11111111211112 [color=#2CD719]: // [process=decrypt] Zero 
 [State_11111111211112(~lock8, L_h, k, m, v)] --[]-> []

rule Zero_1111111121112 [color=#2CD719]: // [process=decrypt] Zero 
 [State_1111111121112(~lock8, L_h, k, m, v)] --[]-> []

rule Zero_111111112112 [color=#2CD719]: // [process=decrypt] Zero 
 [State_111111112112(~lock8, L_h, k, m)] --[]-> []

rule in_L_h_m__11111112 [color=#11EC28]: // [process=encrypt] in <L_h, m> 
 [State_11111112(), In(<L_h, m>)] --[]-> [State_111111121(L_h, m)]

rule lock_device__111111121 [color=#11EC28]: // [process=encrypt] lock 'device' 
 [State_111111121(L_h, m), Fr(~lock7)] --[Lock($7, ~lock7, 'device'), Lock_7($7, ~lock7, 'device')]-> [State_1111111211(~lock7, L_h, m)]

rule lookup_obj_L_h_as_v_0_1111111211 [color=#11EC28]: // [process=encrypt] lookup <'obj', L_h> as v, 0 
 [State_1111111211(~lock7, L_h, m)] --[IsIn(<'obj', L_h>, v)]-> [State_11111112111(~lock7, L_h, m, v)]

rule lookup_obj_L_h_as_v_1_1111111211 [color=#11EC28]: // [process=encrypt] lookup <'obj', L_h> as v, 1 
 [State_1111111211(~lock7, L_h, m)] --[IsNotSet(<'obj', L_h>)]-> [State_11111112112(~lock7, L_h, m)]

rule if_can_encryptattwraptemv_attunwraptemv_attenctemv_attdectemv_attsenstemv_attextrtemv_atttrustemv_attwwttemv_attwttemv_attuttemv_0_11111112111 [color=#11EC28]: // [process=encrypt] if can_encrypt(attwrap(tem(v)), attunwrap(tem(v)), attenc(tem(v)), attdec(tem(v)), attsens(tem(v)), attextr(tem(v)), atttrus(tem(v)), attwwt(tem(v)), attwt(tem(v)), attut(tem(v))), 0 
 [State_11111112111(~lock7, L_h, m, v)] --[Pred_can_encrypt(attwrap(tem(v)), attunwrap(tem(v)), attenc(tem(v)), attdec(tem(v)), attsens(tem(v)), attextr(tem(v)), atttrus(tem(v)), attwwt(tem(v)), attwt(tem(v)), attut(tem(v)))]-> [State_111111121111(~lock7, L_h, m, v)]

rule if_can_encryptattwraptemv_attunwraptemv_attenctemv_attdectemv_attsenstemv_attextrtemv_atttrustemv_attwwttemv_attwttemv_attuttemv_1_11111112111 [color=#11EC28]: // [process=encrypt] if can_encrypt(attwrap(tem(v)), attunwrap(tem(v)), attenc(tem(v)), attdec(tem(v)), attsens(tem(v)), attextr(tem(v)), atttrus(tem(v)), attwwt(tem(v)), attwt(tem(v)), attut(tem(v))), 1 
 [State_11111112111(~lock7, L_h, m, v)] --[Pred_not_can_encrypt(attwrap(tem(v)), attunwrap(tem(v)), attenc(tem(v)), attdec(tem(v)), attsens(tem(v)), attextr(tem(v)), atttrus(tem(v)), attwwt(tem(v)), attwt(tem(v)), attut(tem(v)))]-> [State_111111121112(~lock7, L_h, m, v)]

rule event_EncUsingkeyv_m_111111121111 [color=#11EC28]: // [process=encrypt] event EncUsing(key(v), m) 
 [State_111111121111(~lock7, L_h, m, v)] --[Event(), EncUsing(key(v), m)]-> [State_1111111211111(~lock7, L_h, m, v)]

rule out_sencm_keyv_1111111211111 [color=#11EC28]: // [process=encrypt] out senc(m, key(v)) 
 [State_1111111211111(~lock7, L_h, m, v)] --[]-> [State_11111112111111(~lock7, L_h, m, v), Out(senc(m, key(v)))]

rule unlock_device__11111112111111 [color=#11EC28]: // [process=encrypt] unlock 'device' 
 [State_11111112111111(~lock7, L_h, m, v)] --[Unlock($7, ~lock7, 'device'), Unlock_7($7, ~lock7, 'device')]-> [State_111111121111111(~lock7, L_h, m, v)]

rule Zero_111111121111111 [color=#11EC28]: // [process=encrypt] Zero 
 [State_111111121111111(~lock7, L_h, m, v)] --[]-> []

rule Zero_111111121112 [color=#11EC28]: // [process=encrypt] Zero 
 [State_111111121112(~lock7, L_h, m, v)] --[]-> []

rule Zero_11111112112 [color=#11EC28]: // [process=encrypt] Zero 
 [State_11111112112(~lock7, L_h, m)] --[]-> []

rule in_h1_h2__1111112 [color=#45D1E2]: // [process=wrap] in <h1, h2> 
 [State_1111112(), In(<h1, h2>)] --[]-> [State_11111121(h1, h2)]

rule lock_device__11111121 [color=#45D1E2]: // [process=wrap] lock 'device' 
 [State_11111121(h1, h2), Fr(~lock10)] --[Lock($10, ~lock10, 'device'), Lock_10($10, ~lock10, 'device')]-> [State_111111211(~lock10, h1, h2)]

rule lookup_obj_h1_as_v1_0_111111211 [color=#45D1E2]: // [process=wrap] lookup <'obj', h1> as v1, 0 
 [State_111111211(~lock10, h1, h2)] --[IsIn(<'obj', h1>, v1)]-> [State_1111112111(~lock10, h1, h2, v1)]

rule lookup_obj_h1_as_v1_1_111111211 [color=#45D1E2]: // [process=wrap] lookup <'obj', h1> as v1, 1 
 [State_111111211(~lock10, h1, h2)] --[IsNotSet(<'obj', h1>)]-> [State_1111112112(~lock10, h1, h2)]

rule lookup_obj_h2_as_v2_0_1111112111 [color=#45D1E2]: // [process=wrap] lookup <'obj', h2> as v2, 0 
 [State_1111112111(~lock10, h1, h2, v1)] --[IsIn(<'obj', h2>, v2)]-> [State_11111121111(~lock10, h1, h2, v1, v2)]

rule lookup_obj_h2_as_v2_1_1111112111 [color=#45D1E2]: // [process=wrap] lookup <'obj', h2> as v2, 1 
 [State_1111112111(~lock10, h1, h2, v1)] --[IsNotSet(<'obj', h2>)]-> [State_11111121112(~lock10, h1, h2, v1)]

rule if_can_wrapattwraptemv1_attunwraptemv1_attenctemv1_attdectemv1_attsenstemv1_attextrtemv1_atttrustemv1_attwwttemv1_attwttemv1_attuttemv1_attwraptemv2_attunwraptemv2_attenctemv2_attdectemv2_attsenstemv2_attextrtemv2_atttrustemv2_attwwttemv2_attwttemv2_attuttemv2_0_11111121111 [color=#45D1E2]: // [process=wrap] if can_wrap(attwrap(tem(v1)), attunwrap(tem(v1)), attenc(tem(v1)), attdec(tem(v1)), attsens(tem(v1)), attextr(tem(v1)), atttrus(tem(v1)), attwwt(tem(v1)), attwt(tem(v1)), attut(tem(v1)), attwrap(tem(v2)), attunwrap(tem(v2)), attenc(tem(v2)), attdec(tem(v2)), attsens(tem(v2)), attextr(tem(v2)), atttrus(tem(v2)), attwwt(tem(v2)), attwt(tem(v2)), attut(tem(v2))), 0 
 [State_11111121111(~lock10, h1, h2, v1, v2)] --[Pred_can_wrap(attwrap(tem(v1)), attunwrap(tem(v1)), attenc(tem(v1)), attdec(tem(v1)), attsens(tem(v1)), attextr(tem(v1)), atttrus(tem(v1)), attwwt(tem(v1)), attwt(tem(v1)), attut(tem(v1)), attwrap(tem(v2)), attunwrap(tem(v2)), attenc(tem(v2)), attdec(tem(v2)), attsens(tem(v2)), attextr(tem(v2)), atttrus(tem(v2)), attwwt(tem(v2)), attwt(tem(v2)), attut(tem(v2)))]-> [State_111111211111(~lock10, h1, h2, v1, v2)]

rule if_can_wrapattwraptemv1_attunwraptemv1_attenctemv1_attdectemv1_attsenstemv1_attextrtemv1_atttrustemv1_attwwttemv1_attwttemv1_attuttemv1_attwraptemv2_attunwraptemv2_attenctemv2_attdectemv2_attsenstemv2_attextrtemv2_atttrustemv2_attwwttemv2_attwttemv2_attuttemv2_1_11111121111 [color=#45D1E2]: // [process=wrap] if can_wrap(attwrap(tem(v1)), attunwrap(tem(v1)), attenc(tem(v1)), attdec(tem(v1)), attsens(tem(v1)), attextr(tem(v1)), atttrus(tem(v1)), attwwt(tem(v1)), attwt(tem(v1)), attut(tem(v1)), attwrap(tem(v2)), attunwrap(tem(v2)), attenc(tem(v2)), attdec(tem(v2)), attsens(tem(v2)), attextr(tem(v2)), atttrus(tem(v2)), attwwt(tem(v2)), attwt(tem(v2)), attut(tem(v2))), 1 
 [State_11111121111(~lock10, h1, h2, v1, v2)] --[Pred_not_can_wrap(attwrap(tem(v1)), attunwrap(tem(v1)), attenc(tem(v1)), attdec(tem(v1)), attsens(tem(v1)), attextr(tem(v1)), atttrus(tem(v1)), attwwt(tem(v1)), attwt(tem(v1)), attut(tem(v1)), attwrap(tem(v2)), attunwrap(tem(v2)), attenc(tem(v2)), attdec(tem(v2)), attsens(tem(v2)), attextr(tem(v2)), atttrus(tem(v2)), attwwt(tem(v2)), attwt(tem(v2)), attut(tem(v2)))]-> [State_111111211112(~lock10, h1, h2, v1, v2)]

rule lookup_F_template_attwttemv1_as_wt_0_111111211111 [color=#45D1E2]: // [process=wrap] lookup <'F_template', attwt(tem(v1))> as wt, 0 
 [State_111111211111(~lock10, h1, h2, v1, v2)] --[IsIn(<'F_template', attwt(tem(v1))>, wt)]-> [State_1111112111111(~lock10, h1, h2, v1, v2, wt)]

rule lookup_F_template_attwttemv1_as_wt_1_111111211111 [color=#45D1E2]: // [process=wrap] lookup <'F_template', attwt(tem(v1))> as wt, 1 
 [State_111111211111(~lock10, h1, h2, v1, v2)] --[IsNotSet(<'F_template', attwt(tem(v1))>)]-> [State_1111112111112(~lock10, h1, h2, v1, v2)]

rule if_permitsattwrapwt_attunwrapwt_attencwt_attdecwt_attsenswt_attextrwt_atttruswt_attwwtwt_attwtwt_attutwt_attwraptemv2_attunwraptemv2_attenctemv2_attdectemv2_attsenstemv2_attextrtemv2_atttrustemv2_attwwttemv2_attwttemv2_attuttemv2_0_1111112111111 [color=#45D1E2]: // [process=wrap] if permits(attwrap(wt), attunwrap(wt), attenc(wt), attdec(wt), attsens(wt), attextr(wt), atttrus(wt), attwwt(wt), attwt(wt), attut(wt), attwrap(tem(v2)), attunwrap(tem(v2)), attenc(tem(v2)), attdec(tem(v2)), attsens(tem(v2)), attextr(tem(v2)), atttrus(tem(v2)), attwwt(tem(v2)), attwt(tem(v2)), attut(tem(v2))), 0 
 [State_1111112111111(~lock10, h1, h2, v1, v2, wt)] --[Pred_permits(attwrap(wt), attunwrap(wt), attenc(wt), attdec(wt), attsens(wt), attextr(wt), atttrus(wt), attwwt(wt), attwt(wt), attut(wt), attwrap(tem(v2)), attunwrap(tem(v2)), attenc(tem(v2)), attdec(tem(v2)), attsens(tem(v2)), attextr(tem(v2)), atttrus(tem(v2)), attwwt(tem(v2)), attwt(tem(v2)), attut(tem(v2)))]-> [State_11111121111111(~lock10, h1, h2, v1, v2, wt)]

rule if_permitsattwrapwt_attunwrapwt_attencwt_attdecwt_attsenswt_attextrwt_atttruswt_attwwtwt_attwtwt_attutwt_attwraptemv2_attunwraptemv2_attenctemv2_attdectemv2_attsenstemv2_attextrtemv2_atttrustemv2_attwwttemv2_attwttemv2_attuttemv2_1_1111112111111 [color=#45D1E2]: // [process=wrap] if permits(attwrap(wt), attunwrap(wt), attenc(wt), attdec(wt), attsens(wt), attextr(wt), atttrus(wt), attwwt(wt), attwt(wt), attut(wt), attwrap(tem(v2)), attunwrap(tem(v2)), attenc(tem(v2)), attdec(tem(v2)), attsens(tem(v2)), attextr(tem(v2)), atttrus(tem(v2)), attwwt(tem(v2)), attwt(tem(v2)), attut(tem(v2))), 1 
 [State_1111112111111(~lock10, h1, h2, v1, v2, wt)] --[Pred_not_permits(attwrap(wt), attunwrap(wt), attenc(wt), attdec(wt), attsens(wt), attextr(wt), atttrus(wt), attwwt(wt), attwt(wt), attut(wt), attwrap(tem(v2)), attunwrap(tem(v2)), attenc(tem(v2)), attdec(tem(v2)), attsens(tem(v2)), attextr(tem(v2)), atttrus(tem(v2)), attwwt(tem(v2)), attwt(tem(v2)), attut(tem(v2)))]-> [State_11111121111112(~lock10, h1, h2, v1, v2, wt)]

rule event_Wrapkeyv1_keyv2_11111121111111 [color=#45D1E2]: // [process=wrap] event Wrap(key(v1), key(v2)) 
 [State_11111121111111(~lock10, h1, h2, v1, v2, wt)] --[Event(), Wrap(key(v1), key(v2))]-> [State_111111211111111(~lock10, h1, h2, v1, v2, wt)]

rule out_senckeyv2_keyv1_111111211111111 [color=#45D1E2]: // [process=wrap] out senc(key(v2), key(v1)) 
 [State_111111211111111(~lock10, h1, h2, v1, v2, wt)] --[]-> [State_1111112111111111(~lock10, h1, h2, v1, v2, wt), Out(senc(key(v2), key(v1)))]

rule unlock_device__1111112111111111 [color=#45D1E2]: // [process=wrap] unlock 'device' 
 [State_1111112111111111(~lock10, h1, h2, v1, v2, wt)] --[Unlock($10, ~lock10, 'device'), Unlock_10($10, ~lock10, 'device')]-> [State_11111121111111111(~lock10, h1, h2, v1, v2, wt)]

rule Zero_11111121111111111 [color=#45D1E2]: // [process=wrap] Zero 
 [State_11111121111111111(~lock10, h1, h2, v1, v2, wt)] --[]-> []

rule Zero_11111121111112 [color=#45D1E2]: // [process=wrap] Zero 
 [State_11111121111112(~lock10, h1, h2, v1, v2, wt)] --[]-> []

rule Zero_1111112111112 [color=#45D1E2]: // [process=wrap] Zero 
 [State_1111112111112(~lock10, h1, h2, v1, v2)] --[]-> []

rule Zero_111111211112 [color=#45D1E2]: // [process=wrap] Zero 
 [State_111111211112(~lock10, h1, h2, v1, v2)] --[]-> []

rule Zero_11111121112 [color=#45D1E2]: // [process=wrap] Zero 
 [State_11111121112(~lock10, h1, h2, v1)] --[]-> []

rule Zero_1111112112 [color=#45D1E2]: // [process=wrap] Zero 
 [State_1111112112(~lock10, h1, h2)] --[]-> []

rule in_L_h_sencm_k_atts__111112 [color=#9F76CD]: // [process=unwrap] in <L_h, senc(m, k), atts> 
 [State_111112(), In(<L_h, senc(m, k), atts>)] --[]-> [State_1111121(L_h, atts, k, m)]

rule lock_device__1111121 [color=#9F76CD]: // [process=unwrap] lock 'device' 
 [State_1111121(L_h, atts, k, m), Fr(~lock16)] --[Lock($16, ~lock16, 'device'), Lock_16($16, ~lock16, 'device')]-> [State_11111211(~lock16, L_h, atts, k, m)]

rule lookup_obj_L_h_as_v_0_11111211 [color=#9F76CD]: // [process=unwrap] lookup <'obj', L_h> as v, 0 
 [State_11111211(~lock16, L_h, atts, k, m)] --[IsIn(<'obj', L_h>, v)]-> [State_111112111(~lock16, L_h, atts, k, m, v)]

rule lookup_obj_L_h_as_v_1_11111211 [color=#9F76CD]: // [process=unwrap] lookup <'obj', L_h> as v, 1 
 [State_11111211(~lock16, L_h, atts, k, m)] --[IsNotSet(<'obj', L_h>)]-> [State_111112112(~lock16, L_h, atts, k, m)]

rule if_can_unwrapattwraptemv_attunwraptemv_attenctemv_attdectemv_attsenstemv_attextrtemv_atttrustemv_attwwttemv_attwttemv_attuttemv_0_111112111 [color=#9F76CD]: // [process=unwrap] if can_unwrap(attwrap(tem(v)), attunwrap(tem(v)), attenc(tem(v)), attdec(tem(v)), attsens(tem(v)), attextr(tem(v)), atttrus(tem(v)), attwwt(tem(v)), attwt(tem(v)), attut(tem(v))), 0 
 [State_111112111(~lock16, L_h, atts, k, m, v)] --[Pred_can_unwrap(attwrap(tem(v)), attunwrap(tem(v)), attenc(tem(v)), attdec(tem(v)), attsens(tem(v)), attextr(tem(v)), atttrus(tem(v)), attwwt(tem(v)), attwt(tem(v)), attut(tem(v)))]-> [State_1111121111(~lock16, L_h, atts, k, m, v)]

rule if_can_unwrapattwraptemv_attunwraptemv_attenctemv_attdectemv_attsenstemv_attextrtemv_atttrustemv_attwwttemv_attwttemv_attuttemv_1_111112111 [color=#9F76CD]: // [process=unwrap] if can_unwrap(attwrap(tem(v)), attunwrap(tem(v)), attenc(tem(v)), attdec(tem(v)), attsens(tem(v)), attextr(tem(v)), atttrus(tem(v)), attwwt(tem(v)), attwt(tem(v)), attut(tem(v))), 1 
 [State_111112111(~lock16, L_h, atts, k, m, v)] --[Pred_not_can_unwrap(attwrap(tem(v)), attunwrap(tem(v)), attenc(tem(v)), attdec(tem(v)), attsens(tem(v)), attextr(tem(v)), atttrus(tem(v)), attwwt(tem(v)), attwt(tem(v)), attut(tem(v)))]-> [State_1111121112(~lock16, L_h, atts, k, m, v)]

rule if_eqkeyv_k_0_1111121111 [color=#9F76CD]: // [process=unwrap] if eq(key(v), k), 0 
 [State_1111121111(~lock16, L_h, atts, k, m, v)] --[Pred_eq(key(v), k)]-> [State_11111211111(~lock16, L_h, atts, k, m, v)]

rule if_eqkeyv_k_1_1111121111 [color=#9F76CD]: // [process=unwrap] if eq(key(v), k), 1 
 [State_1111121111(~lock16, L_h, atts, k, m, v)] --[Pred_not_eq(key(v), k)]-> [State_11111211112(~lock16, L_h, atts, k, m, v)]

rule lookup_F_template_attuttemv_as_ut_0_11111211111 [color=#9F76CD]: // [process=unwrap] lookup <'F_template', attut(tem(v))> as ut, 0 
 [State_11111211111(~lock16, L_h, atts, k, m, v)] --[IsIn(<'F_template', attut(tem(v))>, ut)]-> [State_111112111111(~lock16, L_h, atts, k, m, ut, v)]

rule lookup_F_template_attuttemv_as_ut_1_11111211111 [color=#9F76CD]: // [process=unwrap] lookup <'F_template', attut(tem(v))> as ut, 1 
 [State_11111211111(~lock16, L_h, atts, k, m, v)] --[IsNotSet(<'F_template', attut(tem(v))>)]-> [State_111112111112(~lock16, L_h, atts, k, m, v)]

rule if_permitsattwraput_attunwraput_attencut_attdecut_attsensut_attextrut_atttrusut_attwwtut_attwtut_attutut_attwrapatts_attunwrapatts_attencatts_attdecatts_attsensatts_attextratts_atttrusatts_attwwtatts_attwtatts_attutatts_0_111112111111 [color=#9F76CD]: // [process=unwrap] if permits(attwrap(ut), attunwrap(ut), attenc(ut), attdec(ut), attsens(ut), attextr(ut), atttrus(ut), attwwt(ut), attwt(ut), attut(ut), attwrap(atts), attunwrap(atts), attenc(atts), attdec(atts), attsens(atts), attextr(atts), atttrus(atts), attwwt(atts), attwt(atts), attut(atts)), 0 
 [State_111112111111(~lock16, L_h, atts, k, m, ut, v)] --[Pred_permits(attwrap(ut), attunwrap(ut), attenc(ut), attdec(ut), attsens(ut), attextr(ut), atttrus(ut), attwwt(ut), attwt(ut), attut(ut), attwrap(atts), attunwrap(atts), attenc(atts), attdec(atts), attsens(atts), attextr(atts), atttrus(atts), attwwt(atts), attwt(atts), attut(atts))]-> [State_1111121111111(~lock16, L_h, atts, k, m, ut, v)]

rule if_permitsattwraput_attunwraput_attencut_attdecut_attsensut_attextrut_atttrusut_attwwtut_attwtut_attutut_attwrapatts_attunwrapatts_attencatts_attdecatts_attsensatts_attextratts_atttrusatts_attwwtatts_attwtatts_attutatts_1_111112111111 [color=#9F76CD]: // [process=unwrap] if permits(attwrap(ut), attunwrap(ut), attenc(ut), attdec(ut), attsens(ut), attextr(ut), atttrus(ut), attwwt(ut), attwt(ut), attut(ut), attwrap(atts), attunwrap(atts), attenc(atts), attdec(atts), attsens(atts), attextr(atts), atttrus(atts), attwwt(atts), attwt(atts), attut(atts)), 1 
 [State_111112111111(~lock16, L_h, atts, k, m, ut, v)] --[Pred_not_permits(attwrap(ut), attunwrap(ut), attenc(ut), attdec(ut), attsens(ut), attextr(ut), atttrus(ut), attwwt(ut), attwt(ut), attut(ut), attwrap(atts), attunwrap(atts), attenc(atts), attdec(atts), attsens(atts), attextr(atts), atttrus(atts), attwwt(atts), attwt(atts), attut(atts))]-> [State_1111121111112(~lock16, L_h, atts, k, m, ut, v)]

rule new_h2_1111121111111 [color=#9F76CD]: // [process=unwrap] new h2 
 [State_1111121111111(~lock16, L_h, atts, k, m, ut, v), Fr(h2)] --[]-> [State_11111211111111(~lock16, L_h, atts, h2, k, m, ut, v)]

rule insert_obj_h2_m_atts__11111211111111 [color=#9F76CD]: // [process=unwrap] insert <'obj', h2>,<m, atts> 
 [State_11111211111111(~lock16, L_h, atts, h2, k, m, ut, v)] --[Insert(<'obj', h2>, <m, atts>)]-> [State_111112111111111(~lock16, L_h, atts, h2, k, m, ut, v)]

rule event_Unwrappedh2_m_atts_111112111111111 [color=#9F76CD]: // [process=unwrap] event Unwrapped(h2, m, atts) 
 [State_111112111111111(~lock16, L_h, atts, h2, k, m, ut, v)] --[Event(), Unwrapped(h2, m, atts)]-> [State_1111121111111111(~lock16, L_h, atts, h2, k, m, ut, v)]

rule event_WrapKeyh2_m_attwrapatts_1111121111111111 [color=#9F76CD]: // [process=unwrap] event WrapKey(h2, m, attwrap(atts)) 
 [State_1111121111111111(~lock16, L_h, atts, h2, k, m, ut, v)] --[Event(), WrapKey(h2, m, attwrap(atts))]-> [State_11111211111111111(~lock16, L_h, atts, h2, k, m, ut, v)]

rule event_DecKeyh2_m_attdecatts_11111211111111111 [color=#9F76CD]: // [process=unwrap] event DecKey(h2, m, attdec(atts)) 
 [State_11111211111111111(~lock16, L_h, atts, h2, k, m, ut, v)] --[Event(), DecKey(h2, m, attdec(atts))]-> [State_111112111111111111(~lock16, L_h, atts, h2, k, m, ut, v)]

rule event_EncKeyh2_m_attencatts_111112111111111111 [color=#9F76CD]: // [process=unwrap] event EncKey(h2, m, attenc(atts)) 
 [State_111112111111111111(~lock16, L_h, atts, h2, k, m, ut, v)] --[Event(), EncKey(h2, m, attenc(atts))]-> [State_1111121111111111111(~lock16, L_h, atts, h2, k, m, ut, v)]

rule event_UnwrapKeyh2_m_attunwrapatts_1111121111111111111 [color=#9F76CD]: // [process=unwrap] event UnwrapKey(h2, m, attunwrap(atts)) 
 [State_1111121111111111111(~lock16, L_h, atts, h2, k, m, ut, v)] --[Event(), UnwrapKey(h2, m, attunwrap(atts))]-> [State_11111211111111111111(~lock16, L_h, atts, h2, k, m, ut, v)]

rule out_h2_11111211111111111111 [color=#9F76CD]: // [process=unwrap] out h2 
 [State_11111211111111111111(~lock16, L_h, atts, h2, k, m, ut, v)] --[]-> [State_111112111111111111111(~lock16, L_h, atts, h2, k, m, ut, v), Out(h2)]

rule unlock_device__111112111111111111111 [color=#9F76CD]: // [process=unwrap] unlock 'device' 
 [State_111112111111111111111(~lock16, L_h, atts, h2, k, m, ut, v)] --[Unlock($16, ~lock16, 'device'), Unlock_16($16, ~lock16, 'device')]-> [State_1111121111111111111111(~lock16, L_h, atts, h2, k, m, ut, v)]

rule Zero_1111121111111111111111 [color=#9F76CD]: // [process=unwrap] Zero 
 [State_1111121111111111111111(~lock16, L_h, atts, h2, k, m, ut, v)] --[]-> []

rule Zero_1111121111112 [color=#9F76CD]: // [process=unwrap] Zero 
 [State_1111121111112(~lock16, L_h, atts, k, m, ut, v)] --[]-> []

rule Zero_111112111112 [color=#9F76CD]: // [process=unwrap] Zero 
 [State_111112111112(~lock16, L_h, atts, k, m, v)] --[]-> []

rule Zero_11111211112 [color=#9F76CD]: // [process=unwrap] Zero 
 [State_11111211112(~lock16, L_h, atts, k, m, v)] --[]-> []

rule Zero_1111121112 [color=#9F76CD]: // [process=unwrap] Zero 
 [State_1111121112(~lock16, L_h, atts, k, m, v)] --[]-> []

rule Zero_111112112 [color=#9F76CD]: // [process=unwrap] Zero 
 [State_111112112(~lock16, L_h, atts, k, m)] --[]-> []

rule in_L_h_11112 [color=#EE415C]: // [process=get_keyvalue] in L_h 
 [State_11112(), In(L_h)] --[]-> [State_111121(L_h)]

rule lock_device__111121 [color=#EE415C]: // [process=get_keyvalue] lock 'device' 
 [State_111121(L_h), Fr(~lock7)] --[Lock($7, ~lock7, 'device'), Lock_7($7, ~lock7, 'device')]-> [State_1111211(~lock7, L_h)]

rule lookup_obj_L_h_as_v_0_1111211 [color=#EE415C]: // [process=get_keyvalue] lookup <'obj', L_h> as v, 0 
 [State_1111211(~lock7, L_h)] --[IsIn(<'obj', L_h>, v)]-> [State_11112111(~lock7, L_h, v)]

rule lookup_obj_L_h_as_v_1_1111211 [color=#EE415C]: // [process=get_keyvalue] lookup <'obj', L_h> as v, 1 
 [State_1111211(~lock7, L_h)] --[IsNotSet(<'obj', L_h>)]-> [State_11112112(~lock7, L_h)]

rule if_can_get_keyvalueattwraptemv_attunwraptemv_attenctemv_attdectemv_attsenstemv_attextrtemv_atttrustemv_attwwttemv_attwttemv_attuttemv_0_11112111 [color=#EE415C]: // [process=get_keyvalue] if can_get_keyvalue(attwrap(tem(v)), attunwrap(tem(v)), attenc(tem(v)), attdec(tem(v)), attsens(tem(v)), attextr(tem(v)), atttrus(tem(v)), attwwt(tem(v)), attwt(tem(v)), attut(tem(v))), 0 
 [State_11112111(~lock7, L_h, v)] --[Pred_can_get_keyvalue(attwrap(tem(v)), attunwrap(tem(v)), attenc(tem(v)), attdec(tem(v)), attsens(tem(v)), attextr(tem(v)), atttrus(tem(v)), attwwt(tem(v)), attwt(tem(v)), attut(tem(v)))]-> [State_111121111(~lock7, L_h, v)]

rule if_can_get_keyvalueattwraptemv_attunwraptemv_attenctemv_attdectemv_attsenstemv_attextrtemv_atttrustemv_attwwttemv_attwttemv_attuttemv_1_11112111 [color=#EE415C]: // [process=get_keyvalue] if can_get_keyvalue(attwrap(tem(v)), attunwrap(tem(v)), attenc(tem(v)), attdec(tem(v)), attsens(tem(v)), attextr(tem(v)), atttrus(tem(v)), attwwt(tem(v)), attwt(tem(v)), attut(tem(v))), 1 
 [State_11112111(~lock7, L_h, v)] --[Pred_not_can_get_keyvalue(attwrap(tem(v)), attunwrap(tem(v)), attenc(tem(v)), attdec(tem(v)), attsens(tem(v)), attextr(tem(v)), atttrus(tem(v)), attwwt(tem(v)), attwt(tem(v)), attut(tem(v)))]-> [State_111121112(~lock7, L_h, v)]

rule event_GetKeyValuekeyv_111121111 [color=#EE415C]: // [process=get_keyvalue] event GetKeyValue(key(v)) 
 [State_111121111(~lock7, L_h, v)] --[Event(), GetKeyValue(key(v))]-> [State_1111211111(~lock7, L_h, v)]

rule out_keyv_1111211111 [color=#EE415C]: // [process=get_keyvalue] out key(v) 
 [State_1111211111(~lock7, L_h, v)] --[]-> [State_11112111111(~lock7, L_h, v), Out(key(v))]

rule unlock_device__11112111111 [color=#EE415C]: // [process=get_keyvalue] unlock 'device' 
 [State_11112111111(~lock7, L_h, v)] --[Unlock($7, ~lock7, 'device'), Unlock_7($7, ~lock7, 'device')]-> [State_111121111111(~lock7, L_h, v)]

rule Zero_111121111111 [color=#EE415C]: // [process=get_keyvalue] Zero 
 [State_111121111111(~lock7, L_h, v)] --[]-> []

rule Zero_111121112 [color=#EE415C]: // [process=get_keyvalue] Zero 
 [State_111121112(~lock7, L_h, v)] --[]-> []

rule Zero_11112112 [color=#EE415C]: // [process=get_keyvalue] Zero 
 [State_11112112(~lock7, L_h)] --[]-> []

 restriction set_in:
"All x y #t3 . IsIn(x,y)@t3 ==>
        (Ex #t2 . Insert(x,y)@t2 & #t2<#t3 
                & ( All #t1 . Delete(x)@t1 ==> (#t1<#t2 |  #t3<#t1))
                & ( All #t1 yp . Insert(x,yp)@t1 ==> (#t1<#t2 | #t1=#t2 | #t3<#t1))
)"

restriction set_notin:
"All x #t3 . IsNotSet(x)@t3 ==> 
        (All #t1 y . Insert(x,y)@t1 ==>  #t3<#t1 )
  | ( Ex #t1 .   Delete(x)@t1 & #t1<#t3 
                &  (All #t2 y . Insert(x,y)@t2 & #t2<#t3 ==>  #t2<#t1))"


restriction predicate_eq:
"All #i a b. Pred_eq(a,b)@i ==> a = b"


restriction predicate_not_eq:
"All #i a b. Pred_not_eq(a,b)@i ==> not(a = b)"


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"

 
 restriction locking_14: 
 "All p pp l x lp #t1 #t3 . Lock_14(p,l,x)@t1 & Lock(pp,lp,x)@t3 
         ==> 
         ( #t1<#t3 
                  & (Ex #t2. Unlock_14(p,l,x)@t2 & #t1<#t2 & #t2<#t3  
                  & (All #t0 pp  . Unlock(pp,l,x)@t0 ==> #t0=#t2) 
                  & (All pp lpp #t0 . Lock(pp,lpp,x)@t0 ==> #t0<#t1 | #t0=#t1 | #t2<#t0) 
                  & (All pp lpp #t0 . Unlock(pp,lpp,x)@t0 ==> #t0<#t1 | #t2<#t0 | #t2=#t0 ) 
                 )) 
         | #t3<#t1 | #t1=#t3 " 

  
 restriction locking_8: 
 "All p pp l x lp #t1 #t3 . Lock_8(p,l,x)@t1 & Lock(pp,lp,x)@t3 
         ==> 
         ( #t1<#t3 
                  & (Ex #t2. Unlock_8(p,l,x)@t2 & #t1<#t2 & #t2<#t3  
                  & (All #t0 pp  . Unlock(pp,l,x)@t0 ==> #t0=#t2) 
                  & (All pp lpp #t0 . Lock(pp,lpp,x)@t0 ==> #t0<#t1 | #t0=#t1 | #t2<#t0) 
                  & (All pp lpp #t0 . Unlock(pp,lpp,x)@t0 ==> #t0<#t1 | #t2<#t0 | #t2=#t0 ) 
                 )) 
         | #t3<#t1 | #t1=#t3 " 

  
 restriction locking_7: 
 "All p pp l x lp #t1 #t3 . Lock_7(p,l,x)@t1 & Lock(pp,lp,x)@t3 
         ==> 
         ( #t1<#t3 
                  & (Ex #t2. Unlock_7(p,l,x)@t2 & #t1<#t2 & #t2<#t3  
                  & (All #t0 pp  . Unlock(pp,l,x)@t0 ==> #t0=#t2) 
                  & (All pp lpp #t0 . Lock(pp,lpp,x)@t0 ==> #t0<#t1 | #t0=#t1 | #t2<#t0) 
                  & (All pp lpp #t0 . Unlock(pp,lpp,x)@t0 ==> #t0<#t1 | #t2<#t0 | #t2=#t0 ) 
                 )) 
         | #t3<#t1 | #t1=#t3 " 

  
 restriction locking_10: 
 "All p pp l x lp #t1 #t3 . Lock_10(p,l,x)@t1 & Lock(pp,lp,x)@t3 
         ==> 
         ( #t1<#t3 
                  & (Ex #t2. Unlock_10(p,l,x)@t2 & #t1<#t2 & #t2<#t3  
                  & (All #t0 pp  . Unlock(pp,l,x)@t0 ==> #t0=#t2) 
                  & (All pp lpp #t0 . Lock(pp,lpp,x)@t0 ==> #t0<#t1 | #t0=#t1 | #t2<#t0) 
                  & (All pp lpp #t0 . Unlock(pp,lpp,x)@t0 ==> #t0<#t1 | #t2<#t0 | #t2=#t0 ) 
                 )) 
         | #t3<#t1 | #t1=#t3 " 

  
 restriction locking_16: 
 "All p pp l x lp #t1 #t3 . Lock_16(p,l,x)@t1 & Lock(pp,lp,x)@t3 
         ==> 
         ( #t1<#t3 
                  & (Ex #t2. Unlock_16(p,l,x)@t2 & #t1<#t2 & #t2<#t3  
                  & (All #t0 pp  . Unlock(pp,l,x)@t0 ==> #t0=#t2) 
                  & (All pp lpp #t0 . Lock(pp,lpp,x)@t0 ==> #t0<#t1 | #t0=#t1 | #t2<#t0) 
                  & (All pp lpp #t0 . Unlock(pp,lpp,x)@t0 ==> #t0<#t1 | #t2<#t0 | #t2=#t0 ) 
                 )) 
         | #t3<#t1 | #t1=#t3 " 

 restriction predicate11:
	"All #i wrap unwrap enc dec sens extr trus wwt wt ut. Pred_not_can_encrypt(wrap,unwrap,enc,dec,sens,extr,trus,wwt,wt,ut)@i ==> not(enc = 'on')"

restriction predicate10:
	"All #i wrap unwrap enc dec sens extr trus wwt wt ut. Pred_can_encrypt(wrap,unwrap,enc,dec,sens,extr,trus,wwt,wt,ut)@i ==> enc = 'on'"

restriction predicate9:
	"All #i wrap unwrap enc dec sens extr trus wwt wt ut. Pred_not_can_decrypt(wrap,unwrap,enc,dec,sens,extr,trus,wwt,wt,ut)@i ==> not(dec = 'on')"

restriction predicate8:
	"All #i wrap unwrap enc dec sens extr trus wwt wt ut. Pred_can_decrypt(wrap,unwrap,enc,dec,sens,extr,trus,wwt,wt,ut)@i ==> dec = 'on'"

restriction predicate7:
	"All #i wrap1 unwrap1 enc1 dec1 sens1 extr1 trus1 wwt1 wt1 ut1 wrap2 unwrap2 enc2 dec2 sens2 extr2 trus2 wwt2 wt2 ut2. Pred_not_can_wrap(wrap1,unwrap1,enc1,dec1,sens1,extr1,trus1,wwt1,wt1,ut1,wrap2,unwrap2,enc2,dec2,sens2,extr2,trus2,wwt2,wt2,ut2)@i ==> not(((wrap1 = 'on' & extr2 = 'on') & (wwt2 = 'off' | (wwt2 = 'on' & trus1 = 'on'))))"

restriction predicate6:
	"All #i wrap1 unwrap1 enc1 dec1 sens1 extr1 trus1 wwt1 wt1 ut1 wrap2 unwrap2 enc2 dec2 sens2 extr2 trus2 wwt2 wt2 ut2. Pred_can_wrap(wrap1,unwrap1,enc1,dec1,sens1,extr1,trus1,wwt1,wt1,ut1,wrap2,unwrap2,enc2,dec2,sens2,extr2,trus2,wwt2,wt2,ut2)@i ==> ((wrap1 = 'on' & extr2 = 'on') & (wwt2 = 'off' | (wwt2 = 'on' & trus1 = 'on')))"

restriction predicate5:
	"All #i wrap unwrap enc dec sens extr trus wwt wt ut. Pred_not_can_unwrap(wrap,unwrap,enc,dec,sens,extr,trus,wwt,wt,ut)@i ==> not(unwrap = 'on')"

restriction predicate4:
	"All #i wrap unwrap enc dec sens extr trus wwt wt ut. Pred_can_unwrap(wrap,unwrap,enc,dec,sens,extr,trus,wwt,wt,ut)@i ==> unwrap = 'on'"

restriction predicate3:
	"All #i wrap unwrap enc dec sens extr trus wwt wt ut. Pred_not_can_get_keyvalue(wrap,unwrap,enc,dec,sens,extr,trus,wwt,wt,ut)@i ==> not(sens = 'off')"

restriction predicate2:
	"All #i wrap unwrap enc dec sens extr trus wwt wt ut. Pred_can_get_keyvalue(wrap,unwrap,enc,dec,sens,extr,trus,wwt,wt,ut)@i ==> sens = 'off'"

restriction predicate1:
	"All #i t_wrap t_unwrap t_enc t_dec t_sens t_extr t_trus t_wwt t_wt t_ut wrap unwrap enc dec sens extr trus wwt wt ut. Pred_not_permits(t_wrap,t_unwrap,t_enc,t_dec,t_sens,t_extr,t_trus,t_wwt,t_wt,t_ut,wrap,unwrap,enc,dec,sens,extr,trus,wwt,wt,ut)@i ==> not((t_wrap = wrap & (t_unwrap = unwrap & (t_enc = enc & (t_dec = dec & (t_sens = sens & (t_extr = extr & (t_trus = trus & (t_wwt = wwt & (t_wt = wt & t_ut = ut))))))))))"

restriction predicate0:
	"All #i t_wrap t_unwrap t_enc t_dec t_sens t_extr t_trus t_wwt t_wt t_ut wrap unwrap enc dec sens extr trus wwt wt ut. Pred_permits(t_wrap,t_unwrap,t_enc,t_dec,t_sens,t_extr,t_trus,t_wwt,t_wt,t_ut,wrap,unwrap,enc,dec,sens,extr,trus,wwt,wt,ut)@i ==> (t_wrap = wrap & (t_unwrap = unwrap & (t_enc = enc & (t_dec = dec & (t_sens = sens & (t_extr = extr & (t_trus = trus & (t_wwt = wwt & (t_wt = wt & t_ut = ut)))))))))"

lemma dec_limits [sources]:
"	( All k m #t1. DecUsing(k, m) @ t1 ==> ( Ex h2 k2 #t2 #t3. NewKey(h2, k2, 'on') @ t2 & KU(k2) @ t3 & t2 < t1 & t3 < t1 ) | ( Ex h2 #t2 #t3 #t4. NewKey(h2, k, 'off') @ t2 & KU(k) @ t3 & KU(m) @ t4 & t2 < t1 & t3 < t1 & t4 < t1 ) | ( Ex #t2. EncUsing(k, m) @ t2 & t2 < t1 ) | ( Ex h2 k2 #t2 #t3 a. Unwrapped(h2, k2, a) @ t2 & KU(k2) @ t3 & t2 < t1 & t3 < t1 ) | ( Ex #t2 #t3 h1 h2 k2. WrapKey(h2, k2, 'on') @ t2 & DecKey(h1, k2, 'on') @ t3 & t2 < t1 & t3 < t1 ) ) & ( All k #t2. GetKeyValue(k) @ t2 ==> Ex L_h #t1. NewKey(L_h, k, 'off') @ t1 ) & ( not( Ex L_h k wrap unwrap enc dec sens extr trus wwt wt #t. Insert(<'obj', L_h>, <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'untrusted'>) @ t ) ) & ( not( Ex L_h k wrap unwrap enc dec sens extr trus wwt ut #t. Insert(<'obj', L_h>, <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'untrusted', ut>) @ t ) )"

lemma untrusted_as_ut_impossible [reuse]:
"	not( Ex L_h k wrap unwrap enc dec sens extr trus wwt wt #t. Insert(<'obj', L_h>, <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, wt, 'untrusted'>) @ t )"

lemma untrusted_as_wt_impossible [reuse]:
"	not( Ex L_h k wrap unwrap enc dec sens extr trus wwt ut #t. Insert(<'obj', L_h>, <k, wrap, unwrap, enc, dec, sens, extr, trus, wwt, 'untrusted', ut>) @ t )"

lemma bad_keys [reuse, use_induction]:
"	All h2 k #t2 a. Unwrapped(h2, k, a) @ t2 ==> ( Ex h1 #t1. NewKey(h1, k, 'on') @ t1 & t1 < t2 ) | ( Ex L_h k2 #t1 #t0. NewKey(L_h, k2, 'on') @ t0 & KU(k2) @ t1 & t1 < t2 & t0 < t2 ) | ( Ex #t0 #t1 h1 h2 k. WrapKey(h2, k, 'on') @ t0 & DecKey(h1, k, 'on') @ t1 & t0 < t2 & t1 < t2 ) | ( Ex #t0 #t1 h1 h2 k. UnwrapKey(h2, k, 'on') @ t0 & EncKey(h1, k, 'on') @ t1 & t0 < t2 & t1 < t2 )"

lemma no_key_is_wrap_and_dec__or_unwrap_and_dec_ind [use_induction, reuse]:
"	( All #t2 #t3 h1 h2 k. ( DecKey(h1, k, 'on') @ t2 & WrapKey(h2, k, 'on') @ t3 ) ==> ( Ex L_h k2 #t1 #t0. NewKey(L_h, k2, 'on') @ t0 & KU(k2) @ t1 & ( ( t1 < t3 & t0 < t3 ) | ( t1 < t2 & t0 < t2 ) ) ) | ( Ex #t0 #t1 h1 h2 k. UnwrapKey(h2, k, 'on') @ t0 & EncKey(h1, k, 'on') @ t1 & ( ( t0 < t2 & t1 < t2 ) | ( t0 < t3 & t1 < t3 ) ) ) )"

lemma no_key_is_enc_and_unwrap [use_induction, reuse]:
"	( All #t2 #t3 h1 h2 k. ( EncKey(h1, k, 'on') @ t2 & UnwrapKey(h2, k, 'on') @ t3 ) ==> ( Ex L_h k2 #t1 #t0. NewKey(L_h, k2, 'on') @ t0 & KU(k2) @ t1 & ( ( t1 < t3 & t0 < t3 ) | ( t1 < t2 & t0 < t2 ) ) ) )"

lemma cannot_obtain_key_ind [reuse, use_induction]:
"	not( Ex #i #j L_h k. NewKey(L_h, k, 'on') @ i & KU(k) @ j )"

lemma cannot_obtain_key :
"	not( Ex #i #j L_h k. NewKey(L_h, k, 'on') @ i & K(k) @ j )"

end
