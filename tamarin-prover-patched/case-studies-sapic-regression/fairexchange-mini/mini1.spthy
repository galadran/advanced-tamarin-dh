theory mini1
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m
section{* small example for progression function *}

builtins: signing, hashing

heuristic: l /* heuristic for SAPIC in liveness mode, i.e., with progress) */ 

rule Init_: // [process=top-level] Init 
 [Fr(~prog_)] --[Init(), ProgressFrom_(~prog_)]-> [State_(~prog_)]

rule MessageID_rule_: // [process=top-level] MessageID-rule 
 [Fr(~x)] --[]-> [MID_Sender(~x), MID_Receiver(~x)]

rule in_r_m_1: // [process=top-level] in 'r',m 
 [State_(~prog_), In(m), MID_Receiver(mid_1)] --[Receive(mid_1,m)]-> [State_11(~prog_, m)]

rule event_A_11: // [process=top-level] event A() 
 [State_11(~prog_, m)] --[ProgressTo_111(~prog_), Event(), A()]-> [State_111(~prog_, m)]

rule Zero_111: // [process=top-level] Zero 
 [State_111(~prog_, m)] --[]-> []

rule new_n_2: // [process=top-level] new n 
 [State_(~prog_), Fr(n)] --[]-> [State_21(~prog_, n)]

rule out_r_n_21: // [process=top-level] out 'r',n 
 [MID_Sender(mid_21), State_21(~prog_, n)] --[Send(mid_21,n)]-> [Out(n), State_211(~prog_, n)]

rule event_B_211: // [process=top-level] event B() 
 [State_211(~prog_, n)] --[ProgressTo_2111(~prog_), Event(), B()]-> [State_2111(~prog_, n)]

rule Zero_2111: // [process=top-level] Zero 
 [State_2111(~prog_, n)] --[]-> []


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"


restriction progress__to_111_or_2111:
    "All p #t1. ProgressFrom_(p )@t1 ==> 
       (Ex #t2. ProgressTo_111(p )@t2)
	 | (Ex #t2. ProgressTo_2111(p )@t2)
    "


restriction progress_init:
    " Ex #t. Init()@t "

restriction resilient: 
    "All #i x y. Send(x,y)@i ==> Ex #j. Receive(x,y)@j & #i<#j "

lemma A_possible : exists-trace
"	Ex #t. A() @ t"

lemma B_impossible :
"	not( Ex #t. B() @ t )"

end
