theory mini5
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m
section{* small example for progression function *}

builtins: signing, hashing

heuristic: l /* heuristic for SAPIC in liveness mode, i.e., with progress) */ 

rule Init_: // [process=top-level] Init 
 [Fr(~prog_)] --[Init(), ProgressFrom_(~prog_)]-> [State_(~prog_)]

rule MessageID_rule_: // [process=top-level] MessageID-rule 
 [Fr(~x)] --[]-> [MID_Sender(~x), MID_Receiver(~x)]

rule new_s_: // [process=top-level] new s 
 [State_(~prog_), Fr(s)] --[]-> [State_1(~prog_, s)]

rule Par_1: // [process=top-level] Par 
 [State_1(~prog_, s)] --[]-> [State_11(~prog_, s), State_12(~prog_, s)]

rule insert_s_HELLO__11: // [process=top-level] insert s,'HELLO' 
 [State_11(~prog_, s)] --[ProgressTo_111(~prog_), Insert(s, 'HELLO')]-> [State_111(~prog_, s)]

rule Zero_111: // [process=top-level] Zero 
 [State_111(~prog_, s)] --[]-> []

rule lookup_s_as_x_0_12: // [process=top-level] lookup s as x, 0 
 [State_12(~prog_, s)] --[IsIn(s, x)]-> [State_121(~prog_, s, x)]

rule lookup_s_as_x_1_12: // [process=top-level] lookup s as x, 1 
 [State_12(~prog_, s)] --[IsNotSet(s)]-> [State_122(~prog_, s)]

rule if_eqx_HELLO__0_121: // [process=top-level] if eq(x, 'HELLO'), 0 
 [State_121(~prog_, s, x)] --[Pred_eq(x, 'HELLO')]-> [State_1211(~prog_, s, x)]

rule if_eqx_HELLO__1_121: // [process=top-level] if eq(x, 'HELLO'), 1 
 [State_121(~prog_, s, x)] --[Pred_not_eq(x, 'HELLO')]-> [State_1212(~prog_, s, x)]

rule event_A_1211: // [process=top-level] event A() 
 [State_1211(~prog_, s, x)] --[ProgressTo_12111(~prog_), Event(), A()]-> [State_12111(~prog_, s, x)]

rule Zero_12111: // [process=top-level] Zero 
 [State_12111(~prog_, s, x)] --[]-> []

rule event_B_1212: // [process=top-level] event B() 
 [State_1212(~prog_, s, x)] --[ProgressTo_12121(~prog_), Event(), B()]-> [State_12121(~prog_, s, x)]

rule Zero_12121: // [process=top-level] Zero 
 [State_12121(~prog_, s, x)] --[]-> []

rule event_C_122: // [process=top-level] event C() 
 [State_122(~prog_, s)] --[ProgressTo_1221(~prog_), Event(), C()]-> [State_1221(~prog_, s)]

rule Zero_1221: // [process=top-level] Zero 
 [State_1221(~prog_, s)] --[]-> []

 restriction set_in:
"All x y #t3 . IsIn(x,y)@t3 ==>
        (Ex #t2 . Insert(x,y)@t2 & #t2<#t3 
                & ( All #t1 . Delete(x)@t1 ==> (#t1<#t2 |  #t3<#t1))
                & ( All #t1 yp . Insert(x,yp)@t1 ==> (#t1<#t2 | #t1=#t2 | #t3<#t1))
)"

restriction set_notin:
"All x #t3 . IsNotSet(x)@t3 ==> 
        (All #t1 y . Insert(x,y)@t1 ==>  #t3<#t1 )
  | ( Ex #t1 .   Delete(x)@t1 & #t1<#t3 
                &  (All #t2 y . Insert(x,y)@t2 & #t2<#t3 ==>  #t2<#t1))"


restriction predicate_eq:
"All #i a b. Pred_eq(a,b)@i ==> a = b"


restriction predicate_not_eq:
"All #i a b. Pred_not_eq(a,b)@i ==> not(a = b)"


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"


restriction progress__to_12111_or_12121_or_1221:
    "All p #t1. ProgressFrom_(p )@t1 ==> 
       (Ex #t2. ProgressTo_12111(p )@t2)
	 | (Ex #t2. ProgressTo_12121(p )@t2)
	 | (Ex #t2. ProgressTo_1221(p )@t2)
    "

restriction progress__to_111:
    "All p #t1. ProgressFrom_(p )@t1 ==> 
       (Ex #t2. ProgressTo_111(p )@t2)
    "


restriction progress_init:
    " Ex #t. Init()@t "

restriction resilient: 
    "All #i x y. Send(x,y)@i ==> Ex #j. Receive(x,y)@j & #i<#j "

lemma A_possible : exists-trace
"	Ex #t. A() @ t"

lemma B_impossible :
"	not( Ex #t. B() @ t )"

lemma C_possible : exists-trace
"	Ex #t. C() @ t"

end
