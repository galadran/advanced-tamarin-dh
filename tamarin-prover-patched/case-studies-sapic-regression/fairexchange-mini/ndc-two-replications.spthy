theory NDCTwoReplications
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m
section{* small example for progression function *}

builtins: signing, hashing

heuristic: l /* heuristic for SAPIC in liveness mode, i.e., with progress) */ 

rule Init_: // [process=top-level] Init 
 [] --[Init()]-> [State_()]

rule MessageID_rule_: // [process=top-level] MessageID-rule 
 [Fr(~x)] --[]-> [MID_Sender(~x), MID_Receiver(~x)]

rule Rep_0_1: // [process=top-level] Rep, 0 
 [State_()] --[]-> [!Semistate_11()]

rule Rep_1_1: // [process=top-level] Rep, 1 
 [Fr(~prog_11), !Semistate_11()] --[ProgressFrom_11(~prog_11)]-> [State_11(~prog_11)]

rule event_A_11: // [process=top-level] event A() 
 [State_11(~prog_11)] --[ProgressTo_111(~prog_11), Event(), A()]-> [State_111(~prog_11)]

rule Zero_111: // [process=top-level] Zero 
 [State_111(~prog_11)] --[]-> []

rule Rep_0_2: // [process=top-level] Rep, 0 
 [State_()] --[]-> [!Semistate_21()]

rule Rep_1_2: // [process=top-level] Rep, 1 
 [Fr(~prog_21), !Semistate_21()] --[ProgressFrom_21(~prog_21)]-> [State_21(~prog_21)]

rule event_B_21: // [process=top-level] event B() 
 [State_21(~prog_21)] --[ProgressTo_211(~prog_21), Event(), B()]-> [State_211(~prog_21)]

rule Zero_211: // [process=top-level] Zero 
 [State_211(~prog_21)] --[]-> []


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"


restriction progress_21_to_211:
    "All p #t1. ProgressFrom_21(p )@t1 ==> 
       (Ex #t2. ProgressTo_211(p )@t2)
    "

restriction progress_11_to_111:
    "All p #t1. ProgressFrom_11(p )@t1 ==> 
       (Ex #t2. ProgressTo_111(p )@t2)
    "


restriction progress_init:
    " Ex #t. Init()@t "

restriction resilient: 
    "All #i x y. Send(x,y)@i ==> Ex #j. Receive(x,y)@j & #i<#j "

lemma A_possible : exists-trace
"	Ex #t. A() @ t"

lemma B_possible : exists-trace
"	Ex #t. B() @ t"

lemma no_progress_possible : exists-trace
"	not( Ex #t. A() @ t ) & not( Ex #t. B() @ t )"

lemma A_exclusive :
"	( Ex #t. A() @ t ) ==> not( Ex #t2. B() @ t2 )"

lemma B_exclusive :
"	( Ex #t. B() @ t ) ==> not( Ex #t2. A() @ t2 )"

end
