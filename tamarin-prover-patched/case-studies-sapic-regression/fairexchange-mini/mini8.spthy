theory mini8
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m
section{* small example for progression function *}

builtins: signing, hashing

heuristic: l /* heuristic for SAPIC in liveness mode, i.e., with progress) */ 

rule Init_: // [process=top-level] Init 
 [Fr(~prog_)] --[Init(), ProgressFrom_(~prog_)]-> [State_(~prog_)]

rule MessageID_rule_: // [process=top-level] MessageID-rule 
 [Fr(~x)] --[]-> [MID_Sender(~x), MID_Receiver(~x)]

rule event_A_: // [process=top-level] event A() 
 [State_(~prog_)] --[ProgressTo_1(~prog_), Event(), A()]-> [State_1(~prog_)]

rule in_c_m_1: // [process=top-level] in 'c',m 
 [Fr(~prog_11), State_1(~prog_), In(<'c', m>)] --[ProgressFrom_11(~prog_11), ChannelInEvent(<'c', m>)]-> [State_11(~prog_, ~prog_11, m)]

rule event_B_11: // [process=top-level] event B() 
 [State_11(~prog_, ~prog_11, m)] --[ProgressTo_111(~prog_11), Event(), B()]-> [State_111(~prog_, ~prog_11, m)]

rule Zero_111: // [process=top-level] Zero 
 [State_111(~prog_, ~prog_11, m)] --[]-> []


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"


restriction progress_11_to_111:
    "All p #t1. ProgressFrom_11(p )@t1 ==> 
       (Ex #t2. ProgressTo_111(p )@t2)
    "

restriction progress__to_1:
    "All p #t1. ProgressFrom_(p )@t1 ==> 
       (Ex #t2. ProgressTo_1(p )@t2)
    "


restriction progress_init:
    " Ex #t. Init()@t "

restriction resilient: 
    "All #i x y. Send(x,y)@i ==> Ex #j. Receive(x,y)@j & #i<#j "

lemma A_enforced :
"	Ex #t. A() @ t"

lemma B_not_enforced : exists-trace
"	( Ex #t0. A() @ t0 ) & not( Ex #t. B() @ t )"

end
