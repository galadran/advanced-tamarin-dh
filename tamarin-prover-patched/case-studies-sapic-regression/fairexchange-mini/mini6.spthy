theory mini6
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m
section{* small example for progression function *}

builtins: signing, hashing

heuristic: l /* heuristic for SAPIC in liveness mode, i.e., with progress) */ 

rule Init_: // [process=top-level] Init 
 [Fr(~prog_)] --[Init(), ProgressFrom_(~prog_)]-> [State_(~prog_)]

rule MessageID_rule_: // [process=top-level] MessageID-rule 
 [Fr(~x)] --[]-> [MID_Sender(~x), MID_Receiver(~x)]

rule new_a_: // [process=top-level] new a 
 [State_(~prog_), Fr(a)] --[ProgressTo_1(~prog_)]-> [State_1(~prog_, a)]

rule Rep_0_1: // [process=top-level] Rep, 0 
 [State_1(~prog_, a)] --[]-> [!Semistate_11(~prog_, a)]

rule Rep_1_1: // [process=top-level] Rep, 1 
 [Fr(~prog_11), !Semistate_11(~prog_, a)] --[ProgressFrom_11(~prog_11)]-> [State_11(~prog_, ~prog_11, a)]

rule if_eqa_a_0_11: // [process=top-level] if eq(a, a), 0 
 [State_11(~prog_, ~prog_11, a)] --[ProgressTo_111(~prog_11), Pred_eq(a, a)]-> [State_111(~prog_, ~prog_11, a)]

rule if_eqa_a_1_11: // [process=top-level] if eq(a, a), 1 
 [State_11(~prog_, ~prog_11, a)] --[ProgressTo_111(~prog_11), Pred_not_eq(a, a)]-> [State_112(~prog_, ~prog_11, a)]

rule in_r_m_111: // [process=top-level] in 'r',m 
 [Fr(~prog_1111), State_111(~prog_, ~prog_11, a), In(m), MID_Receiver(mid_111)] --[ProgressFrom_1111(~prog_1111), Receive(mid_111,m)]-> [State_1111(~prog_, ~prog_11, ~prog_1111, a, m)]

rule event_A_1111: // [process=top-level] event A() 
 [State_1111(~prog_, ~prog_11, ~prog_1111, a, m)] --[ProgressTo_11111(~prog_1111), Event(), A()]-> [State_11111(~prog_, ~prog_11, ~prog_1111, a, m)]

rule Zero_11111: // [process=top-level] Zero 
 [State_11111(~prog_, ~prog_11, ~prog_1111, a, m)] --[]-> []

rule event_B_112: // [process=top-level] event B() 
 [State_112(~prog_, ~prog_11, a)] --[ProgressTo_1121(~prog_11), Event(), B()]-> [State_1121(~prog_, ~prog_11, a)]

rule Zero_1121: // [process=top-level] Zero 
 [State_1121(~prog_, ~prog_11, a)] --[]-> []


restriction predicate_eq:
"All #i a b. Pred_eq(a,b)@i ==> a = b"


restriction predicate_not_eq:
"All #i a b. Pred_not_eq(a,b)@i ==> not(a = b)"


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"


restriction progress_1111_to_11111:
    "All p #t1. ProgressFrom_1111(p )@t1 ==> 
       (Ex #t2. ProgressTo_11111(p )@t2)
    "

restriction progress_11_to_111_or_1121:
    "All p #t1. ProgressFrom_11(p )@t1 ==> 
       (Ex #t2. ProgressTo_111(p )@t2)
	 | (Ex #t2. ProgressTo_1121(p )@t2)
    "

restriction progress__to_1:
    "All p #t1. ProgressFrom_(p )@t1 ==> 
       (Ex #t2. ProgressTo_1(p )@t2)
    "


restriction progress_init:
    " Ex #t. Init()@t "

restriction resilient: 
    "All #i x y. Send(x,y)@i ==> Ex #j. Receive(x,y)@j & #i<#j "

lemma A_possible : exists-trace
"	Ex #t. A() @ t"

lemma B_impossible :
"	not( Ex #t. B() @ t )"

end
