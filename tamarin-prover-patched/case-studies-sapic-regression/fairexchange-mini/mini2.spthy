theory mini2
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m
section{* small example for progression function *}

builtins: signing, hashing

heuristic: l /* heuristic for SAPIC in liveness mode, i.e., with progress) */ 

rule Init_: // [process=top-level] Init 
 [Fr(~prog_)] --[Init(), ProgressFrom_(~prog_)]-> [State_(~prog_)]

rule MessageID_rule_: // [process=top-level] MessageID-rule 
 [Fr(~x)] --[]-> [MID_Sender(~x), MID_Receiver(~x)]

rule new_k_: // [process=top-level] new k 
 [State_(~prog_), Fr(k)] --[ProgressTo_1(~prog_)]-> [State_1(~prog_, k)]

rule in_r_signm_k_11: // [process=top-level] in 'r',sign(m, k) 
 [Fr(~prog_111), State_1(~prog_, k), In(sign(m, k)), MID_Receiver(mid_11)] --[ProgressFrom_111(~prog_111), Receive(mid_11,sign(m, k))]-> [State_111(~prog_, ~prog_111, k, m)]

rule event_A_111: // [process=top-level] event A() 
 [State_111(~prog_, ~prog_111, k, m)] --[ProgressTo_1111(~prog_111), Event(), A()]-> [State_1111(~prog_, ~prog_111, k, m)]

rule Zero_1111: // [process=top-level] Zero 
 [State_1111(~prog_, ~prog_111, k, m)] --[]-> []

rule in_r_m_12: // [process=top-level] in 'r',m 
 [Fr(~prog_121), State_1(~prog_, k), In(m), MID_Receiver(mid_12)] --[ProgressFrom_121(~prog_121), Receive(mid_12,m)]-> [State_121(~prog_, ~prog_121, k, m)]

rule out_c_m_121: // [process=top-level] out 'c',m 
 [State_121(~prog_, ~prog_121, k, m), In('c')] --[ChannelInEvent('c')]-> [State_1211(~prog_, ~prog_121, k, m), Out(m)]

rule event_B_1211: // [process=top-level] event B() 
 [State_1211(~prog_, ~prog_121, k, m)] --[ProgressTo_12111(~prog_121), Event(), B()]-> [State_12111(~prog_, ~prog_121, k, m)]

rule Zero_12111: // [process=top-level] Zero 
 [State_12111(~prog_, ~prog_121, k, m)] --[]-> []


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"


restriction progress_121_to_12111:
    "All p #t1. ProgressFrom_121(p )@t1 ==> 
       (Ex #t2. ProgressTo_12111(p )@t2)
    "

restriction progress_111_to_1111:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111(p )@t2)
    "

restriction progress__to_1:
    "All p #t1. ProgressFrom_(p )@t1 ==> 
       (Ex #t2. ProgressTo_1(p )@t2)
    "


restriction progress_init:
    " Ex #t. Init()@t "

restriction resilient: 
    "All #i x y. Send(x,y)@i ==> Ex #j. Receive(x,y)@j & #i<#j "

lemma A_impossible :
"	not( Ex #t. A() @ t )"

lemma B_possible : exists-trace
"	Ex #t. B() @ t"

end
