theory GJMLocks
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m
section{* Garay-Jakobsson-MacKenzie contract signing protocol *}

functions: pk/1, sk/1[private], aenc/2, adec/2, sign/2, verify/2, true/0, pcs/3, checkpcs/5, convertpcs/2, verify/2, fakepcs/4

equations: adec(aenc(m, pk(i)), sk(i))=m,verify(sign(m, sk(i)), pk(i))=m,checkpcs(c, pk(s), pk(v), pk(ttp), pcs(sign(c, sk(s)), pk(v), pk(ttp)))=true,convertpcs(sk(ttp), pcs(sign(c, sk(s)), pk(v), pk(ttp)))=sign(c, sk(s)),checkpcs(c, pk(s), pk(v), pk(ttp), fakepcs(pk(s), sk(v), pk(ttp), c))=true

heuristic: l /* heuristic for SAPIC in liveness mode, i.e., with progress) */ 

rule Init_: // [process=top-level] Init 
 [Fr(~prog_)] --[Init(), ProgressFrom_(~prog_)]-> [State_(~prog_)]

rule MessageID_rule_: // [process=top-level] MessageID-rule 
 [Fr(~x)] --[]-> [MID_Sender(~x), MID_Receiver(~x)]

rule Par_: // [process=top-level] Par 
 [State_(~prog_)] --[ProgressTo_2(~prog_), ProgressTo_1(~prog_)]-> [State_1(~prog_), State_2(~prog_)]

rule Rep_0_1: // [process=top-level] Rep, 0 
 [State_1(~prog_)] --[]-> [!Semistate_11(~prog_)]

rule Rep_1_1: // [process=top-level] Rep, 1 
 [!Semistate_11(~prog_)] --[]-> [State_11(~prog_)]

rule in_c_A_B_TTP_TTP_TEXT__11: // [process=top-level] in 'c',<$A, $B, <'TTP', $TTP>, $TEXT> 
 [Fr(~prog_111), State_11(~prog_), In(<'c', <$A, $B, <'TTP', $TTP>, $TEXT>>)] --[ProgressFrom_111(~prog_111), ChannelInEvent(<'c', <$A, $B, <'TTP', $TTP>, $TEXT>>)]-> [State_111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111)]

rule event_TTP_TTP_TTP__111: // [process=top-level] event TTP(<'TTP', $TTP>) 
 [State_111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111)] --[Event(), TTP(<'TTP', $TTP>)]-> [State_1111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111)]

rule Par_1111: // [process=top-level] Par 
 [State_1111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111)] --[]-> [State_11111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111), State_11112($A, $B, $TEXT, $TTP, ~prog_, ~prog_111)]

rule Par_11111: // [process=top-level] Par 
 [State_11111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111)] --[]-> [State_111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111), State_111112($A, $B, $TEXT, $TTP, ~prog_, ~prog_111)]

rule Par_111111: // [process=top-level] Par 
 [State_111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111)] --[]-> [State_1111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111), State_1111112($A, $B, $TEXT, $TTP, ~prog_, ~prog_111)]

rule new_sida_1111111 [color=#569DC0]: // [process=A] new sida 
 [State_1111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111), Fr(sida)] --[]-> [State_11111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, sida)]

rule event_StartA_A_B_A_B_TEXT_TTP_TTP_sida_11111111 [color=#569DC0]: // [process=A] event StartA($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sida) 
 [State_11111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, sida)] --[Event(), StartA($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sida)]-> [State_111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, sida)]

rule out_c_pcssign_A_B_TEXT_TTP_TTP_1_sk_A_pk_B_pk_TTP_TTP__111111111 [color=#569DC0]: // [process=A] out 'c',pcs(sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, '1'>, sk($A)), pk($B), pk(<'TTP', $TTP>)) 
 [State_111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, sida), In('c')] --[ChannelInEvent('c')]-> [State_1111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, sida), Out(pcs(sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, '1'>, sk($A)), pk($B), pk(<'TTP', $TTP>)))]

rule in_c_m2a_11111111111 [color=#569DC0]: // [process=A] in 'c',m2a 
 [State_1111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, sida), In(<'c', m2a>)] --[ChannelInEvent(<'c', m2a>)]-> [State_111111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2a, sida)]

rule out_c_sign_A_B_TEXT_TTP_TTP_1_sk_A_111111111111 [color=#2CD719]: // [process=AA] out 'c',sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, '1'>, sk($A)) 
 [State_111111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2a, sida), In('c')] --[ChannelInEvent('c')]-> [State_1111111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2a, sida), Out(sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, '1'>, sk($A)))]

rule in_c_m4_11111111111111 [color=#2CD719]: // [process=AA] in 'c',m4 
 [State_1111111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2a, sida), In(<'c', m4>)] --[ChannelInEvent(<'c', m4>)]-> [State_111111111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2a, m4, sida)]

rule event_ContractA_A_B_A_B_TEXT_TTP_TTP_sida_111111111111111 [color=#2CD719]: // [process=AA] event ContractA($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sida) 
 [State_111111111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2a, m4, sida)] --[Event(), ContractA($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sida)]-> [State_1111111111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2a, m4, sida)]

rule event_EndA4_A_B_A_B_TEXT_TTP_TTP_sida_1111111111111111 [color=#2CD719]: // [process=AA] event EndA4($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sida) 
 [State_1111111111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2a, m4, sida)] --[Event(), EndA4($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sida)]-> [State_11111111111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2a, m4, sida)]

rule Zero_11111111111111111 [color=#2CD719]: // [process=AA] Zero 
 [State_11111111111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2a, m4, sida)] --[]-> []

rule out_r_TTP_TTP_sida_sign_A_B_TEXT_TTP_TTP_1_sk_A_m2a__11111111111112 [color=#2CD719]: // [process=AA] out 'r',<<'TTP', $TTP>, sida, <sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, '1'>, sk($A)), m2a>> 
 [MID_Sender(mid_11111111111112), State_1111111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2a, sida)] --[Send(mid_11111111111112,<<'TTP', $TTP>, sida, <sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, '1'>, sk($A)), m2a>>)]-> [Out(<<'TTP', $TTP>, sida, <sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, '1'>, sk($A)), m2a>>), State_111111111111121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2a, sida)]

rule in_r_A_sida_m4__111111111111121 [color=#2CD719]: // [process=AA] in 'r',<$A, sida, m4> 
 [State_111111111111121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2a, sida), In(<$A, sida, m4>), MID_Receiver(mid_111111111111121)] --[Receive(mid_111111111111121,<$A, sida, m4>)]-> [State_1111111111111211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2a, m4, sida)]

rule event_ContractA_A_B_A_B_TEXT_TTP_TTP_sida_1111111111111211 [color=#2CD719]: // [process=AA] event ContractA($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sida) 
 [State_1111111111111211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2a, m4, sida)] --[Event(), ContractA($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sida)]-> [State_11111111111112111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2a, m4, sida)]

rule event_EndA3_A_B_A_B_TEXT_TTP_TTP_sida_11111111111112111 [color=#2CD719]: // [process=AA] event EndA3($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sida) 
 [State_11111111111112111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2a, m4, sida)] --[Event(), EndA3($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sida)]-> [State_111111111111121111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2a, m4, sida)]

rule Zero_111111111111121111 [color=#2CD719]: // [process=AA] Zero 
 [State_111111111111121111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2a, m4, sida)] --[]-> []

rule in_c_m2b_111111111121 [color=#569DC0]: // [process=A] in 'c',m2b 
 [State_1111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, sida), In(<'c', m2b>)] --[ChannelInEvent(<'c', m2b>)]-> [State_1111111111211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2b, sida)]

rule out_c_sign_A_B_TEXT_TTP_TTP_1_sk_A_1111111111211 [color=#2CD719]: // [process=AA] out 'c',sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, '1'>, sk($A)) 
 [State_1111111111211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2b, sida), In('c')] --[ChannelInEvent('c')]-> [State_11111111112111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2b, sida), Out(sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, '1'>, sk($A)))]

rule in_c_m4_111111111121111 [color=#2CD719]: // [process=AA] in 'c',m4 
 [State_11111111112111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2b, sida), In(<'c', m4>)] --[ChannelInEvent(<'c', m4>)]-> [State_1111111111211111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2b, m4, sida)]

rule event_ContractA_A_B_A_B_TEXT_TTP_TTP_sida_1111111111211111 [color=#2CD719]: // [process=AA] event ContractA($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sida) 
 [State_1111111111211111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2b, m4, sida)] --[Event(), ContractA($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sida)]-> [State_11111111112111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2b, m4, sida)]

rule event_EndA4_A_B_A_B_TEXT_TTP_TTP_sida_11111111112111111 [color=#2CD719]: // [process=AA] event EndA4($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sida) 
 [State_11111111112111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2b, m4, sida)] --[Event(), EndA4($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sida)]-> [State_111111111121111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2b, m4, sida)]

rule Zero_111111111121111111 [color=#2CD719]: // [process=AA] Zero 
 [State_111111111121111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2b, m4, sida)] --[]-> []

rule out_r_TTP_TTP_sida_sign_A_B_TEXT_TTP_TTP_1_sk_A_m2b__111111111121112 [color=#2CD719]: // [process=AA] out 'r',<<'TTP', $TTP>, sida, <sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, '1'>, sk($A)), m2b>> 
 [MID_Sender(mid_111111111121112), State_11111111112111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2b, sida)] --[Send(mid_111111111121112,<<'TTP', $TTP>, sida, <sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, '1'>, sk($A)), m2b>>)]-> [Out(<<'TTP', $TTP>, sida, <sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, '1'>, sk($A)), m2b>>), State_1111111111211121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2b, sida)]

rule in_r_A_sida_m4__1111111111211121 [color=#2CD719]: // [process=AA] in 'r',<$A, sida, m4> 
 [State_1111111111211121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2b, sida), In(<$A, sida, m4>), MID_Receiver(mid_1111111111211121)] --[Receive(mid_1111111111211121,<$A, sida, m4>)]-> [State_11111111112111211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2b, m4, sida)]

rule event_ContractA_A_B_A_B_TEXT_TTP_TTP_sida_11111111112111211 [color=#2CD719]: // [process=AA] event ContractA($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sida) 
 [State_11111111112111211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2b, m4, sida)] --[Event(), ContractA($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sida)]-> [State_111111111121112111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2b, m4, sida)]

rule event_EndA3_A_B_A_B_TEXT_TTP_TTP_sida_111111111121112111 [color=#2CD719]: // [process=AA] event EndA3($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sida) 
 [State_111111111121112111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2b, m4, sida)] --[Event(), EndA3($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sida)]-> [State_1111111111211121111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2b, m4, sida)]

rule Zero_1111111111211121111 [color=#2CD719]: // [process=AA] Zero 
 [State_1111111111211121111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m2b, m4, sida)] --[]-> []

rule out_r_TTP_TTP_sida_sign_A_B_TEXT_TTP_TTP_A_B_abort_sk_A___111111111122 [color=#569DC0]: // [process=A] out 'r',<<'TTP', $TTP>, sida, sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, $A, $B, 'abort'>, sk('A'))> 
 [MID_Sender(mid_111111111122), State_1111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, sida)] --[Send(mid_111111111122,<<'TTP', $TTP>, sida, sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, $A, $B, 'abort'>, sk('A'))>)]-> [Out(<<'TTP', $TTP>, sida, sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, $A, $B, 'abort'>, sk('A'))>), State_1111111111221($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, sida)]

rule in_r_A_sida_a2__11111111112211 [color=#569DC0]: // [process=A] in 'r',<$A, sida, a2> 
 [State_1111111111221($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, sida), In(<$A, sida, a2>), MID_Receiver(mid_11111111112211)] --[Receive(mid_11111111112211,<$A, sida, a2>)]-> [State_111111111122111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, a2, sida)]

rule event_AbortA_A_B_A_B_TEXT_TTP_TTP_sida_111111111122111 [color=#569DC0]: // [process=A] event AbortA($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sida) 
 [State_111111111122111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, a2, sida)] --[Event(), AbortA($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sida)]-> [State_1111111111221111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, a2, sida)]

rule event_EndA1_A_B_A_B_TEXT_TTP_TTP_sida_1111111111221111 [color=#569DC0]: // [process=A] event EndA1($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sida) 
 [State_1111111111221111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, a2, sida)] --[Event(), EndA1($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sida)]-> [State_11111111112211111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, a2, sida)]

rule Zero_11111111112211111 [color=#569DC0]: // [process=A] Zero 
 [State_11111111112211111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, a2, sida)] --[]-> []

rule in_r_A_sida_m4__11111111112212 [color=#569DC0]: // [process=A] in 'r',<$A, sida, m4> 
 [State_1111111111221($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, sida), In(<$A, sida, m4>), MID_Receiver(mid_11111111112212)] --[Receive(mid_11111111112212,<$A, sida, m4>)]-> [State_111111111122121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m4, sida)]

rule event_ContractA_A_B_A_B_TEXT_TTP_TTP_sida_111111111122121 [color=#569DC0]: // [process=A] event ContractA($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sida) 
 [State_111111111122121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m4, sida)] --[Event(), ContractA($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sida)]-> [State_1111111111221211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m4, sida)]

rule event_EndA2_A_B_A_B_TEXT_TTP_TTP_sida_1111111111221211 [color=#569DC0]: // [process=A] event EndA2($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sida) 
 [State_1111111111221211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m4, sida)] --[Event(), EndA2($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sida)]-> [State_11111111112212111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m4, sida)]

rule Zero_11111111112212111 [color=#569DC0]: // [process=A] Zero 
 [State_11111111112212111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m4, sida)] --[]-> []

rule in_c_m1a_11111121 [color=#11EC28]: // [process=B] in 'c',m1a 
 [State_1111112($A, $B, $TEXT, $TTP, ~prog_, ~prog_111), In(<'c', m1a>)] --[ChannelInEvent(<'c', m1a>)]-> [State_111111211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m1a)]

rule new_sidb_111111211 [color=#45D1E2]: // [process=BB] new sidb 
 [Fr(~prog_1111112111), State_111111211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m1a), Fr(sidb)] --[ProgressFrom_1111112111(~prog_1111112111)]-> [State_1111112111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, m1a, sidb)]

rule event_StartB_A_B_A_B_TEXT_TTP_TTP_sidb_1111112111 [color=#45D1E2]: // [process=BB] event StartB($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sidb) 
 [State_1111112111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, m1a, sidb)] --[Event(), StartB($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sidb)]-> [State_11111121111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, m1a, sidb)]

rule event_Bstarted_A_B_pcssign_A_B_TEXT_TTP_TTP_2_sk_B_pk_A_pk_TTP_TTP__11111121111 [color=#45D1E2]: // [process=BB] event Bstarted($A, $B, pcs(sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, '2'>, sk($B)), pk($A), pk(<'TTP', $TTP>))) 
 [State_11111121111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, m1a, sidb)] --[Event(), Bstarted($A, $B, pcs(sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, '2'>, sk($B)), pk($A), pk(<'TTP', $TTP>)))]-> [State_111111211111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, m1a, sidb)]

rule out_c_pcssign_A_B_TEXT_TTP_TTP_2_sk_B_pk_A_pk_TTP_TTP__111111211111 [color=#45D1E2]: // [process=BB] out 'c',pcs(sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, '2'>, sk($B)), pk($A), pk(<'TTP', $TTP>)) 
 [State_111111211111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, m1a, sidb), In('c')] --[ChannelInEvent('c')]-> [State_1111112111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, m1a, sidb), Out(pcs(sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, '2'>, sk($B)), pk($A), pk(<'TTP', $TTP>)))]

rule in_c_m3_11111121111111 [color=#45D1E2]: // [process=BB] in 'c',m3 
 [State_1111112111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, m1a, sidb), In(<'c', m3>)] --[ChannelInEvent(<'c', m3>)]-> [State_111111211111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, m1a, m3, sidb)]

rule event_ContractB_A_B_A_B_TEXT_TTP_TTP_sidb_111111211111111 [color=#45D1E2]: // [process=BB] event ContractB($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sidb) 
 [State_111111211111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, m1a, m3, sidb)] --[Event(), ContractB($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sidb)]-> [State_1111112111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, m1a, m3, sidb)]

rule event_EndB3_A_B_A_B_TEXT_TTP_TTP_sidb_1111112111111111 [color=#45D1E2]: // [process=BB] event EndB3($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sidb) 
 [State_1111112111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, m1a, m3, sidb)] --[Event(), EndB3($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sidb)]-> [State_11111121111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, m1a, m3, sidb)]

rule out_c_sign_A_B_TEXT_TTP_TTP_2_sk_B_11111121111111111 [color=#45D1E2]: // [process=BB] out 'c',sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, '2'>, sk($B)) 
 [State_11111121111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, m1a, m3, sidb), In('c')] --[ChannelInEvent('c')]-> [State_111111211111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, m1a, m3, sidb), Out(sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, '2'>, sk($B)))]

rule Zero_111111211111111111 [color=#45D1E2]: // [process=BB] Zero 
 [State_111111211111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, m1a, m3, sidb)] --[]-> []

rule out_r_TTP_TTP_sidb_aenc_m1a_sign_A_B_TEXT_TTP_TTP_2_sk_B_pk_TTP_TTP___11111121111112 [color=#45D1E2]: // [process=BB] out 'r',<<'TTP', $TTP>, sidb, aenc(<m1a, sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, '2'>, sk($B))>, pk(<'TTP', $TTP>))> 
 [MID_Sender(mid_11111121111112), State_1111112111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, m1a, sidb)] --[Send(mid_11111121111112,<<'TTP', $TTP>, sidb, aenc(<m1a, sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, '2'>, sk($B))>, pk(<'TTP', $TTP>))>)]-> [Out(<<'TTP', $TTP>, sidb, aenc(<m1a, sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, '2'>, sk($B))>, pk(<'TTP', $TTP>))>), State_111111211111121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, m1a, sidb)]

rule in_r_B_sidb_a2__1111112111111211 [color=#45D1E2]: // [process=BB] in 'r',<$B, sidb, a2> 
 [State_111111211111121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, m1a, sidb), In(<$B, sidb, a2>), MID_Receiver(mid_1111112111111211)] --[Receive(mid_1111112111111211,<$B, sidb, a2>)]-> [State_11111121111112111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, a2, m1a, sidb)]

rule event_AbortB_A_B_A_B_TEXT_TTP_TTP_sidb_11111121111112111 [color=#45D1E2]: // [process=BB] event AbortB($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sidb) 
 [State_11111121111112111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, a2, m1a, sidb)] --[Event(), AbortB($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sidb)]-> [State_111111211111121111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, a2, m1a, sidb)]

rule event_EndB1_A_B_A_B_TEXT_TTP_TTP_sidb_111111211111121111 [color=#45D1E2]: // [process=BB] event EndB1($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sidb) 
 [State_111111211111121111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, a2, m1a, sidb)] --[Event(), EndB1($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sidb)]-> [State_1111112111111211111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, a2, m1a, sidb)]

rule Zero_1111112111111211111 [color=#45D1E2]: // [process=BB] Zero 
 [State_1111112111111211111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, a2, m1a, sidb)] --[]-> []

rule in_r_B_sidb_m3__1111112111111212 [color=#45D1E2]: // [process=BB] in 'r',<$B, sidb, m3> 
 [State_111111211111121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, m1a, sidb), In(<$B, sidb, m3>), MID_Receiver(mid_1111112111111212)] --[Receive(mid_1111112111111212,<$B, sidb, m3>)]-> [State_11111121111112121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, m1a, m3, sidb)]

rule event_ContractB_A_B_A_B_TEXT_TTP_TTP_sidb_11111121111112121 [color=#45D1E2]: // [process=BB] event ContractB($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sidb) 
 [State_11111121111112121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, m1a, m3, sidb)] --[Event(), ContractB($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sidb)]-> [State_111111211111121211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, m1a, m3, sidb)]

rule event_EndB2_A_B_A_B_TEXT_TTP_TTP_sidb_111111211111121211 [color=#45D1E2]: // [process=BB] event EndB2($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sidb) 
 [State_111111211111121211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, m1a, m3, sidb)] --[Event(), EndB2($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sidb)]-> [State_1111112111111212111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, m1a, m3, sidb)]

rule Zero_1111112111111212111 [color=#45D1E2]: // [process=BB] Zero 
 [State_1111112111111212111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_1111112111, m1a, m3, sidb)] --[]-> []

rule in_c_m1b_11111122 [color=#11EC28]: // [process=B] in 'c',m1b 
 [State_1111112($A, $B, $TEXT, $TTP, ~prog_, ~prog_111), In(<'c', m1b>)] --[ChannelInEvent(<'c', m1b>)]-> [State_111111221($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m1b)]

rule new_sidb_111111221 [color=#45D1E2]: // [process=BB] new sidb 
 [State_111111221($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m1b), Fr(sidb)] --[]-> [State_1111112211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m1b, sidb)]

rule event_StartB_A_B_A_B_TEXT_TTP_TTP_sidb_1111112211 [color=#45D1E2]: // [process=BB] event StartB($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sidb) 
 [State_1111112211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m1b, sidb)] --[Event(), StartB($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sidb)]-> [State_11111122111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m1b, sidb)]

rule event_Bstarted_A_B_pcssign_A_B_TEXT_TTP_TTP_2_sk_B_pk_A_pk_TTP_TTP__11111122111 [color=#45D1E2]: // [process=BB] event Bstarted($A, $B, pcs(sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, '2'>, sk($B)), pk($A), pk(<'TTP', $TTP>))) 
 [State_11111122111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m1b, sidb)] --[Event(), Bstarted($A, $B, pcs(sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, '2'>, sk($B)), pk($A), pk(<'TTP', $TTP>)))]-> [State_111111221111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m1b, sidb)]

rule out_c_pcssign_A_B_TEXT_TTP_TTP_2_sk_B_pk_A_pk_TTP_TTP__111111221111 [color=#45D1E2]: // [process=BB] out 'c',pcs(sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, '2'>, sk($B)), pk($A), pk(<'TTP', $TTP>)) 
 [State_111111221111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m1b, sidb), In('c')] --[ChannelInEvent('c')]-> [State_1111112211111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m1b, sidb), Out(pcs(sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, '2'>, sk($B)), pk($A), pk(<'TTP', $TTP>)))]

rule in_c_m3_11111122111111 [color=#45D1E2]: // [process=BB] in 'c',m3 
 [State_1111112211111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m1b, sidb), In(<'c', m3>)] --[ChannelInEvent(<'c', m3>)]-> [State_111111221111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m1b, m3, sidb)]

rule event_ContractB_A_B_A_B_TEXT_TTP_TTP_sidb_111111221111111 [color=#45D1E2]: // [process=BB] event ContractB($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sidb) 
 [State_111111221111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m1b, m3, sidb)] --[Event(), ContractB($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sidb)]-> [State_1111112211111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m1b, m3, sidb)]

rule event_EndB3_A_B_A_B_TEXT_TTP_TTP_sidb_1111112211111111 [color=#45D1E2]: // [process=BB] event EndB3($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sidb) 
 [State_1111112211111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m1b, m3, sidb)] --[Event(), EndB3($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sidb)]-> [State_11111122111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m1b, m3, sidb)]

rule out_c_sign_A_B_TEXT_TTP_TTP_2_sk_B_11111122111111111 [color=#45D1E2]: // [process=BB] out 'c',sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, '2'>, sk($B)) 
 [State_11111122111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m1b, m3, sidb), In('c')] --[ChannelInEvent('c')]-> [State_111111221111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m1b, m3, sidb), Out(sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, '2'>, sk($B)))]

rule Zero_111111221111111111 [color=#45D1E2]: // [process=BB] Zero 
 [State_111111221111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m1b, m3, sidb)] --[]-> []

rule out_r_TTP_TTP_sidb_aenc_m1b_sign_A_B_TEXT_TTP_TTP_2_sk_B_pk_TTP_TTP___11111122111112 [color=#45D1E2]: // [process=BB] out 'r',<<'TTP', $TTP>, sidb, aenc(<m1b, sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, '2'>, sk($B))>, pk(<'TTP', $TTP>))> 
 [MID_Sender(mid_11111122111112), State_1111112211111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m1b, sidb)] --[Send(mid_11111122111112,<<'TTP', $TTP>, sidb, aenc(<m1b, sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, '2'>, sk($B))>, pk(<'TTP', $TTP>))>)]-> [Out(<<'TTP', $TTP>, sidb, aenc(<m1b, sign(<<$A, $B, $TEXT, <'TTP', $TTP>>, '2'>, sk($B))>, pk(<'TTP', $TTP>))>), State_111111221111121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m1b, sidb)]

rule in_r_B_sidb_a2__1111112211111211 [color=#45D1E2]: // [process=BB] in 'r',<$B, sidb, a2> 
 [State_111111221111121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m1b, sidb), In(<$B, sidb, a2>), MID_Receiver(mid_1111112211111211)] --[Receive(mid_1111112211111211,<$B, sidb, a2>)]-> [State_11111122111112111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, a2, m1b, sidb)]

rule event_AbortB_A_B_A_B_TEXT_TTP_TTP_sidb_11111122111112111 [color=#45D1E2]: // [process=BB] event AbortB($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sidb) 
 [State_11111122111112111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, a2, m1b, sidb)] --[Event(), AbortB($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sidb)]-> [State_111111221111121111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, a2, m1b, sidb)]

rule event_EndB1_A_B_A_B_TEXT_TTP_TTP_sidb_111111221111121111 [color=#45D1E2]: // [process=BB] event EndB1($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sidb) 
 [State_111111221111121111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, a2, m1b, sidb)] --[Event(), EndB1($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sidb)]-> [State_1111112211111211111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, a2, m1b, sidb)]

rule Zero_1111112211111211111 [color=#45D1E2]: // [process=BB] Zero 
 [State_1111112211111211111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, a2, m1b, sidb)] --[]-> []

rule in_r_B_sidb_m3__1111112211111212 [color=#45D1E2]: // [process=BB] in 'r',<$B, sidb, m3> 
 [State_111111221111121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m1b, sidb), In(<$B, sidb, m3>), MID_Receiver(mid_1111112211111212)] --[Receive(mid_1111112211111212,<$B, sidb, m3>)]-> [State_11111122111112121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m1b, m3, sidb)]

rule event_ContractB_A_B_A_B_TEXT_TTP_TTP_sidb_11111122111112121 [color=#45D1E2]: // [process=BB] event ContractB($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sidb) 
 [State_11111122111112121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m1b, m3, sidb)] --[Event(), ContractB($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sidb)]-> [State_111111221111121211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m1b, m3, sidb)]

rule event_EndB2_A_B_A_B_TEXT_TTP_TTP_sidb_111111221111121211 [color=#45D1E2]: // [process=BB] event EndB2($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sidb) 
 [State_111111221111121211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m1b, m3, sidb)] --[Event(), EndB2($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>, sidb)]-> [State_1111112211111212111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m1b, m3, sidb)]

rule Zero_1111112211111212111 [color=#45D1E2]: // [process=BB] Zero 
 [State_1111112211111212111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m1b, m3, sidb)] --[]-> []

rule in_r_TTPID_sida_a1__1111121 [color=#9F76CD]: // [process=TTP] in 'r',<TTPID, sida, a1> 
 [State_111112($A, $B, $TEXT, $TTP, ~prog_, ~prog_111), In(<TTPID, sida, a1>), MID_Receiver(mid_1111121)] --[Receive(mid_1111121,<TTPID, sida, a1>)]-> [State_11111211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, TTPID, a1, sida)]

rule lock_A_B_TEXT_TTPID__11111211 [color=#9F76CD]: // [process=TTP] lock <$A, $B, $TEXT, TTPID> 
 [Fr(~prog_111112111), State_11111211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, TTPID, a1, sida), Fr(~lock6)] --[ProgressFrom_111112111(~prog_111112111), Lock($6, ~lock6, <$A, $B, $TEXT, TTPID>), Lock_6($6, ~lock6, <$A, $B, $TEXT, TTPID>)]-> [State_111112111($A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111, ~prog_111112111, TTPID, a1, sida)]

rule out_r_A_sida_signa1_skTTPID__111112111 [color=#9F76CD]: // [process=TTP] out 'r',<$A, sida, sign(a1, sk(TTPID))> 
 [MID_Sender(mid_111112111), State_111112111($A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111, ~prog_111112111, TTPID, a1, sida)] --[Send(mid_111112111,<$A, sida, sign(a1, sk(TTPID))>)]-> [Out(<$A, sida, sign(a1, sk(TTPID))>), State_1111121111($A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111, ~prog_111112111, TTPID, a1, sida)]

rule event_AbortCert_A_B_A_B_TEXT_TTPID__1111121111 [color=#9F76CD]: // [process=TTP] event AbortCert($A, $B, <$A, $B, $TEXT, TTPID>) 
 [State_1111121111($A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111, ~prog_111112111, TTPID, a1, sida)] --[Event(), AbortCert($A, $B, <$A, $B, $TEXT, TTPID>)]-> [State_11111211111($A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111, ~prog_111112111, TTPID, a1, sida)]

rule in_r_TTPID_sidb_aencr2_pkTTPID__11111211111 [color=#9F76CD]: // [process=TTP] in 'r',<TTPID, sidb, aenc(r2, pk(TTPID))> 
 [State_11111211111($A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111, ~prog_111112111, TTPID, a1, sida), In(<TTPID, sidb, aenc(r2, pk(TTPID))>), MID_Receiver(mid_11111211111)] --[ProgressTo_111112111111(~prog_111112111), Receive(mid_11111211111,<TTPID, sidb, aenc(r2, pk(TTPID))>)]-> [State_111112111111($A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111, ~prog_111112111, TTPID, a1, r2, sida, sidb)]

rule out_r_B_sidb_signa1_skTTPID__111112111111 [color=#9F76CD]: // [process=TTP] out 'r',<$B, sidb, sign(a1, sk(TTPID))> 
 [Fr(~prog_1111121111111), MID_Sender(mid_111112111111), State_111112111111($A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111, ~prog_111112111, TTPID, a1, r2, sida, sidb)] --[ProgressFrom_1111121111111(~prog_1111121111111), Send(mid_111112111111,<$B, sidb, sign(a1, sk(TTPID))>)]-> [Out(<$B, sidb, sign(a1, sk(TTPID))>), State_1111121111111($A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111, ~prog_111112111, ~prog_1111121111111, TTPID, a1, r2, sida, sidb)]

rule Zero_1111121111111 [color=#9F76CD]: // [process=TTP] Zero 
 [State_1111121111111($A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111, ~prog_111112111, ~prog_1111121111111, TTPID, a1, r2, sida, sidb)] --[ProgressTo_11111211111111(~prog_1111121111111)]-> []

rule in_r_TTPID_sida_r1__11111221 [color=#9F76CD]: // [process=TTP] in 'r',<TTPID, sida, r1> 
 [State_111112($A, $B, $TEXT, $TTP, ~prog_, ~prog_111), In(<TTPID, sida, r1>), MID_Receiver(mid_11111221)] --[Receive(mid_11111221,<TTPID, sida, r1>)]-> [State_111112211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, TTPID, r1, sida)]

rule lock_A_B_TEXT_TTPID__111112211 [color=#9F76CD]: // [process=TTP] lock <$A, $B, $TEXT, TTPID> 
 [State_111112211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, TTPID, r1, sida), Fr(~lock7)] --[Lock($7, ~lock7, <$A, $B, $TEXT, TTPID>), Lock_7($7, ~lock7, <$A, $B, $TEXT, TTPID>)]-> [State_1111122111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, TTPID, r1, sida)]

rule event_AtriesResolve_A_B_pcssign_A_B_TEXT_TTPID_2_sk_B_pk_A_pkTTPID_1111122111 [color=#9F76CD]: // [process=TTP] event AtriesResolve($A, $B, pcs(sign(<<$A, $B, $TEXT, TTPID>, '2'>, sk($B)), pk($A), pk(TTPID))) 
 [State_1111122111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, TTPID, r1, sida)] --[Event(), AtriesResolve($A, $B, pcs(sign(<<$A, $B, $TEXT, TTPID>, '2'>, sk($B)), pk($A), pk(TTPID)))]-> [State_11111221111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, TTPID, r1, sida)]

rule out_r_A_sida_convertpcsskTTPID_pcssign_A_B_TEXT_TTPID_2_sk_B_pk_A_pkTTPID__11111221111 [color=#9F76CD]: // [process=TTP] out 'r',<$A, sida, convertpcs(sk(TTPID), pcs(sign(<<$A, $B, $TEXT, TTPID>, '2'>, sk($B)), pk($A), pk(TTPID)))> 
 [MID_Sender(mid_11111221111), State_11111221111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, TTPID, r1, sida)] --[Send(mid_11111221111,<$A, sida, convertpcs(sk(TTPID), pcs(sign(<<$A, $B, $TEXT, TTPID>, '2'>, sk($B)), pk($A), pk(TTPID)))>)]-> [Out(<$A, sida, convertpcs(sk(TTPID), pcs(sign(<<$A, $B, $TEXT, TTPID>, '2'>, sk($B)), pk($A), pk(TTPID)))>), State_111112211111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, TTPID, r1, sida)]

rule in_r_TTPID_sidb_aencr2_pkTTPID__111112211111 [color=#9F76CD]: // [process=TTP] in 'r',<TTPID, sidb, aenc(r2, pk(TTPID))> 
 [State_111112211111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, TTPID, r1, sida), In(<TTPID, sidb, aenc(r2, pk(TTPID))>), MID_Receiver(mid_111112211111)] --[Receive(mid_111112211111,<TTPID, sidb, aenc(r2, pk(TTPID))>)]-> [State_1111122111111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, TTPID, r1, r2, sida, sidb)]

rule out_r_B_sidb_sign_A_B_TEXT_TTPID_1_sk_A__1111122111111 [color=#9F76CD]: // [process=TTP] out 'r',<$B, sidb, sign(<<$A, $B, $TEXT, TTPID>, '1'>, sk($A))> 
 [MID_Sender(mid_1111122111111), State_1111122111111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, TTPID, r1, r2, sida, sidb)] --[Send(mid_1111122111111,<$B, sidb, sign(<<$A, $B, $TEXT, TTPID>, '1'>, sk($A))>)]-> [Out(<$B, sidb, sign(<<$A, $B, $TEXT, TTPID>, '1'>, sk($A))>), State_11111221111111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, TTPID, r1, r2, sida, sidb)]

rule event_ResolveCert_A_B_A_B_TEXT_TTPID__11111221111111 [color=#9F76CD]: // [process=TTP] event ResolveCert($A, $B, <$A, $B, $TEXT, TTPID>) 
 [State_11111221111111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, TTPID, r1, r2, sida, sidb)] --[Event(), ResolveCert($A, $B, <$A, $B, $TEXT, TTPID>)]-> [State_111112211111111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, TTPID, r1, r2, sida, sidb)]

rule Zero_111112211111111 [color=#9F76CD]: // [process=TTP] Zero 
 [State_111112211111111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, TTPID, r1, r2, sida, sidb)] --[]-> []

rule in_r_TTPID_sidb_aencr2_pkTTPID__11111222 [color=#9F76CD]: // [process=TTP] in 'r',<TTPID, sidb, aenc(r2, pk(TTPID))> 
 [State_111112($A, $B, $TEXT, $TTP, ~prog_, ~prog_111), In(<TTPID, sidb, aenc(r2, pk(TTPID))>), MID_Receiver(mid_11111222)] --[Receive(mid_11111222,<TTPID, sidb, aenc(r2, pk(TTPID))>)]-> [State_111112221($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, TTPID, r2, sidb)]

rule lock_A_B_TEXT_TTPID__111112221 [color=#9F76CD]: // [process=TTP] lock <$A, $B, $TEXT, TTPID> 
 [State_111112221($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, TTPID, r2, sidb), Fr(~lock8)] --[Lock($8, ~lock8, <$A, $B, $TEXT, TTPID>), Lock_8($8, ~lock8, <$A, $B, $TEXT, TTPID>)]-> [State_1111122211($A, $B, $TEXT, $TTP, ~lock8, ~prog_, ~prog_111, TTPID, r2, sidb)]

rule out_r_B_sidb_convertpcsskTTPID_pcssign_A_B_TEXT_TTPID_1_sk_A_pk_B_pkTTPID__1111122211 [color=#9F76CD]: // [process=TTP] out 'r',<$B, sidb, convertpcs(sk(TTPID), pcs(sign(<<$A, $B, $TEXT, TTPID>, '1'>, sk($A)), pk($B), pk(TTPID)))> 
 [MID_Sender(mid_1111122211), State_1111122211($A, $B, $TEXT, $TTP, ~lock8, ~prog_, ~prog_111, TTPID, r2, sidb)] --[Send(mid_1111122211,<$B, sidb, convertpcs(sk(TTPID), pcs(sign(<<$A, $B, $TEXT, TTPID>, '1'>, sk($A)), pk($B), pk(TTPID)))>)]-> [Out(<$B, sidb, convertpcs(sk(TTPID), pcs(sign(<<$A, $B, $TEXT, TTPID>, '1'>, sk($A)), pk($B), pk(TTPID)))>), State_11111222111($A, $B, $TEXT, $TTP, ~lock8, ~prog_, ~prog_111, TTPID, r2, sidb)]

rule event_BtriesResolve_A_B_A_B_TEXT_TTPID__11111222111 [color=#9F76CD]: // [process=TTP] event BtriesResolve($A, $B, <$A, $B, $TEXT, TTPID>) 
 [State_11111222111($A, $B, $TEXT, $TTP, ~lock8, ~prog_, ~prog_111, TTPID, r2, sidb)] --[Event(), BtriesResolve($A, $B, <$A, $B, $TEXT, TTPID>)]-> [State_111112221111($A, $B, $TEXT, $TTP, ~lock8, ~prog_, ~prog_111, TTPID, r2, sidb)]

rule event_ResolveCert_A_B_A_B_TEXT_TTPID__111112221111 [color=#9F76CD]: // [process=TTP] event ResolveCert($A, $B, <$A, $B, $TEXT, TTPID>) 
 [State_111112221111($A, $B, $TEXT, $TTP, ~lock8, ~prog_, ~prog_111, TTPID, r2, sidb)] --[Event(), ResolveCert($A, $B, <$A, $B, $TEXT, TTPID>)]-> [State_1111122211111($A, $B, $TEXT, $TTP, ~lock8, ~prog_, ~prog_111, TTPID, r2, sidb)]

rule in_r_TTPID_sida_a1__11111222111111 [color=#9F76CD]: // [process=TTP] in 'r',<TTPID, sida, a1> 
 [State_1111122211111($A, $B, $TEXT, $TTP, ~lock8, ~prog_, ~prog_111, TTPID, r2, sidb), In(<TTPID, sida, a1>), MID_Receiver(mid_11111222111111)] --[Receive(mid_11111222111111,<TTPID, sida, a1>)]-> [State_111112221111111($A, $B, $TEXT, $TTP, ~lock8, ~prog_, ~prog_111, TTPID, a1, r2, sida, sidb)]

rule out_r_A_sida_sign_A_B_TEXT_TTPID_2_sk_B__111112221111111 [color=#9F76CD]: // [process=TTP] out 'r',<$A, sida, sign(<<$A, $B, $TEXT, TTPID>, '2'>, sk($B))> 
 [MID_Sender(mid_111112221111111), State_111112221111111($A, $B, $TEXT, $TTP, ~lock8, ~prog_, ~prog_111, TTPID, a1, r2, sida, sidb)] --[Send(mid_111112221111111,<$A, sida, sign(<<$A, $B, $TEXT, TTPID>, '2'>, sk($B))>)]-> [Out(<$A, sida, sign(<<$A, $B, $TEXT, TTPID>, '2'>, sk($B))>), State_1111122211111111($A, $B, $TEXT, $TTP, ~lock8, ~prog_, ~prog_111, TTPID, a1, r2, sida, sidb)]

rule Zero_1111122211111111 [color=#9F76CD]: // [process=TTP] Zero 
 [State_1111122211111111($A, $B, $TEXT, $TTP, ~lock8, ~prog_, ~prog_111, TTPID, a1, r2, sida, sidb)] --[]-> []

rule in_r_TTPID_sida_r1__11111222111112 [color=#9F76CD]: // [process=TTP] in 'r',<TTPID, sida, r1> 
 [State_1111122211111($A, $B, $TEXT, $TTP, ~lock8, ~prog_, ~prog_111, TTPID, r2, sidb), In(<TTPID, sida, r1>), MID_Receiver(mid_11111222111112)] --[Receive(mid_11111222111112,<TTPID, sida, r1>)]-> [State_111112221111121($A, $B, $TEXT, $TTP, ~lock8, ~prog_, ~prog_111, TTPID, r1, r2, sida, sidb)]

rule out_r_A_sida_sign_A_B_TEXT_TTPID_2_sk_B__111112221111121 [color=#9F76CD]: // [process=TTP] out 'r',<$A, sida, sign(<<$A, $B, $TEXT, TTPID>, '2'>, sk($B))> 
 [MID_Sender(mid_111112221111121), State_111112221111121($A, $B, $TEXT, $TTP, ~lock8, ~prog_, ~prog_111, TTPID, r1, r2, sida, sidb)] --[Send(mid_111112221111121,<$A, sida, sign(<<$A, $B, $TEXT, TTPID>, '2'>, sk($B))>)]-> [Out(<$A, sida, sign(<<$A, $B, $TEXT, TTPID>, '2'>, sk($B))>), State_1111122211111211($A, $B, $TEXT, $TTP, ~lock8, ~prog_, ~prog_111, TTPID, r1, r2, sida, sidb)]

rule Zero_1111122211111211 [color=#9F76CD]: // [process=TTP] Zero 
 [State_1111122211111211($A, $B, $TEXT, $TTP, ~lock8, ~prog_, ~prog_111, TTPID, r1, r2, sida, sidb)] --[]-> []

rule Par_11112 [color=#EE415C]: // [process=Judge] Par 
 [State_11112($A, $B, $TEXT, $TTP, ~prog_, ~prog_111)] --[]-> [State_111121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111), State_111122($A, $B, $TEXT, $TTP, ~prog_, ~prog_111)]

rule in_c_m3_m4__111121 [color=#EE415C]: // [process=Judge] in 'c',<m3, m4> 
 [State_111121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111), In(<'c', <m3, m4>>)] --[ProgressTo_1111212(~prog_111), ProgressTo_1111211(~prog_111), ChannelInEvent(<'c', <m3, m4>>)]-> [State_1111211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m3, m4)]

rule event_ContractJudge_A_B_A_B_TEXT_TTP_TTP__1111211 [color=#EE415C]: // [process=Judge] event ContractJudge($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>) 
 [Fr(~prog_11112111), State_1111211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, m3, m4)] --[ProgressFrom_11112111(~prog_11112111), Event(), ContractJudge($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>)]-> [State_11112111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11112111, m3, m4)]

rule Zero_11112111 [color=#EE415C]: // [process=Judge] Zero 
 [State_11112111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11112111, m3, m4)] --[ProgressTo_111121111(~prog_11112111)]-> []

rule in_c_a2_111122 [color=#EE415C]: // [process=Judge] in 'c',a2 
 [State_111122($A, $B, $TEXT, $TTP, ~prog_, ~prog_111), In(<'c', a2>)] --[ChannelInEvent(<'c', a2>)]-> [State_1111221($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, a2)]

rule event_AbortJudge_A_B_A_B_TEXT_TTP_TTP__1111221 [color=#EE415C]: // [process=Judge] event AbortJudge($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>) 
 [State_1111221($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, a2)] --[Event(), AbortJudge($A, $B, <$A, $B, $TEXT, <'TTP', $TTP>>)]-> [State_11112211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, a2)]

rule Zero_11112211 [color=#EE415C]: // [process=Judge] Zero 
 [State_11112211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, a2)] --[]-> []

rule Rep_0_2: // [process=top-level] Rep, 0 
 [State_2(~prog_)] --[]-> [!Semistate_21(~prog_)]

rule Rep_1_2: // [process=top-level] Rep, 1 
 [!Semistate_21(~prog_)] --[]-> [State_21(~prog_)]

rule in_c_corrupt_x__21: // [process=top-level] in 'c',<'corrupt', $x> 
 [Fr(~prog_211), State_21(~prog_), In(<'c', <'corrupt', $x>>)] --[ProgressFrom_211(~prog_211), ChannelInEvent(<'c', <'corrupt', $x>>)]-> [State_211($x, ~prog_, ~prog_211)]

rule event_Corrupt_x_211: // [process=top-level] event Corrupt($x) 
 [State_211($x, ~prog_, ~prog_211)] --[Event(), Corrupt($x)]-> [State_2111($x, ~prog_, ~prog_211)]

rule out_c_sk_x_2111: // [process=top-level] out 'c',sk($x) 
 [State_2111($x, ~prog_, ~prog_211), In('c')] --[ProgressTo_21111(~prog_211), ChannelInEvent('c')]-> [State_21111($x, ~prog_, ~prog_211), Out(sk($x))]

rule Rep_0_21111: // [process=top-level] Rep, 0 
 [State_21111($x, ~prog_, ~prog_211)] --[]-> [!Semistate_211111($x, ~prog_, ~prog_211)]

rule Rep_1_21111: // [process=top-level] Rep, 1 
 [!Semistate_211111($x, ~prog_, ~prog_211)] --[]-> [State_211111($x, ~prog_, ~prog_211)]

rule in_r_x_sid_m__211111: // [process=top-level] in 'r',<$x, sid, m> 
 [State_211111($x, ~prog_, ~prog_211), In(<$x, sid, m>), MID_Receiver(mid_211111)] --[Receive(mid_211111,<$x, sid, m>)]-> [State_2111111($x, ~prog_, ~prog_211, m, sid)]

rule Zero_2111111: // [process=top-level] Zero 
 [State_2111111($x, ~prog_, ~prog_211, m, sid)] --[]-> []


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"


restriction progress_1111121221_to_11111212211111:
    "All p #t1. ProgressFrom_1111121221(p )@t1 ==> 
       (Ex #t2. ProgressTo_11111212211111(p )@t2)
    "

restriction progress_1111111111122121_to_111111111112212111:
    "All p #t1. ProgressFrom_1111111111122121(p )@t1 ==> 
       (Ex #t2. ProgressTo_111111111112212111(p )@t2)
    "

restriction progress_1111112121111112121_to_111111212111111212111:
    "All p #t1. ProgressFrom_1111112121111112121(p )@t1 ==> 
       (Ex #t2. ProgressTo_111111212111111212111(p )@t2)
    "

restriction progress_1111112111111112121_to_111111211111111212111:
    "All p #t1. ProgressFrom_1111112111111112121(p )@t1 ==> 
       (Ex #t2. ProgressTo_111111211111111212111(p )@t2)
    "

restriction progress_1111112121_to_11111121211111111111_or_11111121211111121:
    "All p #t1. ProgressFrom_1111112121(p )@t1 ==> 
       (Ex #t2. ProgressTo_11111121211111111111(p )@t2)
	 | (Ex #t2. ProgressTo_11111121211111121(p )@t2)
    "

restriction progress_11112121_to_111121211:
    "All p #t1. ProgressFrom_11112121(p )@t1 ==> 
       (Ex #t2. ProgressTo_111121211(p )@t2)
    "

restriction progress_1111121221111121_to_11111212211111211:
    "All p #t1. ProgressFrom_1111121221111121(p )@t1 ==> 
       (Ex #t2. ProgressTo_11111212211111211(p )@t2)
    "

restriction progress_1111121211_to_1111121211111:
    "All p #t1. ProgressFrom_1111121211(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111121211111(p )@t2)
    "

restriction progress_1111111111121111211_to_111111111112111121111:
    "All p #t1. ProgressFrom_1111111111121111211(p )@t1 ==> 
       (Ex #t2. ProgressTo_111111111112111121111(p )@t2)
    "

restriction progress_111111111111111211_to_11111111111111121111:
    "All p #t1. ProgressFrom_111111111111111211(p )@t1 ==> 
       (Ex #t2. ProgressTo_11111111111111121111(p )@t2)
    "

restriction progress_211_to_21111:
    "All p #t1. ProgressFrom_211(p )@t1 ==> 
       (Ex #t2. ProgressTo_21111(p )@t2)
    "

restriction progress_1111111111122111_to_111111111112211111:
    "All p #t1. ProgressFrom_1111111111122111(p )@t1 ==> 
       (Ex #t2. ProgressTo_111111111112211111(p )@t2)
    "

restriction progress_1111112121111112111_to_111111212111111211111:
    "All p #t1. ProgressFrom_1111112121111112111(p )@t1 ==> 
       (Ex #t2. ProgressTo_111111212111111211111(p )@t2)
    "

restriction progress_1111112111111112111_to_111111211111111211111:
    "All p #t1. ProgressFrom_1111112111111112111(p )@t1 ==> 
       (Ex #t2. ProgressTo_111111211111111211111(p )@t2)
    "

restriction progress_1111112111_to_11111121111111111111_or_11111121111111121:
    "All p #t1. ProgressFrom_1111112111(p )@t1 ==> 
       (Ex #t2. ProgressTo_11111121111111111111(p )@t2)
	 | (Ex #t2. ProgressTo_11111121111111121(p )@t2)
    "

restriction progress_111112111_to_111112111111:
    "All p #t1. ProgressFrom_111112111(p )@t1 ==> 
       (Ex #t2. ProgressTo_111112111111(p )@t2)
    "

restriction progress_11112111_to_111121111:
    "All p #t1. ProgressFrom_11112111(p )@t1 ==> 
       (Ex #t2. ProgressTo_111121111(p )@t2)
    "

restriction progress_11111212111111_to_1111121211111111:
    "All p #t1. ProgressFrom_11111212111111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111121211111111(p )@t2)
    "

restriction progress_1111121221111111_to_11111212211111111:
    "All p #t1. ProgressFrom_1111121221111111(p )@t1 ==> 
       (Ex #t2. ProgressTo_11111212211111111(p )@t2)
    "

restriction progress_1111121111111_to_11111211111111:
    "All p #t1. ProgressFrom_1111121111111(p )@t1 ==> 
       (Ex #t2. ProgressTo_11111211111111(p )@t2)
    "

restriction progress_111_to_1111212:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111212(p )@t2)
    "

restriction progress_111_to_11111121:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_11111121(p )@t2)
    "

restriction progress_111_to_1111121:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111121(p )@t2)
    "

restriction progress_111_to_1111211:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111211(p )@t2)
    "

restriction progress_111_to_1111111111111111111_or_11111111111211111111_or_11111111111111121_or_111111111112111121_or_11111111111221:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111111111111111111(p )@t2)
	 | (Ex #t2. ProgressTo_11111111111211111111(p )@t2)
	 | (Ex #t2. ProgressTo_11111111111111121(p )@t2)
	 | (Ex #t2. ProgressTo_111111111112111121(p )@t2)
	 | (Ex #t2. ProgressTo_11111111111221(p )@t2)
    "

restriction progress__to_2:
    "All p #t1. ProgressFrom_(p )@t1 ==> 
       (Ex #t2. ProgressTo_2(p )@t2)
    "

restriction progress__to_1:
    "All p #t1. ProgressFrom_(p )@t1 ==> 
       (Ex #t2. ProgressTo_1(p )@t2)
    "


restriction progress_init:
    " Ex #t. Init()@t "

restriction resilient: 
    "All #i x y. Send(x,y)@i ==> Ex #j. Receive(x,y)@j & #i<#j "

 
 restriction locking_6: 
 "All p pp l x lp #t1 #t3 . Lock_6(p,l,x)@t1 & Lock(pp,lp,x)@t3 
         ==> 
         ( #t1<#t3 
                  & (Ex #t2. Unlock_6(p,l,x)@t2 & #t1<#t2 & #t2<#t3  
                  & (All #t0 pp  . Unlock(pp,l,x)@t0 ==> #t0=#t2) 
                  & (All pp lpp #t0 . Lock(pp,lpp,x)@t0 ==> #t0<#t1 | #t0=#t1 | #t2<#t0) 
                  & (All pp lpp #t0 . Unlock(pp,lpp,x)@t0 ==> #t0<#t1 | #t2<#t0 | #t2=#t0 ) 
                 )) 
         | #t3<#t1 | #t1=#t3 " 

  
 restriction locking_7: 
 "All p pp l x lp #t1 #t3 . Lock_7(p,l,x)@t1 & Lock(pp,lp,x)@t3 
         ==> 
         ( #t1<#t3 
                  & (Ex #t2. Unlock_7(p,l,x)@t2 & #t1<#t2 & #t2<#t3  
                  & (All #t0 pp  . Unlock(pp,l,x)@t0 ==> #t0=#t2) 
                  & (All pp lpp #t0 . Lock(pp,lpp,x)@t0 ==> #t0<#t1 | #t0=#t1 | #t2<#t0) 
                  & (All pp lpp #t0 . Unlock(pp,lpp,x)@t0 ==> #t0<#t1 | #t2<#t0 | #t2=#t0 ) 
                 )) 
         | #t3<#t1 | #t1=#t3 " 

  
 restriction locking_8: 
 "All p pp l x lp #t1 #t3 . Lock_8(p,l,x)@t1 & Lock(pp,lp,x)@t3 
         ==> 
         ( #t1<#t3 
                  & (Ex #t2. Unlock_8(p,l,x)@t2 & #t1<#t2 & #t2<#t3  
                  & (All #t0 pp  . Unlock(pp,l,x)@t0 ==> #t0=#t2) 
                  & (All pp lpp #t0 . Lock(pp,lpp,x)@t0 ==> #t0<#t1 | #t0=#t1 | #t2<#t0) 
                  & (All pp lpp #t0 . Unlock(pp,lpp,x)@t0 ==> #t0<#t1 | #t2<#t0 | #t2=#t0 ) 
                 )) 
         | #t3<#t1 | #t1=#t3 " 

 lemma sanity_a4b3 : exists-trace
"	Ex #i #j a b t sida sidb. EndA4(a, b, t, sida) @ i & EndB3(a, b, t, sidb) @ j & not( Ex #k. Corrupt(a) @ k ) & not( Ex #k. Corrupt(b) @ k )"

lemma sanity_a1b1 : exists-trace
"	Ex #i #j a b t sida sidb. EndA1(a, b, t, sida) @ i & EndB1(a, b, t, sidb) @ j & not( Ex #k. Corrupt(a) @ k ) & not( Ex #k. Corrupt(b) @ k )"

lemma sanity_a2b2 : exists-trace
"	Ex #i #j a b t sida sidb. EndA2(a, b, t, sida) @ i & EndB2(a, b, t, sidb) @ j & not( Ex #k. Corrupt(a) @ k ) & not( Ex #k. Corrupt(b) @ k )"

lemma sanity_a3b3 : exists-trace
"	Ex #i #j a b t sida sidb. EndA3(a, b, t, sida) @ i & EndB3(a, b, t, sidb) @ j & not( Ex #k. Corrupt(a) @ k ) & not( Ex #k. Corrupt(b) @ k )"

lemma timelinessA [reuse]:
"	All #i a b t sida. StartA(a, b, t, sida) @ i ==> ( Ex #j. ContractA(a, b, t, sida) @ j ) | ( Ex #j. AbortA(a, b, t, sida) @ j ) | ( Ex #j. Corrupt(a) @ j )"

lemma timelinessB [reuse]:
"	All #i a b t nb. StartB(a, b, t, nb) @ i ==> ( Ex #j. ContractB(a, b, t, nb) @ j ) | ( Ex #j. AbortB(a, b, t, nb) @ j ) | ( Ex #j. Corrupt(b) @ j )"

lemma fullfairnessA :
"	All #i a b t. ContractJudge(a, b, t) @ i ==> ( Ex #j sida. ContractA(a, b, t, sida) @ j ) | ( Ex #k. Corrupt(a) @ k )"

lemma fullfairnessB :
"	All #i a b t. ContractJudge(a, b, t) @ i ==> ( Ex #j nb. ContractB(a, b, t, nb) @ j ) | ( Ex #k. Corrupt(b) @ k )"

end
