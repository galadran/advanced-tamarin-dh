theory GJMLocks
begin

section{* Garay-Jakobsson-MacKenzie contract signing protocol *}

/*
 * Protocol:    GJM contract signing 
 * Modeler:     Robert Kunnemann 
 * Date:        Jul 2016
 *
 * Status:  wip 
 *
 * Juan A. Garay, Markus Jakobsson, and Philip D. MacKenzie. Abuse-free
 * optimistic contract signing. In Advances in Cryptology—Crypto’99, volume
 * 1666 of LNCS, pages 449–466. Springer, 1999.
 *
 * This version uses locks instead of lookups for the modelling of the TPM.
 *
 * also: B's resolve message to TTP is now encrypted. Original paper assumed
 * channel to be secret.
 */

functions: 
    pk/1,sk/1[private],
    aenc/2, adec/2,
    sign/2, verify/2,
    /* extrmsg/1, */
    true/0,
    pcs/3, checkpcs/5, convertpcs/2, verify/2, fakepcs/4

equations: 
    adec(aenc(m,pk(i)),sk(i))=m,
    verify(sign(m, sk(i)), pk(i)) = m,
    /* extrmsg(sign(m,x))=m, */
    checkpcs(c, pk(s), pk(v), pk(ttp), pcs(sign(c, sk(s)), pk(v), pk(ttp))) = true,
    convertpcs(sk(ttp), pcs(sign(c, sk(s)), pk(v), pk(ttp))) = sign(c, sk(s)),
    /* fakepcs () */
    checkpcs(c, pk(s), pk(v), pk(ttp), fakepcs(pk(s), sk(v), pk(ttp), c)) = true

options: progress


  /* Taken from tamarin examples, quote:

    The above two equations are inspired by the following design decisions.
    We model a private signature of a contract 'xc' that is
      - meant for 'y' identified by his public key 'ypk'
      - privately signed by 'x' using his private key 'xsk'
      - to be converted by the trusted party 'z' identified by its public key
        'zpk'
     using the term 'pcs(sign(xsk, xc), ypk, zpk)'.

     This term chan be checked against 'xc', 'pk(xsk)', ypk, and zpk using
     the 'checkpcs' algorithm.

     It can be converted to a standard signature using the 'convertpcs'
     algorithm provided one has access to the private key of the trusted
     party.

     Note that we embedd the proper standard signature immediately into the
     'pcs' term, as the resulting equational theory is not subterm-convergent
     otherwise.

     Adapted:
        - renamed x->s (signer) y->v (verifier) z-> ttp

     Notes:
        - paper defines S-Convert as well as TP-Convert, but S-Convert would
          correspond to the following formula, which is redundant with the
          sign-constructor.
          convertpcs(sk(s), pcs(sign(c, sk(s)), pk(v), pk(ttp))) = sign(c, sk(s)),

  */

  /* New convention for communication on reliable channel:
   * <to,sid>
   */

let A = /* in('c',text); */
        new sida; event StartA($A,$B,text,sida);
        let m1 = pcs(sign(<text,'1'>,sk($A)),pk($B),pk(TTPID)) in
        /* let m2 = pcs(sign(<text,'2'>,sk($B)),pk($A),pk(TTPID)) in */
        let m3 = sign(<text,'1'>,sk($A)) in
        let m4 = sign(<text,'2'>,sk($B)) in
        let a1 = sign(<text,$A,$B,'abort'>,sk('A')) in
        let a2 = sign(a1,sk(TTPID)) in
        let r1 = <m3,m2> in
        out('c',m1);
        (
          in('c',m2);
          event AssertEqual(checkpcs(<text,'2'>,pk($B),pk($A), pk(TTPID), m2),true());
          out('c',m3);
          (
           in('c',m4);
           event ContractA($A,$B,text,sida);
           event EndA4($A,$B,text,sida)
          )
          +
          ( /* Resolve */
            out('r',<TTPID,sida,r1>);
            /* if A is honest, she would not forget that she requested an
             * abort before, thus we leave this step out
             * (despite it being part of the protocol description)
             */
            /*
            (
             in('r',<'originator',TTPID,$A,a2>);
             event AbortA(text,sida)
            ) + ( */
             in('r',<$A,sida,m4>);
             event ContractA($A,$B,text,sida);
             event EndA3($A,$B,text,sida)
            /* ) */
          )
        )
        +
        ( /* Abort */
          out('r',<TTPID,sida,a1>);
          (
            in('r',<$A,sida,a2>);
            event AbortA($A,$B,text,sida);
            event EndA1($A,$B,text,sida)
          )
          + (
            in('r',<$A,sida,m4>);
            event ContractA($A,$B,text,sida);
            event EndA2($A,$B,text,sida) 
          )
          /* TODO Protocol description forsees a third alternative:
           * TTP might send m3(!) to A -- but A can generate this herself. Why
           * does this happen? Note that m3 is send if Resolve1 was called
           * before, which should not take place anyway, if we excute the abort protocol.
           */
        )

let B = 
        /* let m1 = pcs(sign(<text,'1'>,sk($A)),pk($B),pk(TTPID)) in */
        let m2 = pcs(sign(<text,'2'>,sk($B)),pk($A),pk(TTPID)) in
        let m3 = sign(<text,'1'>,sk($A)) in
        let m4 = sign(<text,'2'>,sk($B)) in
        let a1 = sign(<text,$A,$B,'abort'>,sk('A')) in
        let a2 = sign(a1,sk(TTPID)) in
        let r2 = <m1,m4> in
        in('c',m1);
        event AssertEqual(checkpcs(<text,'1'>,pk($A),pk($B), pk(TTPID), m1),true());
        new sidb; event StartB($A,$B,text,sidb);
        out('c',m2);
        (
          in('c',m3);
          event ContractB($A,$B,text,sidb);
          event EndB3($A,$B,text,sidb);
          out('c',m4)
        )
        +
        ( /* Resolve */
          out('r',<TTPID,sidb,aenc(r2,pk(TTPID))>);
          (
          in('r',<$B,sidb,a2>);
          event AbortB($A,$B,text,sidb);
          event EndB1($A,$B,text,sidb)
          ) + (
          in('r',<$B,sidb,m3>);
          event ContractB($A,$B,text,sidb);
          event EndB2($A,$B,text,sidb)
          )
        )


/* TODO justify pattern matching by explaining each
 * step in the comments, using the equations */
let TTP = 
let m1 = pcs(sign(<text,'1'>,sk($A)),pk($B),pk(TTPID)) in
let m2 = pcs(sign(<text,'2'>,sk($B)),pk($A),pk(TTPID)) in
let m3 = sign(<text,'1'>,sk($A)) in
let m4 = sign(<text,'2'>,sk($B)) in
let a1 = sign(<text,$A,$B,'abort'>,sk($A)) in
let a2 = sign(a1,sk(TTPID)) in
let r1 = <m3,m2> in
let r2 = <m1,m4> in
( /* Abort */
  in('r',<TTPID,sida,a1>);
  lock text; /* only possible if neither aborted nor resolved */
  out('r',<$A,sida,a2>);
  event AbortCert($A,$B,text);
  /* from now on only executed if B tries to resolve */
  in('r',<TTPID,sidb,aenc(r2,pk(TTPID))>);
  out('r',<$B,sidb,a2>)
  /* no unlock! */
    /* if A resolved previously */
    /* out('r',<'originator',TTPID,$A,siga>); */
    /* if B resolved previously */
    /* out('r',<'originator',TTPID,$A,sigb>); */
)
+
( /* Resolve A */
  in('r',<TTPID,sida,r1>);
  lock text;
  out('r',<$A,sida,convertpcs(sk(TTPID),m2)>);
  in('r',<TTPID,sidb,aenc(r2,pk(TTPID))>);
  out('r',<$B,sidb,m3>);
  event ResolveCert($A,$B,text)
  /* note that if A calls for resolve, B must have sent m2
   * and thus has a contract.
  /* no unlock! */
    /* if A aborted previously */
    /* out('r',<'originator',TTPID,$A,abortcert>); */
    /* if B resolved previously */
    /* out('r',<'originator',TTPID,$A,resolvesig>); */
)
+
( /* Resolve B */
  in('r',<TTPID,sidb,aenc(r2,pk(TTPID))>);
  lock text;
  out('r',<$B,sidb,convertpcs(sk(TTPID),m1)>);
  event ResolveCert($A,$B,text);
  ( /* A wants to abort */
  in('r',<TTPID,sida,a1>);
  out('r',<$A,sida,m4>)
  ) + ( /* A wants to resolve */
  in('r',<TTPID,sida,r1>);
  out('r',<$A,sida,m4>)
  )
    /* if A aborted previously */
    /* out('r',<'responder',TTPID,$B,abortcert>); */
    /* if A resolved previously */
    /* out('r',<'responder',TTPID,$B,resolvesig>); */
)

let Judge = 
  let m1 = pcs(sign(<text,'1'>,sk($A)),pk($B),pk(TTPID)) in
  let m2 = pcs(sign(<text,'2'>,sk($B)),pk($A),pk(TTPID)) in
  let m3 = sign(<text,'1'>,sk($A)) in
  let m4 = sign(<text,'2'>,sk($B)) in
  let a1 = sign(<text,$A,$B,'abort'>,sk($A)) in
  let a2 = sign(a1,sk(TTPID)) in
  let wittness_resolved = sign(<sign(text,sk1), sign(text,sk2)>,sk(TTPID)) in
             (in('c',<m3,m4>); event ContractJudge($A,$B,text))
         ||  (in('c',a2); event AbortJudge($A,$B,text))

let TTPID=<'TTP',$TTP> in
let text=<$A,$B,$TEXT,TTPID> in
!(
in('c',<$A,$B,<'TTP',$TTP>,$TEXT>);
event TTP(TTPID);
 ( A || B || TTP || Judge)
)
|| !(   in('c',<'corrupt',$x>); 
        event Corrupt($x);
        out('c',sk($x));
        (  !(in('r',<$x,sid,m>);0) 
        )
   )

restriction assert:
    "All x y #j. AssertEqual(x,y)@j ==> x=y"

/* auto */
lemma sanity_a4b3: /* optimistic execution */
exists-trace
 "Ex #i #j  a b t sida sidb. 
    EndA4(a,b,t,sida)@i 
  & EndB3(a,b,t,sidb)@j
  & not (Ex #k. Corrupt(a)@k)
  & not (Ex #k. Corrupt(b)@k)
  "

/* lemma generic_cleanup [reuse]: */
/* all-traces */
/*     " All x m1 m2 #i #j. */
/*     Receive(x,m1)@i  & */ 
/*     Receive(x,m2)@j */ 
/*     ==> #i=#j" */

/* automatic? (ca. 1hour) 
 * not auto was by simplify, not by induction
 * need to see if we want to have this as a source lemma
 * or restriction
 * */
/* lemma cleanup [reuse]: */
/* all-traces */
/*     " All x1 x2 r x ttp m #i #j #t. */
/*     Receive(x1,<r,x,ttp,m>)@i  & */ 
/*     Receive(x2,<r,x,ttp,m>)@j  & */
/*     TTP(ttp)@t */
/*     ==> #i=#j | Ex #k. Corrupt(x)@k" */

/* manual inspection: all messages marked as "currently deducible", 
 * and all Receives are redundant */
/* even with cleanup as typing, it seems to diverge */
/* UPDATED: manual inspection */
lemma sanity_a1b1:
exists-trace
 "Ex #i #j  a b t sida sidb. 
    EndA1(a,b,t,sida)@i 
  & EndB1(a,b,t,sidb)@j
  & not (Ex #k. Corrupt(a)@k)
  & not (Ex #k. Corrupt(b)@k)
  "

/* manual */
lemma sanity_a2b2:
exists-trace
 "Ex #i #j  a b t sida sidb. 
    EndA2(a,b,t,sida)@i 
  & EndB2(a,b,t,sidb)@j
  & not (Ex #k. Corrupt(a)@k)
  & not (Ex #k. Corrupt(b)@k)
  "

/* test remove later */
/* seems to help with sanity lemmas, so keep for manual verification */
 /* cleanup (all-traces): verified (27840 steps) */
lemma cleanup [reuse]:
all-traces
    "All x1 x2 x sid m #i #j .
    Receive(x1,<x,sid,m>)@i  & 
    Receive(x2,<x,sid,m>)@j
    ==> #i=#j | Ex #k. Corrupt(x)@k"


lemma sanity_a3b3:
exists-trace
 "Ex #i #j  a b t sida sidb. 
    EndA3(a,b,t,sida)@i 
  & EndB3(a,b,t,sidb)@j
  & not (Ex #k. Corrupt(a)@k)
  & not (Ex #k. Corrupt(b)@k)
  "

/* automatic */
/* lemma aborted_and_resolved_exclusive: */
/*   "not (Ex a b t #i #j. AbortCert(a,b,t) @ i & ResolveCert(a,b,t) @ j)" */


/* TODO need to recheck everything ... */

/* automatic (manual works to)*/
lemma timelinessA [reuse]:
    "All #i a b t sida. StartA(a, b, t, sida)@i
    	    ==>  ( Ex #j .  ContractA(a, b, t, sida)@j)
             | ( Ex #j .  AbortA(a, b, t, sida)@j )
             | ( Ex #j. Corrupt(a)@j)"

/* automatic (> 1h)*/
lemma timelinessB [reuse]:
    "All #i a b t nb. StartB(a, b, t, nb)@i
    	    ==>  ( Ex #j .  ContractB(a, b, t, nb)@j)
             | ( Ex #j .  AbortB(a, b, t, nb)@j )
             | ( Ex #j. Corrupt(b)@j)
             "

/* lemma helper [reuse]: */
/*     " not (Ex #i #j ttp a b t na. */
/*         TTPAbort(ttp, a, b, t, na)@i & ResponderResolved(ttp, a, b, t, na)@j */ 
/*         ) */
/*         " */

/* TODO check: both fairness lemmas together take 8:28h on colossus */
lemma fullfairnessA:
    "All #i a b t . ContractJudge(a,b,t)@i
        ==> (Ex #j sida . ContractA(a,b,t, sida)@j) 
            | (Ex #k. Corrupt(a)@k)"

lemma fullfairnessB:
    "All #i a b t . ContractJudge(a,b,t)@i
        ==> (Ex #j nb . ContractB(a,b,t, nb)@j) 
            | (Ex #k. Corrupt(b)@k)"

end    
