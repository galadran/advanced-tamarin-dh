theory ASWmodLocks begin

// Function signature and definition of the equational theory E

functions: extrmsg/1, fst/1, h/1, pair/2, pk/1, sign/2,
           sk/1 [private], snd/1, true/0, verify/2
equations:
    extrmsg(sign(m, x)) = m,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(m, sk(i)), pk(i)) = true

section{* The ASW contract signing protocol *}

rule (modulo E) Init:
   [ Fr( ~prog_ ) ]
  --[ Init( ), ProgressFrom_( ~prog_ ) ]->
   [ State_( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) MessageID_rule:
   [ Fr( ~x ) ] --> [ MID_Sender( ~x ), MID_Receiver( ~x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par:
   [ State_( ~prog_ ) ]
  --[ ProgressTo_2( ~prog_ ), ProgressTo_1( ~prog_ ) ]->
   [ State_1( ~prog_ ), State_2( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_01:
   [ State_1( ~prog_ ) ] --> [ !Semistate_11( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_11:
   [ !Semistate_11( ~prog_ ) ] --> [ State_11( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_c_A_B_TTP_TTP_11:
   [
   Fr( ~prog_111 ), State_11( ~prog_ ),
   In( <'c', $A, $B, 'TTP', $TTP> )
   ]
  --[
  ProgressFrom_111( ~prog_111 ),
  ChannelInEvent( <'c', $A, $B, 'TTP', $TTP> )
  ]->
   [ State_111( $A, $B, $TTP, ~prog_, ~prog_111 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par111:
   [ State_111( $A, $B, $TTP, ~prog_, ~prog_111 ) ]
  -->
   [
   State_1111( $A, $B, $TTP, ~prog_, ~prog_111 ),
   State_1112( $A, $B, $TTP, ~prog_, ~prog_111 )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par1111:
   [ State_1111( $A, $B, $TTP, ~prog_, ~prog_111 ) ]
  -->
   [
   State_11111( $A, $B, $TTP, ~prog_, ~prog_111 ),
   State_11112( $A, $B, $TTP, ~prog_, ~prog_111 )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par11111:
   [ State_11111( $A, $B, $TTP, ~prog_, ~prog_111 ) ]
  --[ ProgressTo_111112( ~prog_111 ), ProgressTo_111111( ~prog_111 )
  ]->
   [
   State_111111( $A, $B, $TTP, ~prog_, ~prog_111 ),
   State_111112( $A, $B, $TTP, ~prog_, ~prog_111 )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_c_TEXT111111:
   [
   Fr( ~prog_1111111 ),
   State_111111( $A, $B, $TTP, ~prog_, ~prog_111 ), In( <'c', $TEXT> )
   ]
  --[
  ProgressFrom_1111111( ~prog_1111111 ),
  ChannelInEvent( <'c', $TEXT> )
  ]->
   [
   State_1111111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                  ~prog_1111111
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_na1111111:
   [
   State_1111111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                  ~prog_1111111
   ),
   Fr( na )
   ]
  -->
   [
   State_11111111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                   ~prog_1111111, na
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_StartA_A_B_TEXT_na11111111:
   [
   State_11111111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                   ~prog_1111111, na
   )
   ]
  --[ Event( ), StartA( $A, $B, $TEXT, na ) ]->
   [
   State_111111111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                    ~prog_1111111, na
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_StartAm1sign_A_B_TTP_TTP_TEXT_hna_sk_A111111111:
   [
   State_111111111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                    ~prog_1111111, na
   )
   ]
  --[
  Event( ),
  StartAm1( sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)) )
  ]->
   [
   State_1111111111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                     ~prog_1111111, na
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_c_sign_A_B_TTP_TTP_TEXT_hna_sk_A1111111111:
   [
   State_1111111111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                     ~prog_1111111, na
   ),
   In( 'c' )
   ]
  --[ ChannelInEvent( 'c' ) ]->
   [
   State_11111111111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                      ~prog_1111111, na
   ),
   Out( sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_c_sign_hsign_A_B_TTP_TTP_TEXT_hna_sk_A_hnb_sk_B111111111111:
   [
   State_11111111111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                      ~prog_1111111, na
   ),
   In( <'c', 
        sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
             >,
             sk($B))
       >
   )
   ]
  --[
  ChannelInEvent( <'c', 
                   sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
                        >,
                        sk($B))
                  >
  )
  ]->
   [
   State_1111111111111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                        ~prog_1111111, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_c_sign_na_hnb_sk_A1111111111111:
   [
   State_1111111111111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                        ~prog_1111111, na, nb
   ),
   In( 'c' )
   ]
  --[ ChannelInEvent( 'c' ) ]->
   [
   State_11111111111111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                         ~prog_1111111, na, nb
   ),
   Out( sign(<na, h(nb)>, sk($A)) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_c_sign_nb_hna_sk_B111111111111111:
   [
   State_11111111111111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                         ~prog_1111111, na, nb
   ),
   In( <'c', sign(<nb, h(na)>, sk($B))> )
   ]
  --[ ChannelInEvent( <'c', sign(<nb, h(na)>, sk($B))> ) ]->
   [
   State_1111111111111111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                           ~prog_1111111, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_ContractA_A_B_TEXT_na1111111111111111:
   [
   State_1111111111111111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                           ~prog_1111111, na, nb
   )
   ]
  --[ Event( ), ContractA( $A, $B, $TEXT, na ) ]->
   [
   State_11111111111111111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                            ~prog_1111111, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_EndA1_A_B_TEXT_na11111111111111111:
   [
   State_11111111111111111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                            ~prog_1111111, na, nb
   )
   ]
  --[
  ProgressTo_111111111111111111( ~prog_1111111 ), Event( ),
  EndA1( $A, $B, $TEXT, na )
  ]->
   [
   State_111111111111111111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                             ~prog_1111111, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero111111111111111111:
   [
   State_111111111111111111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                             ~prog_1111111, na, nb
   )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_r_originator_A_TTP_TTP_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sign_hsign_A_B_TTP_TTP_TEXT_hna_sk_A_hnb_sk_B_111111111111112:
   [
   MID_Sender( mid_111111111111112 ),
   State_11111111111111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                         ~prog_1111111, na, nb
   )
   ]
  --[
  ProgressTo_1111111111111121( ~prog_1111111 ),
  Send( mid_111111111111112,
        <'originator', $A, <'TTP', $TTP>, 
         sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)), 
         sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
              >,
              sk($B))
        >
  )
  ]->
   [
   Out( <'originator', $A, <'TTP', $TTP>, 
         sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)), 
         sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
              >,
              sk($B))
        >
   ),
   State_1111111111111121( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                           ~prog_1111111, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_r_originator_TTP_TTP_A_sign_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sign_hsign_A_B_TTP_TTP_TEXT_hna_sk_A_hnb_sk_B_sk_TTP_TTP__1111111111111121:
   [
   Fr( ~prog_11111111111111211 ),
   State_1111111111111121( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                           ~prog_1111111, na, nb
   ),
   In( <'originator', <'TTP', $TTP>, $A, 
        sign(<sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)), 
              sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
                   >,
                   sk($B))
             >,
             sk(<'TTP', $TTP>))
       >
   ),
   MID_Receiver( mid_1111111111111121 )
   ]
  --[
  ProgressFrom_11111111111111211( ~prog_11111111111111211 ),
  Receive( mid_1111111111111121,
           <'originator', <'TTP', $TTP>, $A, 
            sign(<sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)), 
                  sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
                       >,
                       sk($B))
                 >,
                 sk(<'TTP', $TTP>))
           >
  )
  ]->
   [
   State_11111111111111211( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                            ~prog_1111111, ~prog_11111111111111211, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_ContractA_A_B_TEXT_na11111111111111211:
   [
   State_11111111111111211( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                            ~prog_1111111, ~prog_11111111111111211, na, nb
   )
   ]
  --[ Event( ), ContractA( $A, $B, $TEXT, na ) ]->
   [
   State_111111111111112111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                             ~prog_1111111, ~prog_11111111111111211, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_EndA2_A_B_TEXT_na111111111111112111:
   [
   State_111111111111112111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                             ~prog_1111111, ~prog_11111111111111211, na, nb
   )
   ]
  --[
  ProgressTo_1111111111111121111( ~prog_11111111111111211 ),
  Event( ), EndA2( $A, $B, $TEXT, na )
  ]->
   [
   State_1111111111111121111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                              ~prog_1111111, ~prog_11111111111111211, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero1111111111111121111:
   [
   State_1111111111111121111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                              ~prog_1111111, ~prog_11111111111111211, na, nb
   )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_r_originator_A_TTP_TTP_sign_Abort_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sk_A_111111111112:
   [
   MID_Sender( mid_111111111112 ),
   State_11111111111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                      ~prog_1111111, na
   )
   ]
  --[
  ProgressTo_1111111111121( ~prog_1111111 ),
  Send( mid_111111111112,
        <'originator', $A, <'TTP', $TTP>, 
         sign(<'Abort', sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))
              >,
              sk($A))
        >
  )
  ]->
   [
   Out( <'originator', $A, <'TTP', $TTP>, 
         sign(<'Abort', sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))
              >,
              sk($A))
        >
   ),
   State_1111111111121( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                        ~prog_1111111, na
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_r_originator_TTP_TTP_A_sign_Aborted_sign_Abort_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sk_A_sk_TTP_TTP__11111111111211:
   [
   Fr( ~prog_111111111112111 ),
   State_1111111111121( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                        ~prog_1111111, na
   ),
   In( <'originator', <'TTP', $TTP>, $A, 
        sign(<'Aborted', 
              sign(<'Abort', sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))
                   >,
                   sk($A))
             >,
             sk(<'TTP', $TTP>))
       >
   ),
   MID_Receiver( mid_11111111111211 )
   ]
  --[
  ProgressFrom_111111111112111( ~prog_111111111112111 ),
  Receive( mid_11111111111211,
           <'originator', <'TTP', $TTP>, $A, 
            sign(<'Aborted', 
                  sign(<'Abort', sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))
                       >,
                       sk($A))
                 >,
                 sk(<'TTP', $TTP>))
           >
  )
  ]->
   [
   State_111111111112111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                          ~prog_1111111, ~prog_111111111112111, na
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_AbortA_A_B_TEXT_na111111111112111:
   [
   State_111111111112111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                          ~prog_1111111, ~prog_111111111112111, na
   )
   ]
  --[ Event( ), AbortA( $A, $B, $TEXT, na ) ]->
   [
   State_1111111111121111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                           ~prog_1111111, ~prog_111111111112111, na
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_EndA3_A_B_TEXT_na1111111111121111:
   [
   State_1111111111121111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                           ~prog_1111111, ~prog_111111111112111, na
   )
   ]
  --[
  ProgressTo_11111111111211111( ~prog_111111111112111 ), Event( ),
  EndA3( $A, $B, $TEXT, na )
  ]->
   [
   State_11111111111211111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                            ~prog_1111111, ~prog_111111111112111, na
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero11111111111211111:
   [
   State_11111111111211111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                            ~prog_1111111, ~prog_111111111112111, na
   )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_r_originator_TTP_TTP_A_sign_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sign_hsign_A_B_TTP_TTP_TEXT_hna_sk_A_hnb_sk_B_sk_TTP_TTP__11111111111212:
   [
   Fr( ~prog_111111111112121 ),
   State_1111111111121( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                        ~prog_1111111, na
   ),
   In( <'originator', <'TTP', $TTP>, $A, 
        sign(<sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)), 
              sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
                   >,
                   sk($B))
             >,
             sk(<'TTP', $TTP>))
       >
   ),
   MID_Receiver( mid_11111111111212 )
   ]
  --[
  ProgressFrom_111111111112121( ~prog_111111111112121 ),
  Receive( mid_11111111111212,
           <'originator', <'TTP', $TTP>, $A, 
            sign(<sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)), 
                  sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
                       >,
                       sk($B))
                 >,
                 sk(<'TTP', $TTP>))
           >
  )
  ]->
   [
   State_111111111112121( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                          ~prog_1111111, ~prog_111111111112121, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_ContractA_A_B_TEXT_na111111111112121:
   [
   State_111111111112121( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                          ~prog_1111111, ~prog_111111111112121, na, nb
   )
   ]
  --[ Event( ), ContractA( $A, $B, $TEXT, na ) ]->
   [
   State_1111111111121211( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                           ~prog_1111111, ~prog_111111111112121, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_EndA4_A_B_TEXT_na1111111111121211:
   [
   State_1111111111121211( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                           ~prog_1111111, ~prog_111111111112121, na, nb
   )
   ]
  --[
  ProgressTo_11111111111212111( ~prog_111111111112121 ), Event( ),
  EndA4( $A, $B, $TEXT, na )
  ]->
   [
   State_11111111111212111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                            ~prog_1111111, ~prog_111111111112121, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero11111111111212111:
   [
   State_11111111111212111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                            ~prog_1111111, ~prog_111111111112121, na, nb
   )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_c_sign_A_B_TTP_TTP_TEXT_hna_sk_A111112:
   [
   Fr( ~prog_1111121 ),
   State_111112( $A, $B, $TTP, ~prog_, ~prog_111 ),
   In( <'c', sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))> )
   ]
  --[
  ProgressFrom_1111121( ~prog_1111121 ),
  ChannelInEvent( <'c', 
                   sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))>
  )
  ]->
   [
   State_1111121( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                  ~prog_1111121, na
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_nb1111121:
   [
   State_1111121( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                  ~prog_1111121, na
   ),
   Fr( nb )
   ]
  -->
   [
   State_11111211( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                   ~prog_1111121, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_StartB_A_B_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sign_hsign_A_B_TTP_TTP_TEXT_hna_sk_A_hnb_sk_B_na_nb11111211:
   [
   State_11111211( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                   ~prog_1111121, na, nb
   )
   ]
  --[
  Event( ),
  StartB( $A, $B,
          sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)),
          sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
               >,
               sk($B)),
          na, nb
  )
  ]->
   [
   State_111112111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                    ~prog_1111121, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_c_sign_hsign_A_B_TTP_TTP_TEXT_hna_sk_A_hnb_sk_B111112111:
   [
   State_111112111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                    ~prog_1111121, na, nb
   ),
   In( 'c' )
   ]
  --[ ChannelInEvent( 'c' ) ]->
   [
   State_1111121111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                     ~prog_1111121, na, nb
   ),
   Out( sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), 
              h(nb)>,
             sk($B))
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_c_sign_na_hnb_sk_A11111211111:
   [
   State_1111121111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                     ~prog_1111121, na, nb
   ),
   In( <'c', sign(<na, h(nb)>, sk($A))> )
   ]
  --[ ChannelInEvent( <'c', sign(<na, h(nb)>, sk($A))> ) ]->
   [
   State_111112111111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                       ~prog_1111121, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_ContractB_A_B_TEXT_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sign_hsign_A_B_TTP_TTP_TEXT_hna_sk_A_hnb_sk_B_na_nb111112111111:
   [
   State_111112111111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                       ~prog_1111121, na, nb
   )
   ]
  --[
  Event( ),
  ContractB( $A, $B, $TEXT,
             sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)),
             sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
                  >,
                  sk($B)),
             na, nb
  )
  ]->
   [
   State_1111121111111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                        ~prog_1111121, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_EndB1_A_B_TEXT_na1111121111111:
   [
   State_1111121111111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                        ~prog_1111121, na, nb
   )
   ]
  --[ Event( ), EndB1( $A, $B, $TEXT, na ) ]->
   [
   State_11111211111111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                         ~prog_1111121, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_c_sign_nb_hna_sk_B11111211111111:
   [
   State_11111211111111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                         ~prog_1111121, na, nb
   ),
   In( 'c' )
   ]
  --[
  ProgressTo_111112111111111( ~prog_1111121 ), ChannelInEvent( 'c' )
  ]->
   [
   State_111112111111111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                          ~prog_1111121, na, nb
   ),
   Out( sign(<nb, h(na)>, sk($B)) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero111112111111111:
   [
   State_111112111111111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                          ~prog_1111121, na, nb
   )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_r_responder_B_TTP_TTP_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sign_hsign_A_B_TTP_TTP_TEXT_hna_sk_A_hnb_sk_B_11111211112:
   [
   MID_Sender( mid_11111211112 ),
   State_1111121111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                     ~prog_1111121, na, nb
   )
   ]
  --[
  ProgressTo_111112111121( ~prog_1111121 ),
  Send( mid_11111211112,
        <'responder', $B, <'TTP', $TTP>, 
         sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)), 
         sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
              >,
              sk($B))
        >
  )
  ]->
   [
   Out( <'responder', $B, <'TTP', $TTP>, 
         sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)), 
         sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
              >,
              sk($B))
        >
   ),
   State_111112111121( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                       ~prog_1111121, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_r_responder_TTP_TTP_B_sign_Aborted_sign_Abort_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sk_A_hnb_sk_TTP_TTP__1111121111211:
   [
   Fr( ~prog_11111211112111 ),
   State_111112111121( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                       ~prog_1111121, na, nb
   ),
   In( <'responder', <'TTP', $TTP>, $B, 
        sign(<'Aborted', 
              sign(<'Abort', sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))
                   >,
                   sk($A)), 
              h(nb)>,
             sk(<'TTP', $TTP>))
       >
   ),
   MID_Receiver( mid_1111121111211 )
   ]
  --[
  ProgressFrom_11111211112111( ~prog_11111211112111 ),
  Receive( mid_1111121111211,
           <'responder', <'TTP', $TTP>, $B, 
            sign(<'Aborted', 
                  sign(<'Abort', sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))
                       >,
                       sk($A)), 
                  h(nb)>,
                 sk(<'TTP', $TTP>))
           >
  )
  ]->
   [
   State_11111211112111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                         ~prog_1111121, ~prog_11111211112111, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_AbortB_A_B_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sign_hsign_A_B_TTP_TTP_TEXT_hna_sk_A_hnb_sk_B_na_nb11111211112111:
   [
   State_11111211112111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                         ~prog_1111121, ~prog_11111211112111, na, nb
   )
   ]
  --[
  Event( ),
  AbortB( $A, $B,
          sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)),
          sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
               >,
               sk($B)),
          na, nb
  )
  ]->
   [
   State_111112111121111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                          ~prog_1111121, ~prog_11111211112111, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_EndB2_A_B_TEXT_na111112111121111:
   [
   State_111112111121111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                          ~prog_1111121, ~prog_11111211112111, na, nb
   )
   ]
  --[
  ProgressTo_1111121111211111( ~prog_11111211112111 ), Event( ),
  EndB2( $A, $B, $TEXT, na )
  ]->
   [
   State_1111121111211111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                           ~prog_1111121, ~prog_11111211112111, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero1111121111211111:
   [
   State_1111121111211111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                           ~prog_1111121, ~prog_11111211112111, na, nb
   )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_r_responder_TTP_TTP_B_sign_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sign_hsign_A_B_TTP_TTP_TEXT_hna_sk_A_hnb_sk_B_sk_TTP_TTP__1111121111212:
   [
   Fr( ~prog_11111211112121 ),
   State_111112111121( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                       ~prog_1111121, na, nb
   ),
   In( <'responder', <'TTP', $TTP>, $B, 
        sign(<sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)), 
              sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
                   >,
                   sk($B))
             >,
             sk(<'TTP', $TTP>))
       >
   ),
   MID_Receiver( mid_1111121111212 )
   ]
  --[
  ProgressFrom_11111211112121( ~prog_11111211112121 ),
  Receive( mid_1111121111212,
           <'responder', <'TTP', $TTP>, $B, 
            sign(<sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)), 
                  sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
                       >,
                       sk($B))
                 >,
                 sk(<'TTP', $TTP>))
           >
  )
  ]->
   [
   State_11111211112121( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                         ~prog_1111121, ~prog_11111211112121, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_ContractB_A_B_TEXT_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sign_hsign_A_B_TTP_TTP_TEXT_hna_sk_A_hnb_sk_B_na_nb11111211112121:
   [
   State_11111211112121( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                         ~prog_1111121, ~prog_11111211112121, na, nb
   )
   ]
  --[
  Event( ),
  ContractB( $A, $B, $TEXT,
             sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)),
             sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
                  >,
                  sk($B)),
             na, nb
  )
  ]->
   [
   State_111112111121211( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                          ~prog_1111121, ~prog_11111211112121, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_EndB3_A_B_TEXT_na111112111121211:
   [
   State_111112111121211( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                          ~prog_1111121, ~prog_11111211112121, na, nb
   )
   ]
  --[
  ProgressTo_1111121111212111( ~prog_11111211112121 ), Event( ),
  EndB3( $A, $B, $TEXT, na )
  ]->
   [
   State_1111121111212111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                           ~prog_1111121, ~prog_11111211112121, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero1111121111212111:
   [
   State_1111121111212111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                           ~prog_1111121, ~prog_11111211112121, na, nb
   )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par11112:
   [ State_11112( $A, $B, $TTP, ~prog_, ~prog_111 ) ]
  --[ ProgressTo_111122( ~prog_111 ) ]->
   [
   State_111121( $A, $B, $TTP, ~prog_, ~prog_111 ),
   State_111122( $A, $B, $TTP, ~prog_, ~prog_111 )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par111121:
   [ State_111121( $A, $B, $TTP, ~prog_, ~prog_111 ) ]
  --[
  ProgressTo_1111212( ~prog_111 ), ProgressTo_1111211( ~prog_111 )
  ]->
   [
   State_1111211( $A, $B, $TTP, ~prog_, ~prog_111 ),
   State_1111212( $A, $B, $TTP, ~prog_, ~prog_111 )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_r_originator_A_TTP_TTP_sign_Abort_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sk_A_1111211:
   [
   Fr( ~prog_11112111 ),
   State_1111211( $A, $B, $TTP, ~prog_, ~prog_111 ),
   In( <'originator', $A, <'TTP', $TTP>, 
        sign(<'Abort', sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))
             >,
             sk($A))
       >
   ),
   MID_Receiver( mid_1111211 )
   ]
  --[
  ProgressFrom_11112111( ~prog_11112111 ),
  Receive( mid_1111211,
           <'originator', $A, <'TTP', $TTP>, 
            sign(<'Abort', sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))
                 >,
                 sk($A))
           >
  )
  ]->
   [
   State_11112111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                   ~prog_11112111, na
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_sign_A_B_TTP_TTP_TEXT_hna_sk_A11112111:
   [
   State_11112111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                   ~prog_11112111, na
   ),
   Fr( ~lock6 )
   ]
  --[
  Lock( ~lock6, sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)) )
  ]->
   [
   State_111121111( $A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111,
                    ~prog_11112111, na
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_TTPAbort_TTP_TTP_A_B_TEXT_na111121111:
   [
   State_111121111( $A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111,
                    ~prog_11112111, na
   )
   ]
  --[ Event( ), TTPAbort( <'TTP', $TTP>, $A, $B, $TEXT, na ) ]->
   [
   State_1111211111( $A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111,
                     ~prog_11112111, na
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_r_originator_TTP_TTP_A_sign_Aborted_sign_Abort_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sk_A_sk_TTP_TTP__1111211111:
   [
   MID_Sender( mid_1111211111 ),
   State_1111211111( $A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111,
                     ~prog_11112111, na
   )
   ]
  --[
  ProgressTo_11112111111( ~prog_11112111 ),
  Send( mid_1111211111,
        <'originator', <'TTP', $TTP>, $A, 
         sign(<'Aborted', 
               sign(<'Abort', sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))
                    >,
                    sk($A))
              >,
              sk(<'TTP', $TTP>))
        >
  )
  ]->
   [
   Out( <'originator', <'TTP', $TTP>, $A, 
         sign(<'Aborted', 
               sign(<'Abort', sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))
                    >,
                    sk($A))
              >,
              sk(<'TTP', $TTP>))
        >
   ),
   State_11112111111( $A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111,
                      ~prog_11112111, na
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_r_responder_B_TTP_TTP_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sign_hsign_A_B_TTP_TTP_TEXT_hna_sk_A_hnb_sk_B_11112111111:
   [
   Fr( ~prog_111121111111 ),
   State_11112111111( $A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111,
                      ~prog_11112111, na
   ),
   In( <'responder', $B, <'TTP', $TTP>, 
        sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)), 
        sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
             >,
             sk($B))
       >
   ),
   MID_Receiver( mid_11112111111 )
   ]
  --[
  ProgressFrom_111121111111( ~prog_111121111111 ),
  Receive( mid_11112111111,
           <'responder', $B, <'TTP', $TTP>, 
            sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)), 
            sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
                 >,
                 sk($B))
           >
  )
  ]->
   [
   State_111121111111( $A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111,
                       ~prog_11112111, ~prog_111121111111, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_r_responder_TTP_TTP_B_sign_Aborted_sign_Abort_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sk_A_hnb_sk_TTP_TTP__111121111111:
   [
   MID_Sender( mid_111121111111 ),
   State_111121111111( $A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111,
                       ~prog_11112111, ~prog_111121111111, na, nb
   )
   ]
  --[
  ProgressTo_1111211111111( ~prog_111121111111 ),
  Send( mid_111121111111,
        <'responder', <'TTP', $TTP>, $B, 
         sign(<'Aborted', 
               sign(<'Abort', sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))
                    >,
                    sk($A)), 
               h(nb)>,
              sk(<'TTP', $TTP>))
        >
  )
  ]->
   [
   Out( <'responder', <'TTP', $TTP>, $B, 
         sign(<'Aborted', 
               sign(<'Abort', sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))
                    >,
                    sk($A)), 
               h(nb)>,
              sk(<'TTP', $TTP>))
        >
   ),
   State_1111211111111( $A, $B, $TEXT, $TTP, ~lock6, ~prog_,
                        ~prog_111, ~prog_11112111, ~prog_111121111111, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero1111211111111:
   [
   State_1111211111111( $A, $B, $TEXT, $TTP, ~lock6, ~prog_,
                        ~prog_111, ~prog_11112111, ~prog_111121111111, na, nb
   )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_r_originator_A_TTP_TTP_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sign_hsign_A_B_TTP_TTP_TEXT_hna_sk_A_hnb_sk_B_1111212:
   [
   Fr( ~prog_11112121 ),
   State_1111212( $A, $B, $TTP, ~prog_, ~prog_111 ),
   In( <'originator', $A, <'TTP', $TTP>, 
        sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)), 
        sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
             >,
             sk($B))
       >
   ),
   MID_Receiver( mid_1111212 )
   ]
  --[
  ProgressFrom_11112121( ~prog_11112121 ),
  Receive( mid_1111212,
           <'originator', $A, <'TTP', $TTP>, 
            sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)), 
            sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
                 >,
                 sk($B))
           >
  )
  ]->
   [
   State_11112121( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                   ~prog_11112121, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_sign_A_B_TTP_TTP_TEXT_hna_sk_A11112121:
   [
   State_11112121( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                   ~prog_11112121, na, nb
   ),
   Fr( ~lock6 )
   ]
  --[
  Lock( ~lock6, sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)) )
  ]->
   [
   State_111121211( $A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111,
                    ~prog_11112121, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_TTPResolvesA_A_B_TEXT_na111121211:
   [
   State_111121211( $A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111,
                    ~prog_11112121, na, nb
   )
   ]
  --[ Event( ), TTPResolvesA( $A, $B, $TEXT, na ) ]->
   [
   State_1111212111( $A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111,
                     ~prog_11112121, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_r_originator_TTP_TTP_A_sign_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sign_hsign_A_B_TTP_TTP_TEXT_hna_sk_A_hnb_sk_B_sk_TTP_TTP__1111212111:
   [
   MID_Sender( mid_1111212111 ),
   State_1111212111( $A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111,
                     ~prog_11112121, na, nb
   )
   ]
  --[
  ProgressTo_11112121111( ~prog_11112121 ),
  Send( mid_1111212111,
        <'originator', <'TTP', $TTP>, $A, 
         sign(<sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)), 
               sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
                    >,
                    sk($B))
              >,
              sk(<'TTP', $TTP>))
        >
  )
  ]->
   [
   Out( <'originator', <'TTP', $TTP>, $A, 
         sign(<sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)), 
               sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
                    >,
                    sk($B))
              >,
              sk(<'TTP', $TTP>))
        >
   ),
   State_11112121111( $A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111,
                      ~prog_11112121, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_r_responder_B_TTP_TTP_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sign_hsign_A_B_TTP_TTP_TEXT_hna_sk_A_hnb_sk_B_11112121111:
   [
   Fr( ~prog_111121211111 ),
   State_11112121111( $A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111,
                      ~prog_11112121, na, nb
   ),
   In( <'responder', $B, <'TTP', $TTP>, 
        sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)), 
        sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
             >,
             sk($B))
       >
   ),
   MID_Receiver( mid_11112121111 )
   ]
  --[
  ProgressFrom_111121211111( ~prog_111121211111 ),
  Receive( mid_11112121111,
           <'responder', $B, <'TTP', $TTP>, 
            sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)), 
            sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
                 >,
                 sk($B))
           >
  )
  ]->
   [
   State_111121211111( $A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111,
                       ~prog_11112121, ~prog_111121211111, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_r_responder_TTP_TTP_B_sign_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sign_hsign_A_B_TTP_TTP_TEXT_hna_sk_A_hnb_sk_B_sk_TTP_TTP__111121211111:
   [
   MID_Sender( mid_111121211111 ),
   State_111121211111( $A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111,
                       ~prog_11112121, ~prog_111121211111, na, nb
   )
   ]
  --[
  ProgressTo_1111212111111( ~prog_111121211111 ),
  Send( mid_111121211111,
        <'responder', <'TTP', $TTP>, $B, 
         sign(<sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)), 
               sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
                    >,
                    sk($B))
              >,
              sk(<'TTP', $TTP>))
        >
  )
  ]->
   [
   Out( <'responder', <'TTP', $TTP>, $B, 
         sign(<sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)), 
               sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
                    >,
                    sk($B))
              >,
              sk(<'TTP', $TTP>))
        >
   ),
   State_1111212111111( $A, $B, $TEXT, $TTP, ~lock6, ~prog_,
                        ~prog_111, ~prog_11112121, ~prog_111121211111, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero1111212111111:
   [
   State_1111212111111( $A, $B, $TEXT, $TTP, ~lock6, ~prog_,
                        ~prog_111, ~prog_11112121, ~prog_111121211111, na, nb
   )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_r_responder_B_TTP_TTP_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sign_hsign_A_B_TTP_TTP_TEXT_hna_sk_A_hnb_sk_B_111122:
   [
   Fr( ~prog_1111221 ),
   State_111122( $A, $B, $TTP, ~prog_, ~prog_111 ),
   In( <'responder', $B, <'TTP', $TTP>, 
        sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)), 
        sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
             >,
             sk($B))
       >
   ),
   MID_Receiver( mid_111122 )
   ]
  --[
  ProgressFrom_1111221( ~prog_1111221 ),
  Receive( mid_111122,
           <'responder', $B, <'TTP', $TTP>, 
            sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)), 
            sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
                 >,
                 sk($B))
           >
  )
  ]->
   [
   State_1111221( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                  ~prog_1111221, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_sign_A_B_TTP_TTP_TEXT_hna_sk_A1111221:
   [
   State_1111221( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                  ~prog_1111221, na, nb
   ),
   Fr( ~lock6 )
   ]
  --[
  Lock( ~lock6, sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)) )
  ]->
   [
   State_11112211( $A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111,
                   ~prog_1111221, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_ResponderResolved_TTP_TTP_A_B_TEXT_na11112211:
   [
   State_11112211( $A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111,
                   ~prog_1111221, na, nb
   )
   ]
  --[ Event( ), ResponderResolved( <'TTP', $TTP>, $A, $B, $TEXT, na )
  ]->
   [
   State_111122111( $A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111,
                    ~prog_1111221, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_r_responder_TTP_TTP_B_sign_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sign_hsign_A_B_TTP_TTP_TEXT_hna_sk_A_hnb_sk_B_sk_TTP_TTP__111122111:
   [
   MID_Sender( mid_111122111 ),
   State_111122111( $A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111,
                    ~prog_1111221, na, nb
   )
   ]
  --[
  ProgressTo_1111221111( ~prog_1111221 ),
  Send( mid_111122111,
        <'responder', <'TTP', $TTP>, $B, 
         sign(<sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)), 
               sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
                    >,
                    sk($B))
              >,
              sk(<'TTP', $TTP>))
        >
  )
  ]->
   [
   Out( <'responder', <'TTP', $TTP>, $B, 
         sign(<sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)), 
               sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
                    >,
                    sk($B))
              >,
              sk(<'TTP', $TTP>))
        >
   ),
   State_1111221111( $A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111,
                     ~prog_1111221, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_r_originator_A_TTP_TTP_sign_Abort_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sk_A_1111221111:
   [
   Fr( ~prog_11112211111 ),
   State_1111221111( $A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111,
                     ~prog_1111221, na, nb
   ),
   In( <'originator', $A, <'TTP', $TTP>, 
        sign(<'Abort', sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))
             >,
             sk($A))
       >
   ),
   MID_Receiver( mid_1111221111 )
   ]
  --[
  ProgressFrom_11112211111( ~prog_11112211111 ),
  Receive( mid_1111221111,
           <'originator', $A, <'TTP', $TTP>, 
            sign(<'Abort', sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))
                 >,
                 sk($A))
           >
  )
  ]->
   [
   State_11112211111( $A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111,
                      ~prog_1111221, ~prog_11112211111, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_r_originator_TTP_TTP_A_sign_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sign_hsign_A_B_TTP_TTP_TEXT_hna_sk_A_hnb_sk_B_sk_TTP_TTP__11112211111:
   [
   MID_Sender( mid_11112211111 ),
   State_11112211111( $A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111,
                      ~prog_1111221, ~prog_11112211111, na, nb
   )
   ]
  --[
  ProgressTo_111122111111( ~prog_11112211111 ),
  Send( mid_11112211111,
        <'originator', <'TTP', $TTP>, $A, 
         sign(<sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)), 
               sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
                    >,
                    sk($B))
              >,
              sk(<'TTP', $TTP>))
        >
  )
  ]->
   [
   Out( <'originator', <'TTP', $TTP>, $A, 
         sign(<sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)), 
               sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
                    >,
                    sk($B))
              >,
              sk(<'TTP', $TTP>))
        >
   ),
   State_111122111111( $A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111,
                       ~prog_1111221, ~prog_11112211111, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero111122111111:
   [
   State_111122111111( $A, $B, $TEXT, $TTP, ~lock6, ~prog_, ~prog_111,
                       ~prog_1111221, ~prog_11112211111, na, nb
   )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par1112:
   [ State_1112( $A, $B, $TTP, ~prog_, ~prog_111 ) ]
  --[ ProgressTo_11122( ~prog_111 ), ProgressTo_11121( ~prog_111 )
  ]->
   [
   State_11121( $A, $B, $TTP, ~prog_, ~prog_111 ),
   State_11122( $A, $B, $TTP, ~prog_, ~prog_111 )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_c_sign_na_hnb_sk_A_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sign_hsign_A_B_TTP_TTP_TEXT_hna_sk_A_hnb_sk_B_sign_nb_hna_sk_B_11121:
   [
   Fr( ~prog_111211 ), State_11121( $A, $B, $TTP, ~prog_, ~prog_111 ),
   In( <'c', sign(<na, h(nb)>, sk($A)), 
        sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)), 
        sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
             >,
             sk($B)), 
        sign(<nb, h(na)>, sk($B))>
   )
   ]
  --[
  ProgressFrom_111211( ~prog_111211 ),
  ChannelInEvent( <'c', sign(<na, h(nb)>, sk($A)), 
                   sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)), 
                   sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
                        >,
                        sk($B)), 
                   sign(<nb, h(na)>, sk($B))>
  )
  ]->
   [
   State_111211( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_111211,
                 na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_ContractJudge_A_B_TEXT111211:
   [
   State_111211( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_111211,
                 na, nb
   )
   ]
  --[
  ProgressTo_1112111( ~prog_111211 ), Event( ),
  ContractJudge( $A, $B, $TEXT )
  ]->
   [
   State_1112111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                  ~prog_111211, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero1112111:
   [
   State_1112111( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                  ~prog_111211, na, nb
   )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_c_sign_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sign_hsign_A_B_TTP_TTP_TEXT_hna_sk_A_hnb_sk_B_sk_TTP_TTP_11122:
   [
   Fr( ~prog_111221 ), State_11122( $A, $B, $TTP, ~prog_, ~prog_111 ),
   In( <'c', 
        sign(<sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)), 
              sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
                   >,
                   sk($B))
             >,
             sk(<'TTP', $TTP>))
       >
   )
   ]
  --[
  ProgressFrom_111221( ~prog_111221 ),
  ChannelInEvent( <'c', 
                   sign(<sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A)), 
                         sign(<h(sign(<$A, $B, <'TTP', $TTP>, $TEXT, h(na)>, sk($A))), h(nb)
                              >,
                              sk($B))
                        >,
                        sk(<'TTP', $TTP>))
                  >
  )
  ]->
   [
   State_111221( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_111221,
                 na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_ContractJudge_A_B_TEXT111221:
   [
   State_111221( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_111221,
                 na, nb
   )
   ]
  --[
  ProgressTo_1112211( ~prog_111221 ), Event( ),
  ContractJudge( $A, $B, $TEXT )
  ]->
   [
   State_1112211( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                  ~prog_111221, na, nb
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero1112211:
   [
   State_1112211( $A, $B, $TEXT, $TTP, ~prog_, ~prog_111,
                  ~prog_111221, na, nb
   )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_02:
   [ State_2( ~prog_ ) ] --> [ !Semistate_21( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_12:
   [ !Semistate_21( ~prog_ ) ] --> [ State_21( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_c_corrupt_x_21:
   [ Fr( ~prog_211 ), State_21( ~prog_ ), In( <'c', 'corrupt', $x> ) ]
  --[
  ProgressFrom_211( ~prog_211 ),
  ChannelInEvent( <'c', 'corrupt', $x> )
  ]->
   [ State_211( $x, ~prog_, ~prog_211 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Corrupt_x211:
   [ State_211( $x, ~prog_, ~prog_211 ) ]
  --[ Event( ), Corrupt( $x ) ]->
   [ State_2111( $x, ~prog_, ~prog_211 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_c_sk_x2111:
   [ State_2111( $x, ~prog_, ~prog_211 ), In( 'c' ) ]
  --[ ChannelInEvent( 'c' ) ]->
   [ State_21111( $x, ~prog_, ~prog_211 ), Out( sk($x) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par21111:
   [ State_21111( $x, ~prog_, ~prog_211 ) ]
  --[ ProgressTo_211112( ~prog_211 ) ]->
   [
   State_211111( $x, ~prog_, ~prog_211 ),
   State_211112( $x, ~prog_, ~prog_211 )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par211111:
   [ State_211111( $x, ~prog_, ~prog_211 ) ]
  --[ ProgressTo_2111112( ~prog_211 ) ]->
   [
   State_2111111( $x, ~prog_, ~prog_211 ),
   State_2111112( $x, ~prog_, ~prog_211 )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par2111111:
   [ State_2111111( $x, ~prog_, ~prog_211 ) ]
  --[
  ProgressTo_21111112( ~prog_211 ), ProgressTo_21111111( ~prog_211 )
  ]->
   [
   State_21111111( $x, ~prog_, ~prog_211 ),
   State_21111112( $x, ~prog_, ~prog_211 )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_021111111:
   [ State_21111111( $x, ~prog_, ~prog_211 ) ]
  -->
   [ !Semistate_211111111( $x, ~prog_, ~prog_211 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_121111111:
   [ !Semistate_211111111( $x, ~prog_, ~prog_211 ) ]
  -->
   [ State_211111111( $x, ~prog_, ~prog_211 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_r_responder_x_TTP_TTP_m_211111111:
   [
   State_211111111( $x, ~prog_, ~prog_211 ),
   In( <'responder', $x, <'TTP', $TTP>, m> ),
   MID_Receiver( mid_211111111 )
   ]
  --[ Receive( mid_211111111, <'responder', $x, <'TTP', $TTP>, m> )
  ]->
   [ State_2111111111( $TTP, $x, ~prog_, ~prog_211, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero2111111111:
   [ State_2111111111( $TTP, $x, ~prog_, ~prog_211, m ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_021111112:
   [ State_21111112( $x, ~prog_, ~prog_211 ) ]
  -->
   [ !Semistate_211111121( $x, ~prog_, ~prog_211 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_121111112:
   [ !Semistate_211111121( $x, ~prog_, ~prog_211 ) ]
  -->
   [ State_211111121( $x, ~prog_, ~prog_211 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_r_originator_x_TTP_TTP_m_211111121:
   [
   State_211111121( $x, ~prog_, ~prog_211 ),
   In( <'originator', $x, <'TTP', $TTP>, m> ),
   MID_Receiver( mid_211111121 )
   ]
  --[ Receive( mid_211111121, <'originator', $x, <'TTP', $TTP>, m> )
  ]->
   [ State_2111111211( $TTP, $x, ~prog_, ~prog_211, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero2111111211:
   [ State_2111111211( $TTP, $x, ~prog_, ~prog_211, m ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_02111112:
   [ State_2111112( $x, ~prog_, ~prog_211 ) ]
  -->
   [ !Semistate_21111121( $x, ~prog_, ~prog_211 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_12111112:
   [ !Semistate_21111121( $x, ~prog_, ~prog_211 ) ]
  -->
   [ State_21111121( $x, ~prog_, ~prog_211 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_r_responder_TTP_TTP_x_m_21111121:
   [
   State_21111121( $x, ~prog_, ~prog_211 ),
   In( <'responder', <'TTP', $TTP>, $x, m> ),
   MID_Receiver( mid_21111121 )
   ]
  --[ Receive( mid_21111121, <'responder', <'TTP', $TTP>, $x, m> )
  ]->
   [ State_211111211( $TTP, $x, ~prog_, ~prog_211, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero211111211:
   [ State_211111211( $TTP, $x, ~prog_, ~prog_211, m ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0211112:
   [ State_211112( $x, ~prog_, ~prog_211 ) ]
  -->
   [ !Semistate_2111121( $x, ~prog_, ~prog_211 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1211112:
   [ !Semistate_2111121( $x, ~prog_, ~prog_211 ) ]
  -->
   [ State_2111121( $x, ~prog_, ~prog_211 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_r_originator_TTP_TTP_x_m_2111121:
   [
   State_2111121( $x, ~prog_, ~prog_211 ),
   In( <'originator', <'TTP', $TTP>, $x, m> ),
   MID_Receiver( mid_2111121 )
   ]
  --[ Receive( mid_2111121, <'originator', <'TTP', $TTP>, $x, m> )
  ]->
   [ State_21111211( $TTP, $x, ~prog_, ~prog_211, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero21111211:
   [ State_21111211( $TTP, $x, ~prog_, ~prog_211, m ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction locking:
  "∀ l x lp #t1 #t3.
    ((Lock( l, x ) @ #t1) ∧ (Lock( lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock( l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0. (Unlock( l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ lp.1 #t0.
            (Lock( lp.1, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ lp.1 #t0.
           (Unlock( lp.1, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction progress_1111221_to_1111221111:
  "∀ p #t1.
    (ProgressFrom_1111221( p ) @ #t1) ⇒
    (∃ #t2. ProgressTo_1111221111( p ) @ #t2)"

restriction progress_111221_to_1112211:
  "∀ p #t1.
    (ProgressFrom_111221( p ) @ #t1) ⇒
    (∃ #t2. ProgressTo_1112211( p ) @ #t2)"

restriction progress_11111211112121_to_1111121111212111:
  "∀ p #t1.
    (ProgressFrom_11111211112121( p ) @ #t1) ⇒
    (∃ #t2. ProgressTo_1111121111212111( p ) @ #t2)"

restriction progress_111111111112121_to_11111111111212111:
  "∀ p #t1.
    (ProgressFrom_111111111112121( p ) @ #t1) ⇒
    (∃ #t2. ProgressTo_11111111111212111( p ) @ #t2)"

restriction progress_11112121_to_11112121111:
  "∀ p #t1.
    (ProgressFrom_11112121( p ) @ #t1) ⇒
    (∃ #t2. ProgressTo_11112121111( p ) @ #t2)"

restriction progress_1111121_to_111112111111111_or_111112111121:
  "∀ p #t1.
    (ProgressFrom_1111121( p ) @ #t1) ⇒
    ((∃ #t2. ProgressTo_111112111111111( p ) @ #t2) ∨
     (∃ #t2. ProgressTo_111112111121( p ) @ #t2))"

restriction progress_11111111111111211_to_1111111111111121111:
  "∀ p #t1.
    (ProgressFrom_11111111111111211( p ) @ #t1) ⇒
    (∃ #t2. ProgressTo_1111111111111121111( p ) @ #t2)"

restriction progress_111211_to_1112111:
  "∀ p #t1.
    (ProgressFrom_111211( p ) @ #t1) ⇒
    (∃ #t2. ProgressTo_1112111( p ) @ #t2)"

restriction progress_211_to_211112:
  "∀ p #t1.
    (ProgressFrom_211( p ) @ #t1) ⇒
    (∃ #t2. ProgressTo_211112( p ) @ #t2)"

restriction progress_211_to_2111112:
  "∀ p #t1.
    (ProgressFrom_211( p ) @ #t1) ⇒
    (∃ #t2. ProgressTo_2111112( p ) @ #t2)"

restriction progress_211_to_21111112:
  "∀ p #t1.
    (ProgressFrom_211( p ) @ #t1) ⇒
    (∃ #t2. ProgressTo_21111112( p ) @ #t2)"

restriction progress_211_to_21111111:
  "∀ p #t1.
    (ProgressFrom_211( p ) @ #t1) ⇒
    (∃ #t2. ProgressTo_21111111( p ) @ #t2)"

restriction progress_11111211112111_to_1111121111211111:
  "∀ p #t1.
    (ProgressFrom_11111211112111( p ) @ #t1) ⇒
    (∃ #t2. ProgressTo_1111121111211111( p ) @ #t2)"

restriction progress_111111111112111_to_11111111111211111:
  "∀ p #t1.
    (ProgressFrom_111111111112111( p ) @ #t1) ⇒
    (∃ #t2. ProgressTo_11111111111211111( p ) @ #t2)"

restriction progress_11112111_to_11112111111:
  "∀ p #t1.
    (ProgressFrom_11112111( p ) @ #t1) ⇒
    (∃ #t2. ProgressTo_11112111111( p ) @ #t2)"

restriction progress_11112211111_to_111122111111:
  "∀ p #t1.
    (ProgressFrom_11112211111( p ) @ #t1) ⇒
    (∃ #t2. ProgressTo_111122111111( p ) @ #t2)"

restriction progress_111121211111_to_1111212111111:
  "∀ p #t1.
    (ProgressFrom_111121211111( p ) @ #t1) ⇒
    (∃ #t2. ProgressTo_1111212111111( p ) @ #t2)"

restriction progress_111121111111_to_1111211111111:
  "∀ p #t1.
    (ProgressFrom_111121111111( p ) @ #t1) ⇒
    (∃ #t2. ProgressTo_1111211111111( p ) @ #t2)"

restriction progress_1111111_to_111111111111111111_or_1111111111121_or_1111111111111121:
  "∀ p #t1.
    (ProgressFrom_1111111( p ) @ #t1) ⇒
    (((∃ #t2. ProgressTo_111111111111111111( p ) @ #t2) ∨
      (∃ #t2. ProgressTo_1111111111121( p ) @ #t2)) ∨
     (∃ #t2. ProgressTo_1111111111111121( p ) @ #t2))"

restriction progress_111_to_111122:
  "∀ p #t1.
    (ProgressFrom_111( p ) @ #t1) ⇒
    (∃ #t2. ProgressTo_111122( p ) @ #t2)"

restriction progress_111_to_11122:
  "∀ p #t1.
    (ProgressFrom_111( p ) @ #t1) ⇒
    (∃ #t2. ProgressTo_11122( p ) @ #t2)"

restriction progress_111_to_1111212:
  "∀ p #t1.
    (ProgressFrom_111( p ) @ #t1) ⇒
    (∃ #t2. ProgressTo_1111212( p ) @ #t2)"

restriction progress_111_to_111112:
  "∀ p #t1.
    (ProgressFrom_111( p ) @ #t1) ⇒
    (∃ #t2. ProgressTo_111112( p ) @ #t2)"

restriction progress_111_to_11121:
  "∀ p #t1.
    (ProgressFrom_111( p ) @ #t1) ⇒
    (∃ #t2. ProgressTo_11121( p ) @ #t2)"

restriction progress_111_to_1111211:
  "∀ p #t1.
    (ProgressFrom_111( p ) @ #t1) ⇒
    (∃ #t2. ProgressTo_1111211( p ) @ #t2)"

restriction progress_111_to_111111:
  "∀ p #t1.
    (ProgressFrom_111( p ) @ #t1) ⇒
    (∃ #t2. ProgressTo_111111( p ) @ #t2)"

restriction progress__to_2:
  "∀ p #t1.
    (ProgressFrom_( p ) @ #t1) ⇒ (∃ #t2. ProgressTo_2( p ) @ #t2)"

restriction progress__to_1:
  "∀ p #t1.
    (ProgressFrom_( p ) @ #t1) ⇒ (∃ #t2. ProgressTo_1( p ) @ #t2)"

restriction progress_init:
  "∃ #t. Init( ) @ #t"

restriction resilient:
  "∀ #i x y.
    (Send( x, y ) @ #i) ⇒ (∃ #j. (Receive( x, y ) @ #j) ∧ (#i < #j))"

lemma sanity_a1b1:
  exists-trace
  "∃ #i #j a b t na.
    (((EndA1( a, b, t, na ) @ #i) ∧ (EndB1( a, b, t, na ) @ #j)) ∧
     (¬(∃ #k. Corrupt( a ) @ #k))) ∧
    (¬(∃ #k. Corrupt( b ) @ #k))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i #j a b t na.
  (EndA1( a, b, t, na ) @ #i) ∧ (EndB1( a, b, t, na ) @ #j)
 ∧
  (∀ #k. (Corrupt( a ) @ #k) ⇒ ⊥) ∧ (∀ #k. (Corrupt( b ) @ #k) ⇒ ⊥)"
*/
simplify
by sorry /* removed */

lemma sanity_a2b1:
  exists-trace
  "∃ #i #j a b t na.
    (((EndA2( a, b, t, na ) @ #i) ∧ (EndB1( a, b, t, na ) @ #j)) ∧
     (¬(∃ #k. Corrupt( a ) @ #k))) ∧
    (¬(∃ #k. Corrupt( b ) @ #k))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i #j a b t na.
  (EndA2( a, b, t, na ) @ #i) ∧ (EndB1( a, b, t, na ) @ #j)
 ∧
  (∀ #k. (Corrupt( a ) @ #k) ⇒ ⊥) ∧ (∀ #k. (Corrupt( b ) @ #k) ⇒ ⊥)"
*/
by sorry /* removed */

lemma sanity_a2b3:
  exists-trace
  "∃ #i #j a b t na.
    (((EndA2( a, b, t, na ) @ #i) ∧ (EndB3( a, b, t, na ) @ #j)) ∧
     (¬(∃ #k. Corrupt( a ) @ #k))) ∧
    (¬(∃ #k. Corrupt( b ) @ #k))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i #j a b t na.
  (EndA2( a, b, t, na ) @ #i) ∧ (EndB3( a, b, t, na ) @ #j)
 ∧
  (∀ #k. (Corrupt( a ) @ #k) ⇒ ⊥) ∧ (∀ #k. (Corrupt( b ) @ #k) ⇒ ⊥)"
*/
by sorry /* removed */

lemma sanity_a3b2:
  exists-trace
  "∃ #i #j a b t na.
    (((EndA3( a, b, t, na ) @ #i) ∧ (EndB2( a, b, t, na ) @ #j)) ∧
     (¬(∃ #k. Corrupt( a ) @ #k))) ∧
    (¬(∃ #k. Corrupt( b ) @ #k))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i #j a b t na.
  (EndA3( a, b, t, na ) @ #i) ∧ (EndB2( a, b, t, na ) @ #j)
 ∧
  (∀ #k. (Corrupt( a ) @ #k) ⇒ ⊥) ∧ (∀ #k. (Corrupt( b ) @ #k) ⇒ ⊥)"
*/
simplify
solve( State_1111111111121111( $A, $B, $TEXT, $TTP, ~prog_,
                               ~prog_111, ~prog_1111111, ~prog_111111111112111, na
       ) ▶₀ #i )
  case event_AbortA_A_B_TEXT_na111111111112111
  solve( State_111112111121111( $A, $B, $TEXT, $TTP.1, ~prog_.1,
                                ~prog_111.1, ~prog_1111121, ~prog_11111211112111, ~n, nb
         ) ▶₀ #j )
    case event_AbortB_A_B_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sign_hsign_A_B_TTP_TTP_TEXT_hna_sk_A_hnb_sk_B_na_nb11111211112111
    solve( State_( ~prog_ ) ▶₀ #t2 )
      case Init
      solve( State_1111111111121111( $A.8, $B.8, $TEXT.1, $TTP.9,
                                     ~prog_.8, ~prog_111.2, ~prog_1111111.1, ~prog_111111111112111,
                                     na
             ) ▶₀ #t2.11 )
        case event_AbortA_A_B_TEXT_na111111111112111
        solve( (∃ #t2.
                 (ProgressTo_111111111111111111( ~prog_1111111 ) @ #t2))  ∥
               (∃ #t2. (ProgressTo_1111111111121( ~prog_1111111 ) @ #t2))  ∥
               (∃ #t2. (ProgressTo_1111111111111121( ~prog_1111111 ) @ #t2)) )
          case case_1
          by solve( State_11111111111111111( $A.23, $B.23, $TEXT.2, $TTP.24,
                                             ~prog_.23, ~prog_111.3, ~prog_1111111, na.1, nb.1
                    ) ▶₀ #t2.30 )
        next
          case case_2
          solve( State_11111111111( $A.23, $B.23, $TEXT.2, $TTP.24,
                                    ~prog_.23, ~prog_111.3, ~prog_1111111, na.1
                 ) ▶₁ #t2.30 )
            case out_c_sign_A_B_TTP_TTP_TEXT_hna_sk_A1111111111
            solve( (∃ #t2.
                     (ProgressTo_111112111111111( ~prog_1111121 ) @ #t2))  ∥
                   (∃ #t2. (ProgressTo_111112111121( ~prog_1111121 ) @ #t2)) )
              case case_1
              by solve( State_11111211111111( $A.30, $B.30, $TEXT.2, $TTP.31,
                                              ~prog_.30, ~prog_111.3, ~prog_1111121, na.1, nb.1
                        ) ▶₀ #t2.39 )
            next
              case case_2
              solve( State_1111121111( $A.30, $B.30, $TEXT.2, $TTP.31, ~prog_.30,
                                       ~prog_111.3, ~prog_1111121, na.1, nb.1
                     ) ▶₁ #t2.39 )
                case out_c_sign_hsign_A_B_TTP_TTP_TEXT_hna_sk_A_hnb_sk_B111112111
                solve( State_( ~prog_ ) ▶₀ #t2.1 )
                  case Init
                  solve( State_( ~prog_ ) ▶₀ #t2.1 )
                    case Init
                    solve( State_( ~prog_ ) ▶₀ #t2.1 )
                      case Init
                      solve( State_11111( $A.1, $B.1, $TTP.2, ~prog_.1, ~prog_111
                             ) ▶₀ #t2.1 )
                        case Par1111
                        solve( State_11111( $A.1, $B.1, $TTP.2, ~prog_.1, ~prog_111
                               ) ▶₀ #t2.2 )
                          case Par1111
                          solve( State_111121( $A.1, $B.1, $TTP.2, ~prog_.1, ~prog_111
                                 ) ▶₀ #t2.2 )
                            case Par11112
                            solve( State_111121( $A.1, $B.1, $TTP.2, ~prog_.1, ~prog_111
                                   ) ▶₀ #t2.3 )
                              case Par11112
                              solve( State_11112( $A.1, $B.1, $TTP.2, ~prog_.1, ~prog_111
                                     ) ▶₀ #t2.3 )
                                case Par1111
                                solve( State_1112( $A.1, $B.1, $TTP.2, ~prog_.1, ~prog_111
                                       ) ▶₀ #t2.4 )
                                  case Par111
                                  solve( State_1112( $A.1, $B.1, $TTP.2, ~prog_.1, ~prog_111
                                         ) ▶₀ #t2.5 )
                                    case Par111
                                    solve( State_( ~prog_ ) ▶₀ #t2.5 )
                                      case Init
                                      solve( State_( ~prog_ ) ▶₀ #t2.5 )
                                        case Init
                                        solve( State_11111( $A.1, $B.1, $TTP.2, ~prog_.1,
                                                            ~prog_111.1
                                               ) ▶₀ #t2.5 )
                                          case Par1111
                                          solve( State_11111( $A.1, $B.1, $TTP.2, ~prog_.1,
                                                              ~prog_111.1
                                                 ) ▶₀ #t2.6 )
                                            case Par1111
                                            solve( State_111121( $A.1, $B.1, $TTP.2, ~prog_.1,
                                                                 ~prog_111.1
                                                   ) ▶₀ #t2.6 )
                                              case Par11112
                                              solve( State_111121( $A.1, $B.1, $TTP.2, ~prog_.1,
                                                                   ~prog_111.1
                                                     ) ▶₀ #t2.7 )
                                                case Par11112
                                                solve( State_11112( $A.1, $B.1, $TTP.2, ~prog_.1,
                                                                    ~prog_111.1
                                                       ) ▶₀ #t2.7 )
                                                  case Par1111
                                                  solve( State_1112( $A.1, $B.1, $TTP.2, ~prog_.1,
                                                                     ~prog_111.1
                                                         ) ▶₀ #t2.8 )
                                                    case Par111
                                                    solve( State_1112( $A.1, $B.1, $TTP.2, ~prog_.1,
                                                                       ~prog_111.1
                                                           ) ▶₀ #t2.9 )
                                                      case Par111
                                                      solve( State_111112111121111( $A.1, $B.1,
                                                                                    $TEXT.1, $TTP.2,
                                                                                    ~prog_.1,
                                                                                    ~prog_111.2,
                                                                                    ~prog_1111121.1,
                                                                                    ~prog_11111211112111,
                                                                                    na, nb
                                                             ) ▶₀ #t2.9 )
                                                        case event_AbortB_A_B_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sign_hsign_A_B_TTP_TTP_TEXT_hna_sk_A_hnb_sk_B_na_nb11111211112111
                                                        solve( State_( ~prog_ ) ▶₀ #t2.9 )
                                                          case Init
                                                          solve( State_( ~prog_ ) ▶₀ #t2.9 )
                                                            case Init
                                                            solve( State_11111( $A.1, $B.1, $TTP.2,
                                                                                ~prog_.1, ~prog_111
                                                                   ) ▶₀ #t2.9 )
                                                              case Par1111
                                                              solve( State_11111( $A.1, $B.1,
                                                                                  $TTP.2, ~prog_.1,
                                                                                  ~prog_111
                                                                     ) ▶₀ #t2.9 )
                                                                case Par1111
                                                                solve( State_111121( $A.1, $B.1,
                                                                                     $TTP.2,
                                                                                     ~prog_.1,
                                                                                     ~prog_111
                                                                       ) ▶₀ #t2.9 )
                                                                  case Par11112
                                                                  solve( State_111121( $A.1, $B.1,
                                                                                       $TTP.2,
                                                                                       ~prog_.1,
                                                                                       ~prog_111
                                                                         ) ▶₀ #t2.9 )
                                                                    case Par11112
                                                                    solve( State_11112( $A.1, $B.1,
                                                                                        $TTP.2,
                                                                                        ~prog_.1,
                                                                                        ~prog_111
                                                                           ) ▶₀ #t2.9 )
                                                                      case Par1111
                                                                      solve( State_1112( $A.1, $B.1,
                                                                                         $TTP.2,
                                                                                         ~prog_.1,
                                                                                         ~prog_111
                                                                             ) ▶₀ #t2.9 )
                                                                        case Par111
                                                                        solve( Receive( ~x.1,
                                                                                        <
                                                                                         'originator', 
                                                                                         $A, 
                                                                                         <'TTP', 
                                                                                          $TTP>, 
                                                                                         sign(<
                                                                                               'Abort', 
                                                                                               sign(<
                                                                                                     $A, 
                                                                                                     $B, 
                                                                                                     <
                                                                                                      'TTP', 
                                                                                                      $TTP
                                                                                                     >, 
                                                                                                     $TEXT, 
                                                                                                     h(~n)
                                                                                                    >,
                                                                                                    sk($A))
                                                                                              >,
                                                                                              sk($A))
                                                                                        >
                                                                               ) @ #j.1 )
                                                                          case in_r_originator_A_TTP_TTP_sign_Abort_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sk_A_1111211
                                                                          solve( State_1111211111( $A.23,
                                                                                                   $B.23,
                                                                                                   $TEXT.1,
                                                                                                   $TTP.24,
                                                                                                   ~lock6,
                                                                                                   ~prog_.24,
                                                                                                   ~prog_111.3,
                                                                                                   ~prog_11112111,
                                                                                                   na
                                                                                 ) ▶₁ #t2.77 )
                                                                            case event_TTPAbort_TTP_TTP_A_B_TEXT_na111121111
                                                                            solve( Receive( mid_1111211111,
                                                                                            <
                                                                                             'originator', 
                                                                                             <
                                                                                              'TTP', 
                                                                                              $TTP
                                                                                             >, 
                                                                                             $A, 
                                                                                             sign(<
                                                                                                   'Aborted', 
                                                                                                   sign(<
                                                                                                         'Abort', 
                                                                                                         sign(<
                                                                                                               $A, 
                                                                                                               $B, 
                                                                                                               <
                                                                                                                'TTP', 
                                                                                                                $TTP
                                                                                                               >, 
                                                                                                               $TEXT, 
                                                                                                               h(~n)
                                                                                                              >,
                                                                                                              sk($A))
                                                                                                        >,
                                                                                                        sk($A))
                                                                                                  >,
                                                                                                  sk(<
                                                                                                      'TTP', 
                                                                                                      $TTP
                                                                                                     >))
                                                                                            >
                                                                                   ) @ #j.7 )
                                                                              case in_r_originator_TTP_TTP_A_sign_Aborted_sign_Abort_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sk_A_sk_TTP_TTP__11111111111211
                                                                              solve( State_1111111111121111( $A.30,
                                                                                                             $B.30,
                                                                                                             $TEXT.1,
                                                                                                             $TTP.31,
                                                                                                             ~prog_.31,
                                                                                                             ~prog_111.4,
                                                                                                             ~prog_1111111.2,
                                                                                                             ~prog_111111111112111.1,
                                                                                                             na
                                                                                     ) ▶₀ #t2.87 )
                                                                                case event_AbortA_A_B_TEXT_na111111111112111
                                                                                solve( MID_Sender( ~x.1
                                                                                       ) ▶₀ #t2.77 )
                                                                                  case MessageID_rule
                                                                                  solve( State_1112( $A.1,
                                                                                                     $B.1,
                                                                                                     $TTP.2,
                                                                                                     ~prog_.1,
                                                                                                     ~prog_111
                                                                                         ) ▶₀ #t2.9 )
                                                                                    case Par111
                                                                                    solve( State_( ~prog_
                                                                                           ) ▶₀ #t2.9 )
                                                                                      case Init
                                                                                      solve( State_( ~prog_
                                                                                             ) ▶₀ #t2.9 )
                                                                                        case Init
                                                                                        solve( Receive( ~x.3,
                                                                                                        <
                                                                                                         'responder', 
                                                                                                         $B, 
                                                                                                         <
                                                                                                          'TTP', 
                                                                                                          $TTP.1
                                                                                                         >, 
                                                                                                         sign(<
                                                                                                               $A, 
                                                                                                               $B, 
                                                                                                               <
                                                                                                                'TTP', 
                                                                                                                $TTP.1
                                                                                                               >, 
                                                                                                               $TEXT, 
                                                                                                               h(~n)
                                                                                                              >,
                                                                                                              sk($A)), 
                                                                                                         sign(<
                                                                                                               h(sign(<
                                                                                                                       $A, 
                                                                                                                       $B, 
                                                                                                                       <
                                                                                                                        'TTP', 
                                                                                                                        $TTP.1
                                                                                                                       >, 
                                                                                                                       $TEXT, 
                                                                                                                       h(~n)
                                                                                                                      >,
                                                                                                                      sk($A))), 
                                                                                                               h(~n.1)
                                                                                                              >,
                                                                                                              sk($B))
                                                                                                        >
                                                                                               ) @ #j.5 )
                                                                                          case in_r_responder_B_TTP_TTP_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sign_hsign_A_B_TTP_TTP_TEXT_hna_sk_A_hnb_sk_B_11112111111
                                                                                          solve( State_111121111111( $A.36,
                                                                                                                     $B.36,
                                                                                                                     $TEXT.1,
                                                                                                                     $TTP.37,
                                                                                                                     ~lock6.2,
                                                                                                                     ~prog_.37,
                                                                                                                     ~prog_111.4,
                                                                                                                     ~prog_11112111.2,
                                                                                                                     ~prog_111121111111,
                                                                                                                     na,
                                                                                                                     nb
                                                                                                 ) ▶₁ #t2.95 )
                                                                                            case in_r_responder_B_TTP_TTP_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sign_hsign_A_B_TTP_TTP_TEXT_hna_sk_A_hnb_sk_B_11112111111
                                                                                            solve( State_1111211111( $A.43,
                                                                                                                     $B.43,
                                                                                                                     $TEXT.1,
                                                                                                                     $TTP.44,
                                                                                                                     ~lock6.2,
                                                                                                                     ~prog_.43,
                                                                                                                     ~prog_111.4,
                                                                                                                     ~prog_11112111.1,
                                                                                                                     na
                                                                                                   ) ▶₁ #t2.105 )
                                                                                              case event_TTPAbort_TTP_TTP_A_B_TEXT_na111121111
                                                                                              solve( MID_Sender( mid_111121111111
                                                                                                     ) ▶₀ #t2.95 )
                                                                                                case MessageID_rule
                                                                                                solve( State_11111( $A.1,
                                                                                                                    $B.1,
                                                                                                                    $TTP.2,
                                                                                                                    ~prog_.1,
                                                                                                                    ~prog_111
                                                                                                       ) ▶₀ #t2.9 )
                                                                                                  case Par1111
                                                                                                  solve( State_11111( $A.1,
                                                                                                                      $B.1,
                                                                                                                      $TTP.2,
                                                                                                                      ~prog_.1,
                                                                                                                      ~prog_111
                                                                                                         ) ▶₀ #t2.9 )
                                                                                                    case Par1111
                                                                                                    solve( State_111121( $A.1,
                                                                                                                         $B.1,
                                                                                                                         $TTP.2,
                                                                                                                         ~prog_.1,
                                                                                                                         ~prog_111
                                                                                                           ) ▶₀ #t2.9 )
                                                                                                      case Par11112
                                                                                                      solve( !KU( sign(<
                                                                                                                        $A, 
                                                                                                                        $B, 
                                                                                                                        <
                                                                                                                         'TTP', 
                                                                                                                         $TTP.1
                                                                                                                        >, 
                                                                                                                        $TEXT, 
                                                                                                                        h(~n)
                                                                                                                       >,
                                                                                                                       sk($A))
                                                                                                             ) @ #vk.36 )
                                                                                                        case csign
                                                                                                        by sorry
                                                                                                      next
                                                                                                        case out_c_sign_A_B_TTP_TTP_TEXT_hna_sk_A1111111111
                                                                                                        solve( ((#vr.29 < #vr.39) ∧
                                                                                                                (∃ #t2.
                                                                                                                  (Unlock( ~lock6.1,
                                                                                                                           sign(<
                                                                                                                                 $A, 
                                                                                                                                 $B, 
                                                                                                                                 <
                                                                                                                                  'TTP', 
                                                                                                                                  $TTP
                                                                                                                                 >, 
                                                                                                                                 $TEXT, 
                                                                                                                                 h(~n)
                                                                                                                                >,
                                                                                                                                sk($A))
                                                                                                                   ) @ #t2)
                                                                                                                 ∧
                                                                                                                  (#vr.29 < #t2) ∧
                                                                                                                  (#t2 < #vr.39) ∧
                                                                                                                  (∀ #t0.
                                                                                                                    (Unlock( ~lock6.1,
                                                                                                                             sign(<
                                                                                                                                   $A, 
                                                                                                                                   $B, 
                                                                                                                                   <
                                                                                                                                    'TTP', 
                                                                                                                                    $TTP
                                                                                                                                   >, 
                                                                                                                                   $TEXT, 
                                                                                                                                   h(~n)
                                                                                                                                  >,
                                                                                                                                  sk($A))
                                                                                                                     ) @ #t0)
                                                                                                                   ⇒
                                                                                                                    #t0 =
                                                                                                                    #t2) ∧
                                                                                                                  (∀ lp
                                                                                                                     #t0.
                                                                                                                    (Lock( lp,
                                                                                                                           sign(<
                                                                                                                                 $A, 
                                                                                                                                 $B, 
                                                                                                                                 <
                                                                                                                                  'TTP', 
                                                                                                                                  $TTP
                                                                                                                                 >, 
                                                                                                                                 $TEXT, 
                                                                                                                                 h(~n)
                                                                                                                                >,
                                                                                                                                sk($A))
                                                                                                                     ) @ #t0)
                                                                                                                   ⇒
                                                                                                                    (#t0 < #vr.29) ∨
                                                                                                                    (#t0 =
                                                                                                                     #vr.29) ∨
                                                                                                                    (#t2 < #t0)) ∧
                                                                                                                  (∀ lp
                                                                                                                     #t0.
                                                                                                                    (Unlock( lp,
                                                                                                                             sign(<
                                                                                                                                   $A, 
                                                                                                                                   $B, 
                                                                                                                                   <
                                                                                                                                    'TTP', 
                                                                                                                                    $TTP
                                                                                                                                   >, 
                                                                                                                                   $TEXT, 
                                                                                                                                   h(~n)
                                                                                                                                  >,
                                                                                                                                  sk($A))
                                                                                                                     ) @ #t0)
                                                                                                                   ⇒
                                                                                                                    (#t0 < #vr.29) ∨
                                                                                                                    (#t2 < #t0) ∨
                                                                                                                    (#t2 =
                                                                                                                     #t0))))  ∥
                                                                                                               (#vr.39 < #vr.29)  ∥
                                                                                                               (#vr.29 =
                                                                                                                #vr.39) )
                                                                                                          case case_1
                                                                                                          by sorry
                                                                                                        next
                                                                                                          case case_2
                                                                                                          by sorry
                                                                                                        next
                                                                                                          case case_3
                                                                                                          solve( State_111121( $A.1,
                                                                                                                               $B.1,
                                                                                                                               $TTP.1,
                                                                                                                               ~prog_.1,
                                                                                                                               ~prog_111
                                                                                                                 ) ▶₀ #t2.9 )
                                                                                                            case Par11112
                                                                                                            solve( State_11112( $A.1,
                                                                                                                                $B.1,
                                                                                                                                $TTP.1,
                                                                                                                                ~prog_.1,
                                                                                                                                ~prog_111
                                                                                                                   ) ▶₀ #t2.9 )
                                                                                                              case Par1111
                                                                                                              solve( State_1112( $A.1,
                                                                                                                                 $B.1,
                                                                                                                                 $TTP.1,
                                                                                                                                 ~prog_.1,
                                                                                                                                 ~prog_111
                                                                                                                     ) ▶₀ #t2.9 )
                                                                                                                case Par111
                                                                                                                solve( State_1112( $A.1,
                                                                                                                                   $B.1,
                                                                                                                                   $TTP.1,
                                                                                                                                   ~prog_.1,
                                                                                                                                   ~prog_111
                                                                                                                       ) ▶₀ #t2.9 )
                                                                                                                  case Par111
                                                                                                                  solve( State_( ~prog_
                                                                                                                         ) ▶₀ #t2.9 )
                                                                                                                    case Init
                                                                                                                    solve( State_( ~prog_
                                                                                                                           ) ▶₀ #t2.9 )
                                                                                                                      case Init
                                                                                                                      solve( State_11111( $A.1,
                                                                                                                                          $B.1,
                                                                                                                                          $TTP.1,
                                                                                                                                          ~prog_.1,
                                                                                                                                          ~prog_111.1
                                                                                                                             ) ▶₀ #t2.9 )
                                                                                                                        case Par1111
                                                                                                                        solve( State_11111( $A.1,
                                                                                                                                            $B.1,
                                                                                                                                            $TTP.1,
                                                                                                                                            ~prog_.1,
                                                                                                                                            ~prog_111.1
                                                                                                                               ) ▶₀ #t2.9 )
                                                                                                                          case Par1111
                                                                                                                          solve( Receive( ~x.4,
                                                                                                                                          <
                                                                                                                                           'responder', 
                                                                                                                                           <
                                                                                                                                            'TTP', 
                                                                                                                                            $TTP
                                                                                                                                           >, 
                                                                                                                                           $B, 
                                                                                                                                           sign(<
                                                                                                                                                 'Aborted', 
                                                                                                                                                 sign(<
                                                                                                                                                       'Abort', 
                                                                                                                                                       sign(<
                                                                                                                                                             $A, 
                                                                                                                                                             $B, 
                                                                                                                                                             <
                                                                                                                                                              'TTP', 
                                                                                                                                                              $TTP
                                                                                                                                                             >, 
                                                                                                                                                             $TEXT, 
                                                                                                                                                             h(~n)
                                                                                                                                                            >,
                                                                                                                                                            sk($A))
                                                                                                                                                      >,
                                                                                                                                                      sk($A)), 
                                                                                                                                                 h(~n.1)
                                                                                                                                                >,
                                                                                                                                                sk(<
                                                                                                                                                    'TTP', 
                                                                                                                                                    $TTP
                                                                                                                                                   >))
                                                                                                                                          >
                                                                                                                                 ) @ #j.10 )
                                                                                                                            case in_r_responder_TTP_TTP_B_sign_Aborted_sign_Abort_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sk_A_hnb_sk_TTP_TTP__1111121111211
                                                                                                                            solve( State_111112111121111( $A.48,
                                                                                                                                                          $B.48,
                                                                                                                                                          $TEXT.1,
                                                                                                                                                          $TTP.48,
                                                                                                                                                          ~prog_.49,
                                                                                                                                                          ~prog_111.4,
                                                                                                                                                          ~prog_1111121.2,
                                                                                                                                                          ~prog_11111211112111.1,
                                                                                                                                                          na,
                                                                                                                                                          nb
                                                                                                                                   ) ▶₀ #t2.129 )
                                                                                                                              case event_AbortB_A_B_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sign_hsign_A_B_TTP_TTP_TEXT_hna_sk_A_hnb_sk_B_na_nb11111211112111
                                                                                                                              solve( State_111121( $A.1,
                                                                                                                                                   $B.1,
                                                                                                                                                   $TTP.1,
                                                                                                                                                   ~prog_.1,
                                                                                                                                                   ~prog_111.1
                                                                                                                                     ) ▶₀ #t2.9 )
                                                                                                                                case Par11112
                                                                                                                                solve( State_111121( $A.1,
                                                                                                                                                     $B.1,
                                                                                                                                                     $TTP.1,
                                                                                                                                                     ~prog_.1,
                                                                                                                                                     ~prog_111.1
                                                                                                                                       ) ▶₀ #t2.9 )
                                                                                                                                  case Par11112
                                                                                                                                  solve( State_11112( $A.1,
                                                                                                                                                      $B.1,
                                                                                                                                                      $TTP.1,
                                                                                                                                                      ~prog_.1,
                                                                                                                                                      ~prog_111.1
                                                                                                                                         ) ▶₀ #t2.9 )
                                                                                                                                    case Par1111
                                                                                                                                    solve( State_1112( $A.1,
                                                                                                                                                       $B.1,
                                                                                                                                                       $TTP.1,
                                                                                                                                                       ~prog_.1,
                                                                                                                                                       ~prog_111.1
                                                                                                                                           ) ▶₀ #t2.9 )
                                                                                                                                      case Par111
                                                                                                                                      by sorry
                                                                                                                                         /*
                                                                                                                                         bound 4 hit
                                                                                                                                         */
                                                                                                                                    qed
                                                                                                                                  qed
                                                                                                                                qed
                                                                                                                              qed
                                                                                                                            qed
                                                                                                                          next
                                                                                                                            case in_r_responder_TTP_TTP_x_m_21111121
                                                                                                                            by sorry
                                                                                                                          qed
                                                                                                                        qed
                                                                                                                      qed
                                                                                                                    qed
                                                                                                                  qed
                                                                                                                qed
                                                                                                              qed
                                                                                                            qed
                                                                                                          qed
                                                                                                        qed
                                                                                                      next
                                                                                                        case out_r_originator_A_TTP_TTP_sign_Abort_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sk_A_111111111112
                                                                                                        by sorry
                                                                                                      qed
                                                                                                    qed
                                                                                                  qed
                                                                                                qed
                                                                                              qed
                                                                                            qed
                                                                                          qed
                                                                                        next
                                                                                          case in_r_responder_B_TTP_TTP_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sign_hsign_A_B_TTP_TTP_TEXT_hna_sk_A_hnb_sk_B_11112121111
                                                                                          by sorry
                                                                                        next
                                                                                          case in_r_responder_B_TTP_TTP_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sign_hsign_A_B_TTP_TTP_TEXT_hna_sk_A_hnb_sk_B_111122
                                                                                          by sorry
                                                                                        next
                                                                                          case in_r_responder_x_TTP_TTP_m_211111111
                                                                                          by sorry
                                                                                        qed
                                                                                      qed
                                                                                    qed
                                                                                  qed
                                                                                qed
                                                                              qed
                                                                            next
                                                                              case in_r_originator_TTP_TTP_x_m_2111121
                                                                              by sorry
                                                                            qed
                                                                          qed
                                                                        next
                                                                          case in_r_originator_A_TTP_TTP_sign_Abort_sign_A_B_TTP_TTP_TEXT_hna_sk_A_sk_A_1111221111
                                                                          by sorry
                                                                        next
                                                                          case in_r_originator_x_TTP_TTP_m_211111121
                                                                          by sorry
                                                                        qed
                                                                      qed
                                                                    qed
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case case_3
          by sorry
        qed
      qed
    qed
  qed
qed

lemma sanity_a4b3:
  exists-trace
  "∃ #i #j a b t na.
    (((EndA4( a, b, t, na ) @ #i) ∧ (EndB3( a, b, t, na ) @ #j)) ∧
     (¬(∃ #k. Corrupt( a ) @ #k))) ∧
    (¬(∃ #k. Corrupt( b ) @ #k))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i #j a b t na.
  (EndA4( a, b, t, na ) @ #i) ∧ (EndB3( a, b, t, na ) @ #j)
 ∧
  (∀ #k. (Corrupt( a ) @ #k) ⇒ ⊥) ∧ (∀ #k. (Corrupt( b ) @ #k) ⇒ ⊥)"
*/
by sorry

lemma sanity_optimistic_AB:
  exists-trace
  "∃ #i #j a b t m1 m2 na nb.
    (((ContractA( a, b, t, na ) @ #i) ∧
      (ContractB( a, b, t, m1, m2, na, nb ) @ #j)) ∧
     (¬(∃ #k. Corrupt( a ) @ #k))) ∧
    (¬(∃ #k. Corrupt( b ) @ #k))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i #j a b t m1 m2 na nb.
  (ContractA( a, b, t, na ) @ #i) ∧
  (ContractB( a, b, t, m1, m2, na, nb ) @ #j)
 ∧
  (∀ #k. (Corrupt( a ) @ #k) ⇒ ⊥) ∧ (∀ #k. (Corrupt( b ) @ #k) ⇒ ⊥)"
*/
by sorry

lemma timelinessA [reuse]:
  all-traces
  "∀ #i a b t na.
    (StartA( a, b, t, na ) @ #i) ⇒
    (((∃ #j. ContractA( a, b, t, na ) @ #j) ∨
      (∃ #j. AbortA( a, b, t, na ) @ #j)) ∨
     (∃ #j. Corrupt( a ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ #i a b t na.
  (StartA( a, b, t, na ) @ #i)
 ∧
  (∀ #j. (ContractA( a, b, t, na ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (AbortA( a, b, t, na ) @ #j) ⇒ ⊥) ∧
  (∀ #j. (Corrupt( a ) @ #j) ⇒ ⊥)"
*/
by sorry

lemma helper [reuse]:
  all-traces
  "¬(∃ #i #j ttp a b t na.
      (TTPAbort( ttp, a, b, t, na ) @ #i) ∧
      (ResponderResolved( ttp, a, b, t, na ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ #i #j ttp a b t na.
  (TTPAbort( ttp, a, b, t, na ) @ #i) ∧
  (ResponderResolved( ttp, a, b, t, na ) @ #j)"
*/
by sorry

lemma fullfairnessA:
  all-traces
  "∀ #i a b t.
    (ContractJudge( a, b, t ) @ #i) ⇒
    ((∃ #j na. ContractA( a, b, t, na ) @ #j) ∨
     (∃ #k. Corrupt( a ) @ #k))"
/*
guarded formula characterizing all counter-examples:
"∃ #i a b t.
  (ContractJudge( a, b, t ) @ #i)
 ∧
  (∀ #j na. (ContractA( a, b, t, na ) @ #j) ⇒ ⊥) ∧
  (∀ #k. (Corrupt( a ) @ #k) ⇒ ⊥)"
*/
by sorry

/* All well-formedness checks were successful. */

end