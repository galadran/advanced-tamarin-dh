theory DesignChoices begin

// Function signature and definition of the equational theory E

functions: check_rep/2, fst/1, get_rep/1, pair/2, rep/2 [private], snd/1
equations:
    check_rep(rep(m, loc), loc) = m,
    fst(<x.1, x.2>) = x.1,
    get_rep(rep(m, loc)) = m,
    snd(<x.1, x.2>) = x.2

heuristic: p

rule (modulo E) Init_:
   [ ] --[ Init( ) ]-> [ State_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_:
   [ State_( ) ] --> [ !Semistate_1( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_:
   [ !Semistate_1( ) ] --> [ State_1( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_s__1:
   [ State_1( ), Fr( ~lock6 ) ]
  --[ Lock( $6, ~lock6, 's' ), Lock_6( $6, ~lock6, 's' ) ]->
   [ State_11( ~lock6 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_visited_as_v_0_11:
   [ State_11( ~lock6 ) ]
  --[ IsIn( 'visited', v ) ]->
   [ State_111( ~lock6, v ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_visited_as_v_1_11:
   [ State_11( ~lock6 ) ]
  --[ IsNotSet( 'visited' ) ]->
   [ State_112( ~lock6 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_s__111:
   [ State_111( ~lock6, v ) ]
  --[ Unlock( $6, ~lock6, 's' ), Unlock_6( $6, ~lock6, 's' ) ]->
   [ State_1111( ~lock6, v ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111:
   [ State_1111( ~lock6, v ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Visit_112:
   [ State_112( ~lock6 ) ]
  --[ Event( ), Visit( ) ]->
   [ State_1121( ~lock6 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert_visited_s__1121:
   [ State_1121( ~lock6 ) ]
  --[ Insert( 'visited', 's' ) ]->
   [ State_11211( ~lock6 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_s__11211:
   [ State_11211( ~lock6 ) ]
  --[ Unlock( $6, ~lock6, 's' ), Unlock_6( $6, ~lock6, 's' ) ]->
   [ State_112111( ~lock6 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_112111:
   [ State_112111( ~lock6 ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction set_in:
  "∀ x y #t3.
    (IsIn( x, y ) @ #t3) ⇒
    (∃ #t2.
      (((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ∧
       (∀ #t1. (Delete( x ) @ #t1) ⇒ ((#t1 < #t2) ∨ (#t3 < #t1)))) ∧
      (∀ #t1 yp.
        (Insert( x, yp ) @ #t1) ⇒ (((#t1 < #t2) ∨ (#t1 = #t2)) ∨ (#t3 < #t1))))"

restriction set_notin:
  "∀ x #t3.
    (IsNotSet( x ) @ #t3) ⇒
    ((∀ #t1 y. (Insert( x, y ) @ #t1) ⇒ (#t3 < #t1)) ∨
     (∃ #t1.
       ((Delete( x ) @ #t1) ∧ (#t1 < #t3)) ∧
       (∀ #t2 y. ((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ⇒ (#t2 < #t1))))"

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction locking_6:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_6( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_6( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

lemma visit_once:
  all-traces
  "∀ #t1 #t2. ((Visit( ) @ #t1) ∧ (Visit( ) @ #t2)) ⇒ (#t1 = #t2)"
/*
guarded formula characterizing all counter-examples:
"∃ #t1 #t2. (Visit( ) @ #t1) ∧ (Visit( ) @ #t2) ∧ ¬(#t1 = #t2)"
*/
simplify
solve( (#t1 < #t2)  ∥ (#t2 < #t1) )
  case case_1
  solve( State_112( ~lock6 ) ▶₀ #t1 )
    case lookup_visited_as_v_1_11
    solve( (∀ #t1 y. (Insert( 'visited', y ) @ #t1) ⇒ #vr < #t1)  ∥
           (∃ #t1.
             (Delete( 'visited' ) @ #t1)
            ∧
             (#t1 < #vr) ∧
             (∀ #t2 y.
               (Insert( 'visited', y ) @ #t2) ⇒ ((¬(#t2 < #vr)) ∨ (#t2 < #t1)))) )
      case case_1
      solve( State_112( ~lock6.1 ) ▶₀ #t2 )
        case lookup_visited_as_v_1_11
        solve( ((#vr.1 < #vr.6) ∧
                (∃ #t2.
                  (Unlock_6( $6, ~lock6, 's' ) @ #t2)
                 ∧
                  (#vr.1 < #t2) ∧
                  (#t2 < #vr.6) ∧
                  (∀ #t0 pp. (Unlock( pp, ~lock6, 's' ) @ #t0) ⇒ #t0 = #t2) ∧
                  (∀ pp lpp #t0.
                    (Lock( pp, lpp, 's' ) @ #t0)
                   ⇒
                    ((#t0 < #vr.1) ∨ (#t0 = #vr.1) ∨ (#t2 < #t0))) ∧
                  (∀ pp lpp #t0.
                    (Unlock( pp, lpp, 's' ) @ #t0)
                   ⇒
                    ((#t0 < #vr.1) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
               (#vr.6 < #vr.1)  ∥ (#vr.1 = #vr.6) )
          case case_1
          solve( (∀ #t1 y. (Insert( 'visited', y ) @ #t1) ⇒ #vr.5 < #t1)  ∥
                 (∃ #t1.
                   (Delete( 'visited' ) @ #t1)
                  ∧
                   (#t1 < #vr.5) ∧
                   (∀ #t2 y.
                     (Insert( 'visited', y ) @ #t2) ⇒ ((¬(#t2 < #vr.5)) ∨ (#t2 < #t1)))) )
            case case_1
            solve( Unlock_6( $6, ~lock6, 's' ) @ #t2.1 )
              case unlock_s__111
              by solve( State_111( ~lock6, v ) ▶₀ #t2.1 )
            next
              case unlock_s__11211
              solve( State_11211( ~lock6 ) ▶₀ #t2.1 )
                case insert_visited_s__1121
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( Unlock_6( $6, ~lock6, 's' ) @ #t2.1 )
              case unlock_s__111
              by solve( State_111( ~lock6, v ) ▶₀ #t2.1 )
            next
              case unlock_s__11211
              solve( State_11211( ~lock6 ) ▶₀ #t2.1 )
                case insert_visited_s__1121
                by solve( Delete( 'visited' ) @ #t1.1 )
              qed
            qed
          qed
        next
          case case_2
          solve( (∀ #t1 y. (Insert( 'visited', y ) @ #t1) ⇒ #vr.5 < #t1)  ∥
                 (∃ #t1.
                   (Delete( 'visited' ) @ #t1)
                  ∧
                   (#t1 < #vr.5) ∧
                   (∀ #t2 y.
                     (Insert( 'visited', y ) @ #t2) ⇒ ((¬(#t2 < #vr.5)) ∨ (#t2 < #t1)))) )
            case case_1
            solve( Unlock_6( $6.1, ~lock6.1, 's' ) @ #t2.1 )
              case unlock_s__111
              by solve( State_111( ~lock6.1, v ) ▶₀ #t2.1 )
            next
              case unlock_s__11211
              solve( State_11211( ~lock6.1 ) ▶₀ #t2.1 )
                case insert_visited_s__1121
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( Unlock_6( $6.1, ~lock6.1, 's' ) @ #t2.1 )
              case unlock_s__111
              by solve( State_111( ~lock6.1, v ) ▶₀ #t2.1 )
            next
              case unlock_s__11211
              solve( State_11211( ~lock6.1 ) ▶₀ #t2.1 )
                case insert_visited_s__1121
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case case_3
          by contradiction /* cyclic */
        qed
      qed
    next
      case case_2
      solve( State_112( ~lock6.1 ) ▶₀ #t2 )
        case lookup_visited_as_v_1_11
        solve( ((#vr.1 < #vr.6) ∧
                (∃ #t2.
                  (Unlock_6( $6, ~lock6, 's' ) @ #t2)
                 ∧
                  (#vr.1 < #t2) ∧
                  (#t2 < #vr.6) ∧
                  (∀ #t0 pp. (Unlock( pp, ~lock6, 's' ) @ #t0) ⇒ #t0 = #t2) ∧
                  (∀ pp lpp #t0.
                    (Lock( pp, lpp, 's' ) @ #t0)
                   ⇒
                    ((#t0 < #vr.1) ∨ (#t0 = #vr.1) ∨ (#t2 < #t0))) ∧
                  (∀ pp lpp #t0.
                    (Unlock( pp, lpp, 's' ) @ #t0)
                   ⇒
                    ((#t0 < #vr.1) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
               (#vr.6 < #vr.1)  ∥ (#vr.1 = #vr.6) )
          case case_1
          solve( (∀ #t1 y. (Insert( 'visited', y ) @ #t1) ⇒ #vr.5 < #t1)  ∥
                 (∃ #t1.
                   (Delete( 'visited' ) @ #t1)
                  ∧
                   (#t1 < #vr.5) ∧
                   (∀ #t2 y.
                     (Insert( 'visited', y ) @ #t2) ⇒ ((¬(#t2 < #vr.5)) ∨ (#t2 < #t1)))) )
            case case_1
            by solve( Delete( 'visited' ) @ #t1.1 )
          next
            case case_2
            by solve( Delete( 'visited' ) @ #t1.1 )
          qed
        next
          case case_2
          solve( (∀ #t1 y. (Insert( 'visited', y ) @ #t1) ⇒ #vr.5 < #t1)  ∥
                 (∃ #t1.
                   (Delete( 'visited' ) @ #t1)
                  ∧
                   (#t1 < #vr.5) ∧
                   (∀ #t2 y.
                     (Insert( 'visited', y ) @ #t2) ⇒ ((¬(#t2 < #vr.5)) ∨ (#t2 < #t1)))) )
            case case_1
            by solve( Delete( 'visited' ) @ #t1.1 )
          next
            case case_2
            by solve( Delete( 'visited' ) @ #t1.1 )
          qed
        next
          case case_3
          by contradiction /* cyclic */
        qed
      qed
    qed
  qed
next
  case case_2
  solve( State_112( ~lock6 ) ▶₀ #t1 )
    case lookup_visited_as_v_1_11
    solve( (∀ #t1 y. (Insert( 'visited', y ) @ #t1) ⇒ #vr < #t1)  ∥
           (∃ #t1.
             (Delete( 'visited' ) @ #t1)
            ∧
             (#t1 < #vr) ∧
             (∀ #t2 y.
               (Insert( 'visited', y ) @ #t2) ⇒ ((¬(#t2 < #vr)) ∨ (#t2 < #t1)))) )
      case case_1
      solve( State_112( ~lock6.1 ) ▶₀ #t2 )
        case lookup_visited_as_v_1_11
        solve( ((#vr.1 < #vr.6) ∧
                (∃ #t2.
                  (Unlock_6( $6, ~lock6, 's' ) @ #t2)
                 ∧
                  (#vr.1 < #t2) ∧
                  (#t2 < #vr.6) ∧
                  (∀ #t0 pp. (Unlock( pp, ~lock6, 's' ) @ #t0) ⇒ #t0 = #t2) ∧
                  (∀ pp lpp #t0.
                    (Lock( pp, lpp, 's' ) @ #t0)
                   ⇒
                    ((#t0 < #vr.1) ∨ (#t0 = #vr.1) ∨ (#t2 < #t0))) ∧
                  (∀ pp lpp #t0.
                    (Unlock( pp, lpp, 's' ) @ #t0)
                   ⇒
                    ((#t0 < #vr.1) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
               (#vr.6 < #vr.1)  ∥ (#vr.1 = #vr.6) )
          case case_1
          solve( (∀ #t1 y. (Insert( 'visited', y ) @ #t1) ⇒ #vr.5 < #t1)  ∥
                 (∃ #t1.
                   (Delete( 'visited' ) @ #t1)
                  ∧
                   (#t1 < #vr.5) ∧
                   (∀ #t2 y.
                     (Insert( 'visited', y ) @ #t2) ⇒ ((¬(#t2 < #vr.5)) ∨ (#t2 < #t1)))) )
            case case_1
            solve( Unlock_6( $6, ~lock6, 's' ) @ #t2.1 )
              case unlock_s__111
              by solve( State_111( ~lock6, v ) ▶₀ #t2.1 )
            next
              case unlock_s__11211
              solve( State_11211( ~lock6 ) ▶₀ #t2.1 )
                case insert_visited_s__1121
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( Unlock_6( $6, ~lock6, 's' ) @ #t2.1 )
              case unlock_s__111
              by solve( State_111( ~lock6, v ) ▶₀ #t2.1 )
            next
              case unlock_s__11211
              solve( State_11211( ~lock6 ) ▶₀ #t2.1 )
                case insert_visited_s__1121
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case case_2
          solve( (∀ #t1 y. (Insert( 'visited', y ) @ #t1) ⇒ #vr.5 < #t1)  ∥
                 (∃ #t1.
                   (Delete( 'visited' ) @ #t1)
                  ∧
                   (#t1 < #vr.5) ∧
                   (∀ #t2 y.
                     (Insert( 'visited', y ) @ #t2) ⇒ ((¬(#t2 < #vr.5)) ∨ (#t2 < #t1)))) )
            case case_1
            solve( Unlock_6( $6.1, ~lock6.1, 's' ) @ #t2.1 )
              case unlock_s__111
              by solve( State_111( ~lock6.1, v ) ▶₀ #t2.1 )
            next
              case unlock_s__11211
              solve( State_11211( ~lock6.1 ) ▶₀ #t2.1 )
                case insert_visited_s__1121
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( Unlock_6( $6.1, ~lock6.1, 's' ) @ #t2.1 )
              case unlock_s__111
              by solve( State_111( ~lock6.1, v ) ▶₀ #t2.1 )
            next
              case unlock_s__11211
              solve( State_11211( ~lock6.1 ) ▶₀ #t2.1 )
                case insert_visited_s__1121
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case case_3
          by contradiction /* cyclic */
        qed
      qed
    next
      case case_2
      solve( State_112( ~lock6.1 ) ▶₀ #t2 )
        case lookup_visited_as_v_1_11
        solve( ((#vr.1 < #vr.6) ∧
                (∃ #t2.
                  (Unlock_6( $6, ~lock6, 's' ) @ #t2)
                 ∧
                  (#vr.1 < #t2) ∧
                  (#t2 < #vr.6) ∧
                  (∀ #t0 pp. (Unlock( pp, ~lock6, 's' ) @ #t0) ⇒ #t0 = #t2) ∧
                  (∀ pp lpp #t0.
                    (Lock( pp, lpp, 's' ) @ #t0)
                   ⇒
                    ((#t0 < #vr.1) ∨ (#t0 = #vr.1) ∨ (#t2 < #t0))) ∧
                  (∀ pp lpp #t0.
                    (Unlock( pp, lpp, 's' ) @ #t0)
                   ⇒
                    ((#t0 < #vr.1) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
               (#vr.6 < #vr.1)  ∥ (#vr.1 = #vr.6) )
          case case_1
          solve( (∀ #t1 y. (Insert( 'visited', y ) @ #t1) ⇒ #vr.5 < #t1)  ∥
                 (∃ #t1.
                   (Delete( 'visited' ) @ #t1)
                  ∧
                   (#t1 < #vr.5) ∧
                   (∀ #t2 y.
                     (Insert( 'visited', y ) @ #t2) ⇒ ((¬(#t2 < #vr.5)) ∨ (#t2 < #t1)))) )
            case case_1
            by solve( Delete( 'visited' ) @ #t1.1 )
          next
            case case_2
            by solve( Delete( 'visited' ) @ #t1.1 )
          qed
        next
          case case_2
          solve( (∀ #t1 y. (Insert( 'visited', y ) @ #t1) ⇒ #vr.5 < #t1)  ∥
                 (∃ #t1.
                   (Delete( 'visited' ) @ #t1)
                  ∧
                   (#t1 < #vr.5) ∧
                   (∀ #t2 y.
                     (Insert( 'visited', y ) @ #t2) ⇒ ((¬(#t2 < #vr.5)) ∨ (#t2 < #t1)))) )
            case case_1
            by solve( Delete( 'visited' ) @ #t1.1 )
          next
            case case_2
            by solve( Delete( 'visited' ) @ #t1.1 )
          qed
        next
          case case_3
          by contradiction /* cyclic */
        qed
      qed
    qed
  qed
qed

/*
WARNING: the following wellformedness checks failed!

unbound:
  rule `lookup_visited_as_v_0_11' has unbound variables: 
    v

Restriction actions:
  restriction `set_in' references action 
    (ProtoFact Linear "Delete" 1,1,Linear)
  but no rule has such an action.
  
  restriction `set_notin' references action 
    (ProtoFact Linear "Delete" 1,1,Linear)
  but no rule has such an action.
*/

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.
SAPIC tool: 'sapic'
Checking availablity ... OK.


analyzing: case-studies-sapic-regression/basic/design-choices.spthy

------------------------------------------------------------------------------
analyzed: case-studies-sapic-regression/basic/design-choices.spthy

  output:          case-studies-sapic-regression/basic/design-choices.spthy.tmp
  processing time: 0.549741347s
  WARNING: 3 wellformedness check failed!
           The analysis results might be wrong!
  
  visit_once (all-traces): verified (66 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: case-studies-sapic-regression/basic/design-choices.spthy

  output:          case-studies-sapic-regression/basic/design-choices.spthy.tmp
  processing time: 0.549741347s
  WARNING: 3 wellformedness check failed!
           The analysis results might be wrong!
  
  visit_once (all-traces): verified (66 steps)

==============================================================================
*/
