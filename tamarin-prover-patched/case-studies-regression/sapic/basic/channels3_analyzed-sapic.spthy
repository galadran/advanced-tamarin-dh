theory ChannelsTestThree begin

// Function signature and definition of the equational theory E

functions: check_rep/2, fst/1, get_rep/1, pair/2, rep/2 [private], snd/1
equations:
    check_rep(rep(m, loc), loc) = m,
    fst(<x.1, x.2>) = x.1,
    get_rep(rep(m, loc)) = m,
    snd(<x.1, x.2>) = x.2

heuristic: p

rule (modulo E) Init_:
   [ ] --[ Init( ) ]-> [ State_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_:
   [ State_( ) ] --> [ State_1( ), State_2( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_a_1[color=#569dc0]:
   [ State_1( ), Fr( a ) ] --> [ State_11( a ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_c_a_0_11[color=#569dc0]:
   [ State_11( a ), In( 'c' ) ]
  --[ ChannelInEvent( 'c' ) ]->
   [ Out( a ), State_111( a ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_c_a_1_11[color=#569dc0]:
   [ State_11( a ) ] --> [ Semistate_11( a ), Message( 'c', a ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_c_a_2_11[color=#569dc0]:
   [ Semistate_11( a ), Ack( 'c', a ) ] --> [ State_111( a ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_111[color=#569dc0]:
   [ State_111( a ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_c_x_0_2[color=#2cd719]:
   [ State_2( ), In( <'c', x> ) ]
  --[ ChannelInEvent( <'c', x> ) ]->
   [ State_21( x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_c_x_1_2[color=#2cd719]:
   [ State_2( ), Message( 'c', x ) ] --> [ Ack( 'c', x ), State_21( x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Receivedx_21[color=#2cd719]:
   [ State_21( x ) ] --[ Event( ), Received( x ) ]-> [ State_211( x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_211[color=#2cd719]:
   [ State_211( x ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma not_secret:
  exists-trace "∃ #i #j x. (Received( x ) @ #i) ∧ (K( x ) @ #j)"
/*
guarded formula characterizing all satisfying traces:
"∃ #i #j x. (Received( x ) @ #i) ∧ (K( x ) @ #j)"
*/
simplify
solve( State_21( x ) ▶₀ #i )
  case in_c_x_0_2
  SOLVED // trace found
qed

lemma internal_comm:
  exists-trace
  "∃ x #i. (Received( x ) @ #i) ∧ (∀ y #j. (K( y ) @ #j) ⇒ (¬(x = y)))"
/*
guarded formula characterizing all satisfying traces:
"∃ x #i. (Received( x ) @ #i) ∧ ∀ y #j. (K( y ) @ #j) ⇒ ¬(x = y)"
*/
simplify
solve( State_21( x ) ▶₀ #i )
  case in_c_x_0_2
  SOLVED // trace found
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.
SAPIC tool: 'sapic'
Checking availablity ... OK.


analyzing: case-studies-sapic-regression/basic/channels3.spthy

------------------------------------------------------------------------------
analyzed: case-studies-sapic-regression/basic/channels3.spthy

  output:          case-studies-sapic-regression/basic/channels3.spthy.tmp
  processing time: 0.063335574s
  not_secret (exists-trace): verified (3 steps)
  internal_comm (exists-trace): verified (3 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: case-studies-sapic-regression/basic/channels3.spthy

  output:          case-studies-sapic-regression/basic/channels3.spthy.tmp
  processing time: 0.063335574s
  not_secret (exists-trace): verified (3 steps)
  internal_comm (exists-trace): verified (3 steps)

==============================================================================
*/
