theory ChannelsTestOne begin

// Function signature and definition of the equational theory E

functions: check_rep/2, fst/1, get_rep/1, pair/2, rep/2 [private], snd/1
equations:
    check_rep(rep(m, loc), loc) = m,
    fst(<x.1, x.2>) = x.1,
    get_rep(rep(m, loc)) = m,
    snd(<x.1, x.2>) = x.2

heuristic: p

rule (modulo E) Init_:
   [ ] --[ Init( ) ]-> [ State_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_c_:
   [ State_( ), Fr( c ) ] --> [ State_1( c ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_1:
   [ State_1( c ) ] --> [ State_11( c ), State_12( c ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_a_11[color=#569dc0]:
   [ State_11( c ), Fr( a ) ] --> [ State_111( a, c ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Secreta_111[color=#569dc0]:
   [ State_111( a, c ) ]
  --[ Event( ), Secret( a ) ]->
   [ State_1111( a, c ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_c_a_0_1111[color=#569dc0]:
   [ State_1111( a, c ), In( c ) ]
  --[ ChannelInEvent( c ) ]->
   [ Out( a ), State_11111( a, c ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_c_a_1_1111[color=#569dc0]:
   [ State_1111( a, c ) ] --> [ Semistate_1111( a, c ), Message( c, a ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_c_a_2_1111[color=#569dc0]:
   [ Semistate_1111( a, c ), Ack( c, a ) ] --> [ State_11111( a, c ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_c_11111[color=#569dc0]:
   [ State_11111( a, c ) ] --> [ State_111111( a, c ), Out( c ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_111111[color=#569dc0]:
   [ State_111111( a, c ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_c_x_0_12[color=#2cd719]:
   [ State_12( c ), In( <c, x> ) ]
  --[ ChannelInEvent( <c, x> ) ]->
   [ State_121( c, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_c_x_1_12[color=#2cd719]:
   [ State_12( c ), Message( c, x ) ] --> [ Ack( c, x ), State_121( c, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Receivedx_121[color=#2cd719]:
   [ State_121( c, x ) ]
  --[ Event( ), Received( x ) ]->
   [ State_1211( c, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1211[color=#2cd719]:
   [ State_1211( c, x ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma secret:
  all-traces "∀ x #i. (Secret( x ) @ #i) ⇒ (¬(∃ #j. K( x ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i. (Secret( x ) @ #i) ∧ ∃ #j. (K( x ) @ #j)"
*/
simplify
solve( State_111( x, c ) ▶₀ #i )
  case new_a_11
  solve( !KU( ~n ) @ #vk )
    case out_c_a_0_1111
    by solve( !KU( ~n.1 ) @ #vk.1 )
  qed
qed

lemma received:
  exists-trace "∃ x #i. Received( x ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ x #i. (Received( x ) @ #i)"
*/
simplify
solve( State_121( c, x ) ▶₀ #i )
  case in_c_x_1_12
  SOLVED // trace found
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.
SAPIC tool: 'sapic'
Checking availablity ... OK.


analyzing: case-studies-sapic-regression/basic/channels1.spthy

------------------------------------------------------------------------------
analyzed: case-studies-sapic-regression/basic/channels1.spthy

  output:          case-studies-sapic-regression/basic/channels1.spthy.tmp
  processing time: 0.140043944s
  secret (all-traces): verified (4 steps)
  received (exists-trace): verified (3 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: case-studies-sapic-regression/basic/channels1.spthy

  output:          case-studies-sapic-regression/basic/channels1.spthy.tmp
  processing time: 0.140043944s
  secret (all-traces): verified (4 steps)
  received (exists-trace): verified (3 steps)

==============================================================================
*/
