theory ExclusiveSecrets begin

// Function signature and definition of the equational theory E

functions: check_rep/2, fst/1, get_rep/1, left/0, pair/2,
           rep/2 [private], right/0, snd/1, store/0
equations:
    check_rep(rep(m, loc), loc) = m,
    fst(<x.1, x.2>) = x.1,
    get_rep(rep(m, loc)) = m,
    snd(<x.1, x.2>) = x.2

heuristic: p

rule (modulo E) Init_:
   [ ] --[ Init( ) ]-> [ State_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_x_:
   [ State_( ), In( x ) ] --> [ State_1( x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert_store_x_1:
   [ State_1( x ) ] --[ Insert( store, x ) ]-> [ State_11( x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_SetStorex_11:
   [ State_11( x ) ] --[ Event( ), SetStore( x ) ]-> [ State_111( x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_a_111:
   [ State_111( x ), Fr( a ) ] --> [ State_1111( a, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_b_1111:
   [ State_1111( a, x ), Fr( b ) ] --> [ State_11111( a, b, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Secreta_b_11111:
   [ State_11111( a, b, x ) ]
  --[ Event( ), Secret( a, b ) ]->
   [ State_111111( a, b, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_111111:
   [ State_111111( a, b, x ) ] --> [ !Semistate_1111111( a, b, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_111111:
   [ !Semistate_1111111( a, b, x ) ] --> [ State_1111111( a, b, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_store_as_v_0_1111111[color=#569dc0]:
   [ State_1111111( a, b, x ) ]
  --[ IsIn( store, v ) ]->
   [ State_11111111( a, b, v, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_store_as_v_1_1111111[color=#569dc0]:
   [ State_1111111( a, b, x ) ]
  --[ IsNotSet( store ) ]->
   [ State_11111112( a, b, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqv_left_0_11111111[color=#569dc0]:
   [ State_11111111( a, b, v, x ) ]
  --[ Pred_eq( v, left ) ]->
   [ State_111111111( a, b, v, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqv_left_1_11111111[color=#569dc0]:
   [ State_11111111( a, b, v, x ) ]
  --[ Pred_not_eq( v, left ) ]->
   [ State_111111112( a, b, v, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_a_111111111[color=#569dc0]:
   [ State_111111111( a, b, v, x ) ]
  -->
   [ State_1111111111( a, b, v, x ), Out( a ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111111111[color=#569dc0]:
   [ State_1111111111( a, b, v, x ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqv_right_0_111111112[color=#569dc0]:
   [ State_111111112( a, b, v, x ) ]
  --[ Pred_eq( v, right ) ]->
   [ State_1111111121( a, b, v, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqv_right_1_111111112[color=#569dc0]:
   [ State_111111112( a, b, v, x ) ]
  --[ Pred_not_eq( v, right ) ]->
   [ State_1111111122( a, b, v, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_b_1111111121[color=#569dc0]:
   [ State_1111111121( a, b, v, x ) ]
  -->
   [ State_11111111211( a, b, v, x ), Out( b ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_11111111211[color=#569dc0]:
   [ State_11111111211( a, b, v, x ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111111122[color=#569dc0]:
   [ State_1111111122( a, b, v, x ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_11111112[color=#569dc0]:
   [ State_11111112( a, b, x ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction set_in:
  "∀ x y #t3.
    (IsIn( x, y ) @ #t3) ⇒
    (∃ #t2.
      (((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ∧
       (∀ #t1. (Delete( x ) @ #t1) ⇒ ((#t1 < #t2) ∨ (#t3 < #t1)))) ∧
      (∀ #t1 yp.
        (Insert( x, yp ) @ #t1) ⇒ (((#t1 < #t2) ∨ (#t1 = #t2)) ∨ (#t3 < #t1))))"

restriction set_notin:
  "∀ x #t3.
    (IsNotSet( x ) @ #t3) ⇒
    ((∀ #t1 y. (Insert( x, y ) @ #t1) ⇒ (#t3 < #t1)) ∨
     (∃ #t1.
       ((Delete( x ) @ #t1) ∧ (#t1 < #t3)) ∧
       (∀ #t2 y. ((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ⇒ (#t2 < #t1))))"

restriction predicate_eq:
  "∀ #i a b. (Pred_eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction predicate_not_eq:
  "∀ #i a b. (Pred_not_eq( a, b ) @ #i) ⇒ (¬(a = b))"
  // safety formula

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma a_not_secret:
  exists-trace "∃ #i #j x y. (Secret( x, y ) @ #i) ∧ (K( x ) @ #j)"
/*
guarded formula characterizing all satisfying traces:
"∃ #i #j x y. (Secret( x, y ) @ #i) ∧ (K( x ) @ #j)"
*/
simplify
solve( State_11111( x, y, x.1 ) ▶₀ #i )
  case new_b_1111
  solve( !KU( ~n ) @ #vk )
    case out_a_111111111
    solve( (#vr.3 < #t2)  ∥ (#vr.3 = #t2) )
      case case_2
      SOLVED // trace found
    qed
  qed
qed

lemma b_not_secret:
  exists-trace "∃ #i #j x y. (Secret( x, y ) @ #i) ∧ (K( y ) @ #j)"
/*
guarded formula characterizing all satisfying traces:
"∃ #i #j x y. (Secret( x, y ) @ #i) ∧ (K( y ) @ #j)"
*/
simplify
solve( State_11111( x, y, x.1 ) ▶₀ #i )
  case new_b_1111
  solve( !KU( ~n.1 ) @ #vk )
    case out_b_1111111121
    solve( (#vr.3 < #t2)  ∥ (#vr.3 = #t2) )
      case case_2
      SOLVED // trace found
    qed
  qed
qed

lemma sanity:
  all-traces
  "∀ #i #j #k x y z.
    (((Secret( x, y ) @ #i) ∧ (K( x ) @ #j)) ∧ (SetStore( z ) @ #k)) ⇒
    (z = left)"
/*
guarded formula characterizing all counter-examples:
"∃ #i #j #k x y z.
  (Secret( x, y ) @ #i) ∧ (K( x ) @ #j) ∧ (SetStore( z ) @ #k)
 ∧
  ¬(z = left)"
*/
simplify
solve( State_11111( x, y, x.1 ) ▶₀ #i )
  case new_b_1111
  solve( State_11( z ) ▶₀ #k )
    case insert_store_x_1
    solve( !KU( ~n ) @ #vk )
      case out_a_111111111
      solve( (#vr.2 < #t2)  ∥ (#vr.2 = #t2) )
        case case_1
        solve( State_1( left ) ▶₀ #t2 )
          case in_x_
          by contradiction /* cyclic */
        qed
      next
        case case_2
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma exclusive_secrets:
  all-traces
  "¬(∃ #i #j #k x y.
      ((Secret( x, y ) @ #i) ∧ (K( x ) @ #j)) ∧ (K( y ) @ #k))"
/*
guarded formula characterizing all counter-examples:
"∃ #i #j #k x y. (Secret( x, y ) @ #i) ∧ (K( x ) @ #j) ∧ (K( y ) @ #k)"
*/
simplify
solve( State_11111( x, y, x.1 ) ▶₀ #i )
  case new_b_1111
  solve( !KU( ~n ) @ #vk )
    case out_a_111111111
    solve( (#vr.3 < #t2)  ∥ (#vr.3 = #t2) )
      case case_1
      solve( State_1( left ) ▶₀ #t2 )
        case in_x_
        by contradiction /* cyclic */
      qed
    next
      case case_2
      solve( !KU( ~n.1 ) @ #vk.1 )
        case out_b_1111111121
        by solve( State_1( right ) ▶₀ #t2.1 )
      qed
    qed
  qed
qed

/*
WARNING: the following wellformedness checks failed!

unbound:
  rule `lookup_store_as_v_0_1111111' has unbound variables: 
    v

Restriction actions:
  restriction `set_in' references action 
    (ProtoFact Linear "Delete" 1,1,Linear)
  but no rule has such an action.
  
  restriction `set_notin' references action 
    (ProtoFact Linear "Delete" 1,1,Linear)
  but no rule has such an action.
*/

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.
SAPIC tool: 'sapic'
Checking availablity ... OK.


analyzing: case-studies-sapic-regression/basic/exclusive-secrets.spthy

------------------------------------------------------------------------------
analyzed: case-studies-sapic-regression/basic/exclusive-secrets.spthy

  output:          case-studies-sapic-regression/basic/exclusive-secrets.spthy.tmp
  processing time: 0.33045503s
  WARNING: 3 wellformedness check failed!
           The analysis results might be wrong!
  
  a_not_secret (exists-trace): verified (5 steps)
  b_not_secret (exists-trace): verified (5 steps)
  sanity (all-traces): verified (8 steps)
  exclusive_secrets (all-traces): verified (8 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: case-studies-sapic-regression/basic/exclusive-secrets.spthy

  output:          case-studies-sapic-regression/basic/exclusive-secrets.spthy.tmp
  processing time: 0.33045503s
  WARNING: 3 wellformedness check failed!
           The analysis results might be wrong!
  
  a_not_secret (exists-trace): verified (5 steps)
  b_not_secret (exists-trace): verified (5 steps)
  sanity (all-traces): verified (8 steps)
  exclusive_secrets (all-traces): verified (8 steps)

==============================================================================
*/
