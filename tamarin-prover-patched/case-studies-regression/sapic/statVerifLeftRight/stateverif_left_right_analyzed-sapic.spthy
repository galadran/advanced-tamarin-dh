theory StatVerif_Security_Device begin

// Function signature and definition of the equational theory E

functions: adec/2, aenc/2, check_rep/2, fst/1, get_rep/1, pair/2, pk/1,
           rep/2 [private], snd/1
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    check_rep(rep(m, loc), loc) = m,
    fst(<x.1, x.2>) = x.1,
    get_rep(rep(m, loc)) = m,
    snd(<x.1, x.2>) = x.2

heuristic: p

rule (modulo E) Init_:
   [ ] --[ Init( ) ]-> [ State_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_:
   [ State_( ) ] --> [ !Semistate_1( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_:
   [ !Semistate_1( ) ] --> [ State_1( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_sk_1:
   [ State_1( ), Fr( sk ) ] --> [ State_11( sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_s_11:
   [ State_11( sk ), Fr( s ) ] --> [ State_111( s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert_s_init__111:
   [ State_111( s, sk ) ]
  --[ Insert( s, 'init' ) ]->
   [ State_1111( s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_1111:
   [ State_1111( s, sk ) ]
  -->
   [ State_11111( s, sk ), State_11112( s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_11111[color=#569dc0]:
   [ State_11111( s, sk ) ]
  -->
   [ State_111111( s, sk ), State_111112( s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_111111[color=#569dc0]:
   [ State_111111( s, sk ) ]
  -->
   [ State_1111111( s, sk ), State_1111112( s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_pksk_1111111[color=#569dc0]:
   [ State_1111111( s, sk ) ] --> [ State_11111111( s, sk ), Out( pk(sk) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_11111111[color=#569dc0]:
   [ State_11111111( s, sk ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_1111112[color=#569dc0]:
   [ State_1111112( s, sk ) ] --> [ !Semistate_11111121( s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_1111112[color=#569dc0]:
   [ !Semistate_11111121( s, sk ) ] --> [ State_11111121( s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_s_11111121[color=#569dc0]:
   [ State_11111121( s, sk ), Fr( ~lock10 ) ]
  --[ Lock( $10, ~lock10, s ), Lock_10( $10, ~lock10, s ) ]->
   [ State_111111211( ~lock10, s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_req_111111211[color=#569dc0]:
   [ State_111111211( ~lock10, s, sk ), In( req ) ]
  -->
   [ State_1111112111( ~lock10, req, s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_s_as_status_0_1111112111[color=#569dc0]:
   [ State_1111112111( ~lock10, req, s, sk ) ]
  --[ IsIn( s, status ) ]->
   [ State_11111121111( ~lock10, req, s, sk, status ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_s_as_status_1_1111112111[color=#569dc0]:
   [ State_1111112111( ~lock10, req, s, sk ) ]
  --[ IsNotSet( s ) ]->
   [ State_11111121112( ~lock10, req, s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqstatus_init__0_11111121111[color=#569dc0]:
   [ State_11111121111( ~lock10, req, s, sk, status ) ]
  --[ Pred_eq( status, 'init' ) ]->
   [ State_111111211111( ~lock10, req, s, sk, status ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqstatus_init__1_11111121111[color=#569dc0]:
   [ State_11111121111( ~lock10, req, s, sk, status ) ]
  --[ Pred_not_eq( status, 'init' ) ]->
   [ State_111111211112( ~lock10, req, s, sk, status ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqreq_left__0_111111211111[color=#569dc0]:
   [ State_111111211111( ~lock10, req, s, sk, status ) ]
  --[ Pred_eq( req, 'left' ) ]->
   [ State_1111112111111( ~lock10, req, s, sk, status ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqreq_left__1_111111211111[color=#569dc0]:
   [ State_111111211111( ~lock10, req, s, sk, status ) ]
  --[ Pred_not_eq( req, 'left' ) ]->
   [ State_1111112111112( ~lock10, req, s, sk, status ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_InitDevices_1111112111111[color=#569dc0]:
   [ State_1111112111111( ~lock10, req, s, sk, status ) ]
  --[ Event( ), InitDevice( s ) ]->
   [ State_11111121111111( ~lock10, req, s, sk, status ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert_s_req_11111121111111[color=#569dc0]:
   [ State_11111121111111( ~lock10, req, s, sk, status ) ]
  --[ Insert( s, req ) ]->
   [ State_111111211111111( ~lock10, req, s, sk, status ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_s_111111211111111[color=#569dc0]:
   [ State_111111211111111( ~lock10, req, s, sk, status ) ]
  --[ Unlock( $10, ~lock10, s ), Unlock_10( $10, ~lock10, s ) ]->
   [ State_1111112111111111( ~lock10, req, s, sk, status ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111112111111111[color=#569dc0]:
   [ State_1111112111111111( ~lock10, req, s, sk, status ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqreq_right__0_1111112111112[color=#569dc0]:
   [ State_1111112111112( ~lock10, req, s, sk, status ) ]
  --[ Pred_eq( req, 'right' ) ]->
   [ State_11111121111121( ~lock10, req, s, sk, status ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqreq_right__1_1111112111112[color=#569dc0]:
   [ State_1111112111112( ~lock10, req, s, sk, status ) ]
  --[ Pred_not_eq( req, 'right' ) ]->
   [ State_11111121111122( ~lock10, req, s, sk, status ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_InitDevices_11111121111121[color=#569dc0]:
   [ State_11111121111121( ~lock10, req, s, sk, status ) ]
  --[ Event( ), InitDevice( s ) ]->
   [ State_111111211111211( ~lock10, req, s, sk, status ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert_s_req_111111211111211[color=#569dc0]:
   [ State_111111211111211( ~lock10, req, s, sk, status ) ]
  --[ Insert( s, req ) ]->
   [ State_1111112111112111( ~lock10, req, s, sk, status ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_s_1111112111112111[color=#569dc0]:
   [ State_1111112111112111( ~lock10, req, s, sk, status ) ]
  --[ Unlock( $10, ~lock10, s ), Unlock_10( $10, ~lock10, s ) ]->
   [ State_11111121111121111( ~lock10, req, s, sk, status ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_11111121111121111[color=#569dc0]:
   [ State_11111121111121111( ~lock10, req, s, sk, status ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_11111121111122[color=#569dc0]:
   [ State_11111121111122( ~lock10, req, s, sk, status ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_111111211112[color=#569dc0]:
   [ State_111111211112( ~lock10, req, s, sk, status ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_11111121112[color=#569dc0]:
   [ State_11111121112( ~lock10, req, s, sk ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_111112[color=#569dc0]:
   [ State_111112( s, sk ) ] --> [ !Semistate_1111121( s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_111112[color=#569dc0]:
   [ !Semistate_1111121( s, sk ) ] --> [ State_1111121( s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_s_1111121[color=#569dc0]:
   [ State_1111121( s, sk ), Fr( ~lock9 ) ]
  --[ Lock( $9, ~lock9, s ), Lock_9( $9, ~lock9, s ) ]->
   [ State_11111211( ~lock9, s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_aenc_x_y_pksk_11111211[color=#569dc0]:
   [ State_11111211( ~lock9, s, sk ), In( aenc(<x, y>, pk(sk)) ) ]
  -->
   [ State_111112111( ~lock9, s, sk, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_s_as_status_0_111112111[color=#569dc0]:
   [ State_111112111( ~lock9, s, sk, x, y ) ]
  --[ IsIn( s, status ) ]->
   [ State_1111121111( ~lock9, s, sk, status, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_s_as_status_1_111112111[color=#569dc0]:
   [ State_111112111( ~lock9, s, sk, x, y ) ]
  --[ IsNotSet( s ) ]->
   [ State_1111121112( ~lock9, s, sk, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqstatus_left__0_1111121111[color=#569dc0]:
   [ State_1111121111( ~lock9, s, sk, status, x, y ) ]
  --[ Pred_eq( status, 'left' ) ]->
   [ State_11111211111( ~lock9, s, sk, status, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqstatus_left__1_1111121111[color=#569dc0]:
   [ State_1111121111( ~lock9, s, sk, status, x, y ) ]
  --[ Pred_not_eq( status, 'left' ) ]->
   [ State_11111211112( ~lock9, s, sk, status, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Accessx_11111211111[color=#569dc0]:
   [ State_11111211111( ~lock9, s, sk, status, x, y ) ]
  --[ Event( ), Access( x ) ]->
   [ State_111112111111( ~lock9, s, sk, status, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_x_111112111111[color=#569dc0]:
   [ State_111112111111( ~lock9, s, sk, status, x, y ) ]
  -->
   [ State_1111121111111( ~lock9, s, sk, status, x, y ), Out( x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_s_1111121111111[color=#569dc0]:
   [ State_1111121111111( ~lock9, s, sk, status, x, y ) ]
  --[ Unlock( $9, ~lock9, s ), Unlock_9( $9, ~lock9, s ) ]->
   [ State_11111211111111( ~lock9, s, sk, status, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_11111211111111[color=#569dc0]:
   [ State_11111211111111( ~lock9, s, sk, status, x, y ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqstatus_right__0_11111211112[color=#569dc0]:
   [ State_11111211112( ~lock9, s, sk, status, x, y ) ]
  --[ Pred_eq( status, 'right' ) ]->
   [ State_111112111121( ~lock9, s, sk, status, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqstatus_right__1_11111211112[color=#569dc0]:
   [ State_11111211112( ~lock9, s, sk, status, x, y ) ]
  --[ Pred_not_eq( status, 'right' ) ]->
   [ State_111112111122( ~lock9, s, sk, status, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Accessy_111112111121[color=#569dc0]:
   [ State_111112111121( ~lock9, s, sk, status, x, y ) ]
  --[ Event( ), Access( y ) ]->
   [ State_1111121111211( ~lock9, s, sk, status, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_y_1111121111211[color=#569dc0]:
   [ State_1111121111211( ~lock9, s, sk, status, x, y ) ]
  -->
   [ State_11111211112111( ~lock9, s, sk, status, x, y ), Out( y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_s_11111211112111[color=#569dc0]:
   [ State_11111211112111( ~lock9, s, sk, status, x, y ) ]
  --[ Unlock( $9, ~lock9, s ), Unlock_9( $9, ~lock9, s ) ]->
   [ State_111112111121111( ~lock9, s, sk, status, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_111112111121111[color=#569dc0]:
   [ State_111112111121111( ~lock9, s, sk, status, x, y ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_s_111112111122[color=#569dc0]:
   [ State_111112111122( ~lock9, s, sk, status, x, y ) ]
  --[ Unlock( $9, ~lock9, s ), Unlock_9( $9, ~lock9, s ) ]->
   [ State_1111121111221( ~lock9, s, sk, status, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111121111221[color=#569dc0]:
   [ State_1111121111221( ~lock9, s, sk, status, x, y ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111121112[color=#569dc0]:
   [ State_1111121112( ~lock9, s, sk, x, y ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_11112:
   [ State_11112( s, sk ) ] --> [ !Semistate_111121( s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_11112:
   [ !Semistate_111121( s, sk ) ] --> [ State_111121( s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_lm_111121[color=#2cd719]:
   [ State_111121( s, sk ), Fr( lm ) ] --> [ State_1111211( lm, s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_rm_1111211[color=#2cd719]:
   [ State_1111211( lm, s, sk ), Fr( rm ) ]
  -->
   [ State_11112111( lm, rm, s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Exclusivelm_rm_11112111[color=#2cd719]:
   [ State_11112111( lm, rm, s, sk ) ]
  --[ Event( ), Exclusive( lm, rm ) ]->
   [ State_111121111( lm, rm, s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_aenc_lm_rm_pksk_111121111[color=#2cd719]:
   [ State_111121111( lm, rm, s, sk ) ]
  -->
   [ State_1111211111( lm, rm, s, sk ), Out( aenc(<lm, rm>, pk(sk)) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111211111[color=#2cd719]:
   [ State_1111211111( lm, rm, s, sk ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction set_in:
  "∀ x y #t3.
    (IsIn( x, y ) @ #t3) ⇒
    (∃ #t2.
      (((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ∧
       (∀ #t1. (Delete( x ) @ #t1) ⇒ ((#t1 < #t2) ∨ (#t3 < #t1)))) ∧
      (∀ #t1 yp.
        (Insert( x, yp ) @ #t1) ⇒ (((#t1 < #t2) ∨ (#t1 = #t2)) ∨ (#t3 < #t1))))"

restriction set_notin:
  "∀ x #t3.
    (IsNotSet( x ) @ #t3) ⇒
    ((∀ #t1 y. (Insert( x, y ) @ #t1) ⇒ (#t3 < #t1)) ∨
     (∃ #t1.
       ((Delete( x ) @ #t1) ∧ (#t1 < #t3)) ∧
       (∀ #t2 y. ((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ⇒ (#t2 < #t1))))"

restriction predicate_eq:
  "∀ #i a b. (Pred_eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction predicate_not_eq:
  "∀ #i a b. (Pred_not_eq( a, b ) @ #i) ⇒ (¬(a = b))"
  // safety formula

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction locking_10:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_10( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_10( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

restriction locking_9:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_9( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_9( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

lemma source [sources]:
  all-traces
  "∀ m #i.
    (Access( m ) @ #i) ⇒
    (((∃ #j. (!KU( m ) @ #j) ∧ (#j < #i)) ∨
      (∃ x #j. Exclusive( x, m ) @ #j)) ∨
     (∃ y #j. Exclusive( m, y ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ m #i.
  (Access( m ) @ #i)
 ∧
  (∀ #j. (!KU( m ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ x #j. (Exclusive( x, m ) @ #j) ⇒ ⊥) ∧
  (∀ y #j. (Exclusive( m, y ) @ #j) ⇒ ⊥)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ m #i.
           (Access( m ) @ #i)
          ⇒
           ((last(#i)) ∨
            (∃ #j. (!KU( m ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ x #j. (Exclusive( x, m ) @ #j) ∧ ¬(last(#j))) ∨
            (∃ y #j. (Exclusive( m, y ) @ #j) ∧ ¬(last(#j)))))  ∥
         (∃ x y #t3.
           (IsIn( x, y ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (∀ #t2.
             (Insert( x, y ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t1.
                (Delete( x ) @ #t1)
               ∧
                (¬(last(#t1))) ∧
                (((#t1 = #t2) ∨ (#t2 < #t1))) ∧
                (((#t3 = #t1) ∨ (#t1 < #t3)))) ∨
              (∃ #t1 yp.
                (Insert( x, yp ) @ #t1)
               ∧
                (¬(last(#t1))) ∧
                (((#t1 = #t2) ∨ (#t2 < #t1))) ∧
                (¬(#t1 = #t2)) ∧
                (((#t3 = #t1) ∨ (#t1 < #t3)))))))  ∥
         (∃ x #t3.
           (IsNotSet( x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (∃ #t1 y.
             (Insert( x, y ) @ #t1)
            ∧
             (¬(last(#t1))) ∧ (((#t3 = #t1) ∨ (#t1 < #t3)))) ∧
           (∀ #t1.
             (Delete( x ) @ #t1)
            ⇒
             ((last(#t1)) ∨
              (#t1 = #t3) ∨
              (#t3 < #t1) ∨
              (∃ #t2 y.
                (Insert( x, y ) @ #t2)
               ∧
                (¬(last(#t2))) ∧ (#t2 < #t3) ∧ (((#t2 = #t1) ∨ (#t1 < #t2)))))))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_10( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_10( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3)))  ∥
         (∃ p pp l x lp #t1 #t3.
           (Lock_9( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)
          ∧
           (¬(last(#t3))) ∧
           (¬(last(#t1))) ∧
           (((#t1 = #t3) ∨
             (#t3 < #t1) ∨
             (∀ #t2.
               (Unlock_9( p, l, x ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t1 = #t2) ∨
                (#t2 < #t1) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t0 pp.1.
                  (Unlock( pp.1, l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                (∃ pp.1 lpp #t0.
                  (Lock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (¬(#t0 = #t1)) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                (∃ pp.1 lpp #t0.
                  (Unlock( pp.1, lpp, x ) @ #t0)
                 ∧
                  (¬(last(#t0))) ∧
                  (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                  (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                  (¬(#t2 = #t0))))))) ∧
           (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
           (¬(#t1 = #t3))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ #j. (!KU( m ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ x #j. (Exclusive( x, m ) @ #j) ∧ ¬(last(#j)))  ∥
           (∃ y #j. (Exclusive( m, y ) @ #j) ∧ ¬(last(#j))) )
      case case_1
      solve( Access( m ) @ #i )
        case event_Accessx_11111211111
        solve( State_11111211111( ~lock9, s, sk, status, m, y ) ▶₀ #i )
          case if_eqstatus_left__0_1111121111
          solve( (#vr.8 < #t2)  ∥ (#vr.8 = #t2) )
            case case_1
            solve( !KU( aenc(<m, y>, pk(~n.1)) ) @ #vk )
              case c_aenc
              by contradiction /* from formulas */
            next
              case out_aenc_lm_rm_pksk_111121111
              by contradiction /* from formulas */
            next
              case out_x_111112111111
              solve( (∃ #j. (!KU( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                     (∃ x #j. (Exclusive( x, t ) @ #j) ∧ ¬(last(#j)))  ∥
                     (∃ y #j. (Exclusive( t, y ) @ #j) ∧ ¬(last(#j))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                solve( (#vr.24 < #t2.1)  ∥ (#vr.24 = #t2.1) )
                  case case_1
                  solve( State_11112111( x, t, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( State_11112111( x, t, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_3
                solve( (#vr.24 < #t2.1)  ∥ (#vr.24 = #t2.1) )
                  case case_1
                  solve( State_11112111( t, y.1, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( State_11112111( t, y.1, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case out_y_1111121111211
              solve( (∃ #j. (!KU( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                     (∃ x #j. (Exclusive( x, t ) @ #j) ∧ ¬(last(#j)))  ∥
                     (∃ y #j. (Exclusive( t, y ) @ #j) ∧ ¬(last(#j))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                solve( (#vr.25 < #t2.1)  ∥ (#vr.25 = #t2.1) )
                  case case_1
                  solve( State_11112111( x, t, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( State_11112111( x, t, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_3
                solve( (#vr.25 < #t2.1)  ∥ (#vr.25 = #t2.1) )
                  case case_1
                  solve( State_11112111( t, y.1, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( State_11112111( t, y.1, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          next
            case case_2
            solve( !KU( aenc(<m, y>, pk(~n.1)) ) @ #vk )
              case c_aenc
              by contradiction /* from formulas */
            next
              case out_aenc_lm_rm_pksk_111121111
              by contradiction /* from formulas */
            next
              case out_x_111112111111
              solve( (∃ #j. (!KU( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                     (∃ x #j. (Exclusive( x, t ) @ #j) ∧ ¬(last(#j)))  ∥
                     (∃ y #j. (Exclusive( t, y ) @ #j) ∧ ¬(last(#j))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                solve( (#vr.23 < #t2.1)  ∥ (#vr.23 = #t2.1) )
                  case case_1
                  solve( State_11112111( x, t, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( State_11112111( x, t, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_3
                solve( (#vr.23 < #t2.1)  ∥ (#vr.23 = #t2.1) )
                  case case_1
                  solve( State_11112111( t, y.1, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( State_11112111( t, y.1, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case out_y_1111121111211
              solve( (∃ #j. (!KU( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.14))  ∥
                     (∃ x #j. (Exclusive( x, t ) @ #j) ∧ ¬(last(#j)))  ∥
                     (∃ y #j. (Exclusive( t, y ) @ #j) ∧ ¬(last(#j))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                solve( (#vr.24 < #t2.1)  ∥ (#vr.24 = #t2.1) )
                  case case_1
                  solve( State_11112111( x, t, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( State_11112111( x, t, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_3
                solve( (#vr.24 < #t2.1)  ∥ (#vr.24 = #t2.1) )
                  case case_1
                  solve( State_11112111( t, y.1, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( State_11112111( t, y.1, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case event_Accessy_111112111121
        solve( State_111112111121( ~lock9, s, sk, status, x, m ) ▶₀ #i )
          case if_eqstatus_right__0_11111211112
          solve( (#vr.9 < #t2)  ∥ (#vr.9 = #t2) )
            case case_1
            solve( !KU( aenc(<x, m>, pk(~n.1)) ) @ #vk )
              case c_aenc
              by contradiction /* from formulas */
            next
              case out_aenc_lm_rm_pksk_111121111
              by contradiction /* from formulas */
            next
              case out_x_111112111111
              solve( (∃ #j. (!KU( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.16))  ∥
                     (∃ x #j. (Exclusive( x, t ) @ #j) ∧ ¬(last(#j)))  ∥
                     (∃ y #j. (Exclusive( t, y ) @ #j) ∧ ¬(last(#j))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                solve( (#vr.25 < #t2.1)  ∥ (#vr.25 = #t2.1) )
                  case case_1
                  solve( State_11112111( x.1, t, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( State_11112111( x.1, t, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_3
                solve( (#vr.25 < #t2.1)  ∥ (#vr.25 = #t2.1) )
                  case case_1
                  solve( State_11112111( t, y, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( State_11112111( t, y, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case out_y_1111121111211
              solve( (∃ #j. (!KU( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.16))  ∥
                     (∃ x #j. (Exclusive( x, t ) @ #j) ∧ ¬(last(#j)))  ∥
                     (∃ y #j. (Exclusive( t, y ) @ #j) ∧ ¬(last(#j))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                solve( (#vr.26 < #t2.1)  ∥ (#vr.26 = #t2.1) )
                  case case_1
                  solve( State_11112111( x.1, t, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( State_11112111( x.1, t, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_3
                solve( (#vr.26 < #t2.1)  ∥ (#vr.26 = #t2.1) )
                  case case_1
                  solve( State_11112111( t, y, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( State_11112111( t, y, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          next
            case case_2
            solve( !KU( aenc(<x, m>, pk(~n.1)) ) @ #vk )
              case c_aenc
              by contradiction /* from formulas */
            next
              case out_aenc_lm_rm_pksk_111121111
              by contradiction /* from formulas */
            next
              case out_x_111112111111
              solve( (∃ #j. (!KU( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                     (∃ x #j. (Exclusive( x, t ) @ #j) ∧ ¬(last(#j)))  ∥
                     (∃ y #j. (Exclusive( t, y ) @ #j) ∧ ¬(last(#j))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                solve( (#vr.24 < #t2.1)  ∥ (#vr.24 = #t2.1) )
                  case case_1
                  solve( State_11112111( x.1, t, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( State_11112111( x.1, t, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_3
                solve( (#vr.24 < #t2.1)  ∥ (#vr.24 = #t2.1) )
                  case case_1
                  solve( State_11112111( t, y, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( State_11112111( t, y, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            next
              case out_y_1111121111211
              solve( (∃ #j. (!KU( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.15))  ∥
                     (∃ x #j. (Exclusive( x, t ) @ #j) ∧ ¬(last(#j)))  ∥
                     (∃ y #j. (Exclusive( t, y ) @ #j) ∧ ¬(last(#j))) )
                case case_1
                by contradiction /* cyclic */
              next
                case case_2
                solve( (#vr.25 < #t2.1)  ∥ (#vr.25 = #t2.1) )
                  case case_1
                  solve( State_11112111( x.1, t, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( State_11112111( x.1, t, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case case_3
                solve( (#vr.25 < #t2.1)  ∥ (#vr.25 = #t2.1) )
                  case case_1
                  solve( State_11112111( t, y, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                next
                  case case_2
                  solve( State_11112111( t, y, s, sk ) ▶₀ #j )
                    case new_rm_1111211
                    by contradiction /* impossible chain */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    next
      case case_4
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (∃ #t1.
             (Delete( x ) @ #t1)
            ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t2) ∨ (#t2 < #t1))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))))  ∥
           (∃ #t1 yp.
             (Insert( x, yp ) @ #t1)
            ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t2) ∨ (#t2 < #t1))) ∧
             (¬(#t1 = #t2)) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3)))) )
      case case_1
      solve( (#t1 = #t2)  ∥ (#t2 < #t1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (#t1 = #t2)  ∥ (#t2 < #t1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    qed
  next
    case case_3
    solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
      case case_1
      solve( (∀ #t1.1 y. (Insert( x, y ) @ #t1.1) ⇒ #t1 < #t1.1)  ∥
             (∃ #t1.1.
               (Delete( x ) @ #t1.1)
              ∧
               (#t1.1 < #t1) ∧
               (∀ #t2 y. (Insert( x, y ) @ #t2) ⇒ ((¬(#t2 < #t1)) ∨ (#t2 < #t1.1)))) )
        case case_1
        by contradiction /* cyclic */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (∀ #t1 y. (Insert( x, y ) @ #t1) ⇒ #t3 < #t1)  ∥
             (∃ #t1.
               (Delete( x ) @ #t1)
              ∧
               (#t1 < #t3) ∧
               (∀ #t2 y. (Insert( x, y ) @ #t2) ⇒ ((¬(#t2 < #t3)) ∨ (#t2 < #t1)))) )
        case case_1
        by contradiction /* cyclic */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    qed
  next
    case case_4
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_10( $10, ~lock10, x ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~lock10, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~lock10, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_5
    solve( (#t1 = #t3)  ∥ (#t3 < #t1)  ∥
           (∀ #t2.
             (Unlock_9( $9, ~lock9, x ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (#t1 = #t2) ∨
              (#t2 < #t1) ∨
              (#t2 = #t3) ∨
              (#t3 < #t2) ∨
              (∃ #t0 pp.
                (Unlock( pp, ~lock9, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
              (∃ pp lpp #t0.
                (Lock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (¬(#t0 = #t1)) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
              (∃ pp lpp #t0.
                (Unlock( pp, lpp, x ) @ #t0)
               ∧
                (¬(last(#t0))) ∧
                (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                (¬(#t2 = #t0))))) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      solve( (#t3 = #t1)  ∥ (#t1 < #t3) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (∃ #t0 pp.
                 (Unlock( pp, ~lock9, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2)))  ∥
               (∃ pp lpp #t0.
                 (Lock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (¬(#t0 = #t1)) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))))  ∥
               (∃ pp lpp #t0.
                 (Unlock( pp, lpp, x ) @ #t0)
                ∧
                 (¬(last(#t0))) ∧
                 (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                 (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                 (¬(#t2 = #t0))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_2
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          solve( (#t0 = #t1)  ∥ (#t1 < #t0) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            solve( (#t2 = #t0)  ∥ (#t0 < #t2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma reachability_left:
  exists-trace "∃ x y #i #j. (Exclusive( x, y ) @ #i) ∧ (K( x ) @ #j)"
/*
guarded formula characterizing all satisfying traces:
"∃ x y #i #j. (Exclusive( x, y ) @ #i) ∧ (K( x ) @ #j)"
*/
simplify
solve( State_11112111( x, y, s, sk ) ▶₀ #i )
  case new_rm_1111211
  solve( !KU( ~n ) @ #vk )
    case out_x_111112111111
    solve( (#vr.21 < #t2)  ∥ (#vr.21 = #t2) )
      case case_1
      solve( !KU( aenc(<~n, y>, pk(~n.4)) ) @ #vk.1 )
        case out_aenc_lm_rm_pksk_111121111
        solve( Insert( ~n.2, 'left' ) @ #t2 )
          case insert_s_req_11111121111111
          solve( State_11111121111111( ~lock10, 'left', ~n.2, sk, status ) ▶₀ #t2 )
            case event_InitDevices_1111112111111
            solve( ((#vr.16 < #vr.26) ∧
                    (∃ #t2.
                      (Unlock_9( $9, ~lock9, ~n.2 ) @ #t2)
                     ∧
                      (#vr.16 < #t2) ∧
                      (#t2 < #vr.26) ∧
                      (∀ #t0 pp. (Unlock( pp, ~lock9, ~n.2 ) @ #t0) ⇒ #t0 = #t2) ∧
                      (∀ pp lpp #t0.
                        (Lock( pp, lpp, ~n.2 ) @ #t0)
                       ⇒
                        ((#t0 < #vr.16) ∨ (#t0 = #vr.16) ∨ (#t2 < #t0))) ∧
                      (∀ pp lpp #t0.
                        (Unlock( pp, lpp, ~n.2 ) @ #t0)
                       ⇒
                        ((#t0 < #vr.16) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                   (#vr.26 < #vr.16) )
              case case_2
              solve( (#vr.5 < #t2.1)  ∥ (#vr.5 = #t2.1) )
                case case_2
                solve( Unlock_10( $10, ~lock10, ~n.2 ) @ #t2.2 )
                  case unlock_s_111111211111111
                  solve( State_111111211111111( ~lock10, req, ~n.2, sk, status ) ▶₀ #t2.2 )
                    case insert_s_req_11111121111111
                    solve( (#t2.1 < #t2.3)  ∥ (#t2.1 = #t2.3) )
                      case case_2
                      solve( Insert( ~n.2, 'init' ) @ #t2.1 )
                        case insert_s_init__111
                        SOLVED // trace found
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma reachability_right:
  exists-trace "∃ x y #i #k. (Exclusive( x, y ) @ #i) ∧ (K( y ) @ #k)"
/*
guarded formula characterizing all satisfying traces:
"∃ x y #i #k. (Exclusive( x, y ) @ #i) ∧ (K( y ) @ #k)"
*/
simplify
solve( State_11112111( x, y, s, sk ) ▶₀ #i )
  case new_rm_1111211
  solve( !KU( ~n.1 ) @ #vk )
    case out_y_1111121111211
    solve( (#vr.22 < #t2)  ∥ (#vr.22 = #t2) )
      case case_1
      solve( !KU( aenc(<x, ~n.1>, pk(~n.4)) ) @ #vk.1 )
        case out_aenc_lm_rm_pksk_111121111
        solve( Insert( ~n.2, 'right' ) @ #t2 )
          case insert_s_req_111111211111211
          solve( State_111111211111211( ~lock10, 'right', ~n.2, sk, status
                 ) ▶₀ #t2 )
            case event_InitDevices_11111121111121
            solve( ((#vr.17 < #vr.28) ∧
                    (∃ #t2.
                      (Unlock_9( $9, ~lock9, ~n.2 ) @ #t2)
                     ∧
                      (#vr.17 < #t2) ∧
                      (#t2 < #vr.28) ∧
                      (∀ #t0 pp. (Unlock( pp, ~lock9, ~n.2 ) @ #t0) ⇒ #t0 = #t2) ∧
                      (∀ pp lpp #t0.
                        (Lock( pp, lpp, ~n.2 ) @ #t0)
                       ⇒
                        ((#t0 < #vr.17) ∨ (#t0 = #vr.17) ∨ (#t2 < #t0))) ∧
                      (∀ pp lpp #t0.
                        (Unlock( pp, lpp, ~n.2 ) @ #t0)
                       ⇒
                        ((#t0 < #vr.17) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                   (#vr.28 < #vr.17) )
              case case_2
              solve( (#vr.5 < #t2.1)  ∥ (#vr.5 = #t2.1) )
                case case_2
                solve( Unlock_10( $10, ~lock10, ~n.2 ) @ #t2.2 )
                  case unlock_s_1111112111112111
                  solve( State_1111112111112111( ~lock10, req, ~n.2, sk, status
                         ) ▶₀ #t2.2 )
                    case insert_s_req_111111211111211
                    solve( (#t2.1 < #t2.3)  ∥ (#t2.1 = #t2.3) )
                      case case_2
                      solve( Insert( ~n.2, 'init' ) @ #t2.1 )
                        case insert_s_init__111
                        SOLVED // trace found
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma secrecy:
  all-traces
  "¬(∃ x y #i #k1 #k2.
      ((Exclusive( x, y ) @ #i) ∧ (K( x ) @ #k1)) ∧ (K( y ) @ #k2))"
/*
guarded formula characterizing all counter-examples:
"∃ x y #i #k1 #k2.
  (Exclusive( x, y ) @ #i) ∧ (K( x ) @ #k1) ∧ (K( y ) @ #k2)"
*/
simplify
solve( State_11112111( x, y, s, sk ) ▶₀ #i )
  case new_rm_1111211
  solve( !KU( ~n ) @ #vk )
    case out_aenc_lm_rm_pksk_111121111
    by solve( !KU( ~n.3 ) @ #vk.2 )
  next
    case out_x_111112111111
    solve( (#vr.21 < #t2)  ∥ (#vr.21 = #t2) )
      case case_1
      solve( !KU( ~n.1 ) @ #vk.1 )
        case out_aenc_lm_rm_pksk_111121111
        solve( !KU( aenc(<~n, y>, pk(~n.4)) ) @ #vk.2 )
          case c_aenc
          by contradiction /* cyclic */
        next
          case out_aenc_lm_rm_pksk_111121111
          solve( Insert( ~n.2, 'left' ) @ #t2 )
            case insert_s_req_11111121111111
            solve( State_11111121111111( ~lock10, 'left', ~n.2, sk, status ) ▶₀ #t2 )
              case event_InitDevices_1111112111111
              solve( ((#vr.16 < #vr.28) ∧
                      (∃ #t2.
                        (Unlock_9( $9, ~lock9, ~n.2 ) @ #t2)
                       ∧
                        (#vr.16 < #t2) ∧
                        (#t2 < #vr.28) ∧
                        (∀ #t0 pp. (Unlock( pp, ~lock9, ~n.2 ) @ #t0) ⇒ #t0 = #t2) ∧
                        (∀ pp lpp #t0.
                          (Lock( pp, lpp, ~n.2 ) @ #t0)
                         ⇒
                          ((#t0 < #vr.16) ∨ (#t0 = #vr.16) ∨ (#t2 < #t0))) ∧
                        (∀ pp lpp #t0.
                          (Unlock( pp, lpp, ~n.2 ) @ #t0)
                         ⇒
                          ((#t0 < #vr.16) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                     (#vr.28 < #vr.16) )
                case case_1
                solve( (#vr.5 < #t2.1)  ∥ (#vr.5 = #t2.1) )
                  case case_1
                  solve( Unlock_9( $9, ~lock9, ~n.2 ) @ #t2.2 )
                    case unlock_s_1111121111111
                    solve( State_1111121111111( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.1 )
                      case out_x_111112111111
                      by contradiction /* cyclic */
                    qed
                  next
                    case unlock_s_11111211112111
                    by solve( State_11111211112111( ~lock9, ~n.2, sk, status, x, y
                              ) ▶₀ #t2.1 )
                  next
                    case unlock_s_111112111122
                    by solve( State_111112111122( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.1 )
                  qed
                next
                  case case_2
                  solve( Unlock_9( $9, ~lock9, ~n.2 ) @ #t2.2 )
                    case unlock_s_1111121111111
                    solve( State_1111121111111( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.2 )
                      case out_x_111112111111
                      by contradiction /* cyclic */
                    qed
                  next
                    case unlock_s_11111211112111
                    by solve( State_11111211112111( ~lock9, ~n.2, sk, status, x, y
                              ) ▶₀ #t2.2 )
                  next
                    case unlock_s_111112111122
                    by solve( State_111112111122( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.2 )
                  qed
                qed
              next
                case case_2
                solve( (#vr.5 < #t2.1)  ∥ (#vr.5 = #t2.1) )
                  case case_1
                  solve( Unlock_10( $10, ~lock10, ~n.2 ) @ #t2.2 )
                    case unlock_s_111111211111111
                    solve( State_111111211111111( ~lock10, req, ~n.2, sk, status ) ▶₀ #t2.1 )
                      case insert_s_req_11111121111111
                      solve( (#vr.5 < #t2.3)  ∥ (#vr.5 = #t2.3) )
                        case case_1
                        solve( (#t2.2 < #t2.3)  ∥ (#t2.2 = #t2.3) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by solve( !KU( ~n.3 ) @ #vk.3 )
                        qed
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case unlock_s_1111112111112111
                    by solve( State_1111112111112111( ~lock10, req, ~n.2, sk, status
                              ) ▶₀ #t2.1 )
                  qed
                next
                  case case_2
                  solve( Unlock_10( $10, ~lock10, ~n.2 ) @ #t2.2 )
                    case unlock_s_111111211111111
                    solve( State_111111211111111( ~lock10, req, ~n.2, sk, status ) ▶₀ #t2.2 )
                      case insert_s_req_11111121111111
                      solve( (#t2.1 < #t2.3)  ∥ (#t2.1 = #t2.3) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by solve( !KU( ~n.3 ) @ #vk.3 )
                      qed
                    qed
                  next
                    case unlock_s_1111112111112111
                    by solve( State_1111112111112111( ~lock10, req, ~n.2, sk, status
                              ) ▶₀ #t2.2 )
                  qed
                qed
              qed
            qed
          next
            case insert_s_req_111111211111211
            by solve( State_111111211111211( ~lock10, 'left', ~n.2, sk, status
                      ) ▶₀ #t2 )
          qed
        qed
      next
        case out_x_111112111111
        solve( (#vr.35 < #t2.1)  ∥ (#vr.35 = #t2.1) )
          case case_1
          solve( !KU( aenc(<~n, y>, pk(~n.4)) ) @ #vk.2 )
            case c_aenc
            by contradiction /* cyclic */
          next
            case out_aenc_lm_rm_pksk_111121111
            solve( Insert( ~n.2, 'left' ) @ #t2 )
              case insert_s_req_11111121111111
              solve( State_11111121111111( ~lock10, 'left', ~n.2, sk, status ) ▶₀ #t2 )
                case event_InitDevices_1111112111111
                solve( ((#vr.16 < #vr.40) ∧
                        (∃ #t2.
                          (Unlock_9( $9, ~lock9, ~n.2 ) @ #t2)
                         ∧
                          (#vr.16 < #t2) ∧
                          (#t2 < #vr.40) ∧
                          (∀ #t0 pp. (Unlock( pp, ~lock9, ~n.2 ) @ #t0) ⇒ #t0 = #t2) ∧
                          (∀ pp lpp #t0.
                            (Lock( pp, lpp, ~n.2 ) @ #t0)
                           ⇒
                            ((#t0 < #vr.16) ∨ (#t0 = #vr.16) ∨ (#t2 < #t0))) ∧
                          (∀ pp lpp #t0.
                            (Unlock( pp, lpp, ~n.2 ) @ #t0)
                           ⇒
                            ((#t0 < #vr.16) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                       (#vr.40 < #vr.16) )
                  case case_1
                  solve( (#vr.5 < #t2.2)  ∥ (#vr.5 = #t2.2) )
                    case case_1
                    solve( Unlock_9( $9, ~lock9, ~n.2 ) @ #t2.3 )
                      case unlock_s_1111121111111
                      solve( State_1111121111111( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.1 )
                        case out_x_111112111111
                        by contradiction /* cyclic */
                      qed
                    next
                      case unlock_s_11111211112111
                      by solve( State_11111211112111( ~lock9, ~n.2, sk, status, x, y
                                ) ▶₀ #t2.1 )
                    next
                      case unlock_s_111112111122
                      by solve( State_111112111122( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.1 )
                    qed
                  next
                    case case_2
                    solve( Unlock_9( $9, ~lock9, ~n.2 ) @ #t2.3 )
                      case unlock_s_1111121111111
                      solve( State_1111121111111( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.2 )
                        case out_x_111112111111
                        by contradiction /* cyclic */
                      qed
                    next
                      case unlock_s_11111211112111
                      by solve( State_11111211112111( ~lock9, ~n.2, sk, status, x, y
                                ) ▶₀ #t2.2 )
                    next
                      case unlock_s_111112111122
                      by solve( State_111112111122( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.2 )
                    qed
                  qed
                next
                  case case_2
                  solve( (#vr.5 < #t2.2)  ∥ (#vr.5 = #t2.2) )
                    case case_1
                    solve( Unlock_10( $10, ~lock10, ~n.2 ) @ #t2.3 )
                      case unlock_s_111111211111111
                      solve( State_111111211111111( ~lock10, req, ~n.2, sk, status ) ▶₀ #t2.1 )
                        case insert_s_req_11111121111111
                        solve( (#vr.5 < #t2.4)  ∥ (#vr.5 = #t2.4) )
                          case case_1
                          solve( (#t2.3 < #t2.4)  ∥ (#t2.3 = #t2.4) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            solve( !KU( aenc(<~n.1, y>, pk(~n.4)) ) @ #vk.3 )
                              case c_aenc
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case unlock_s_1111112111112111
                      by solve( State_1111112111112111( ~lock10, req, ~n.2, sk, status
                                ) ▶₀ #t2.1 )
                    qed
                  next
                    case case_2
                    solve( Unlock_10( $10, ~lock10, ~n.2 ) @ #t2.3 )
                      case unlock_s_111111211111111
                      solve( State_111111211111111( ~lock10, req, ~n.2, sk, status ) ▶₀ #t2.2 )
                        case insert_s_req_11111121111111
                        solve( (#t2.1 < #t2.4)  ∥ (#t2.1 = #t2.4) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( !KU( aenc(<~n.1, y>, pk(~n.4)) ) @ #vk.3 )
                            case c_aenc
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case unlock_s_1111112111112111
                      by solve( State_1111112111112111( ~lock10, req, ~n.2, sk, status
                                ) ▶₀ #t2.2 )
                    qed
                  qed
                qed
              qed
            next
              case insert_s_req_111111211111211
              by solve( State_111111211111211( ~lock10, 'left', ~n.2, sk, status
                        ) ▶₀ #t2 )
            qed
          qed
        next
          case case_2
          solve( !KU( aenc(<~n, y>, pk(~n.6)) ) @ #vk.2 )
            case c_aenc
            by contradiction /* cyclic */
          next
            case out_aenc_lm_rm_pksk_111121111
            solve( Insert( ~n.2, 'left' ) @ #t2.1 )
              case insert_s_req_11111121111111
              solve( State_11111121111111( ~lock10, 'left', ~n.2, sk, status
                     ) ▶₀ #t2.1 )
                case event_InitDevices_1111112111111
                solve( ((#vr.16 < #vr.39) ∧
                        (∃ #t2.
                          (Unlock_9( $9, ~lock9, ~n.2 ) @ #t2)
                         ∧
                          (#vr.16 < #t2) ∧
                          (#t2 < #vr.39) ∧
                          (∀ #t0 pp. (Unlock( pp, ~lock9, ~n.2 ) @ #t0) ⇒ #t0 = #t2) ∧
                          (∀ pp lpp #t0.
                            (Lock( pp, lpp, ~n.2 ) @ #t0)
                           ⇒
                            ((#t0 < #vr.16) ∨ (#t0 = #vr.16) ∨ (#t2 < #t0))) ∧
                          (∀ pp lpp #t0.
                            (Unlock( pp, lpp, ~n.2 ) @ #t0)
                           ⇒
                            ((#t0 < #vr.16) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                       (#vr.39 < #vr.16) )
                  case case_1
                  solve( (#vr.5 < #t2.2)  ∥ (#vr.5 = #t2.2) )
                    case case_1
                    solve( Unlock_9( $9, ~lock9, ~n.2 ) @ #t2.3 )
                      case unlock_s_1111121111111
                      solve( State_1111121111111( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.2 )
                        case out_x_111112111111
                        by contradiction /* cyclic */
                      qed
                    next
                      case unlock_s_11111211112111
                      by solve( State_11111211112111( ~lock9, ~n.2, sk, status, x, y
                                ) ▶₀ #t2.2 )
                    next
                      case unlock_s_111112111122
                      by solve( State_111112111122( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.2 )
                    qed
                  next
                    case case_2
                    solve( Unlock_9( $9, ~lock9, ~n.2 ) @ #t2.3 )
                      case unlock_s_1111121111111
                      solve( State_1111121111111( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.3 )
                        case out_x_111112111111
                        by contradiction /* cyclic */
                      qed
                    next
                      case unlock_s_11111211112111
                      by solve( State_11111211112111( ~lock9, ~n.2, sk, status, x, y
                                ) ▶₀ #t2.3 )
                    next
                      case unlock_s_111112111122
                      by solve( State_111112111122( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.3 )
                    qed
                  qed
                next
                  case case_2
                  solve( (#vr.5 < #t2.2)  ∥ (#vr.5 = #t2.2) )
                    case case_1
                    solve( Unlock_10( $10, ~lock10, ~n.2 ) @ #t2.3 )
                      case unlock_s_111111211111111
                      solve( State_111111211111111( ~lock10, req, ~n.2, sk, status ) ▶₀ #t2.2 )
                        case insert_s_req_11111121111111
                        solve( (#vr.5 < #t2.4)  ∥ (#vr.5 = #t2.4) )
                          case case_1
                          solve( (#t2.3 < #t2.4)  ∥ (#t2.3 = #t2.4) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            solve( !KU( aenc(<~n.1, y>, pk(~n.5)) ) @ #vk.3 )
                              case c_aenc
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case unlock_s_1111112111112111
                      by solve( State_1111112111112111( ~lock10, req, ~n.2, sk, status
                                ) ▶₀ #t2.2 )
                    qed
                  next
                    case case_2
                    solve( Unlock_10( $10, ~lock10, ~n.2 ) @ #t2.3 )
                      case unlock_s_111111211111111
                      solve( State_111111211111111( ~lock10, req, ~n.2, sk, status ) ▶₀ #t2.3 )
                        case insert_s_req_11111121111111
                        solve( (#t2.2 < #t2.4)  ∥ (#t2.2 = #t2.4) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( !KU( aenc(<~n.1, y>, pk(~n.5)) ) @ #vk.3 )
                            case c_aenc
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case unlock_s_1111112111112111
                      by solve( State_1111112111112111( ~lock10, req, ~n.2, sk, status
                                ) ▶₀ #t2.3 )
                    qed
                  qed
                qed
              qed
            next
              case insert_s_req_111111211111211
              by solve( State_111111211111211( ~lock10, 'left', ~n.2, sk, status
                        ) ▶₀ #t2.1 )
            qed
          qed
        qed
      next
        case out_y_1111121111211
        solve( (#vr.36 < #t2.1)  ∥ (#vr.36 = #t2.1) )
          case case_1
          solve( !KU( aenc(<~n, y>, pk(~n.4)) ) @ #vk.2 )
            case c_aenc
            by contradiction /* cyclic */
          next
            case out_aenc_lm_rm_pksk_111121111
            solve( Insert( ~n.2, 'left' ) @ #t2 )
              case insert_s_req_11111121111111
              solve( State_11111121111111( ~lock10, 'left', ~n.2, sk, status ) ▶₀ #t2 )
                case event_InitDevices_1111112111111
                solve( ((#vr.16 < #vr.41) ∧
                        (∃ #t2.
                          (Unlock_9( $9, ~lock9, ~n.2 ) @ #t2)
                         ∧
                          (#vr.16 < #t2) ∧
                          (#t2 < #vr.41) ∧
                          (∀ #t0 pp. (Unlock( pp, ~lock9, ~n.2 ) @ #t0) ⇒ #t0 = #t2) ∧
                          (∀ pp lpp #t0.
                            (Lock( pp, lpp, ~n.2 ) @ #t0)
                           ⇒
                            ((#t0 < #vr.16) ∨ (#t0 = #vr.16) ∨ (#t2 < #t0))) ∧
                          (∀ pp lpp #t0.
                            (Unlock( pp, lpp, ~n.2 ) @ #t0)
                           ⇒
                            ((#t0 < #vr.16) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                       (#vr.41 < #vr.16) )
                  case case_1
                  solve( (#vr.5 < #t2.2)  ∥ (#vr.5 = #t2.2) )
                    case case_1
                    solve( Unlock_9( $9, ~lock9, ~n.2 ) @ #t2.3 )
                      case unlock_s_1111121111111
                      solve( State_1111121111111( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.1 )
                        case out_x_111112111111
                        by contradiction /* cyclic */
                      qed
                    next
                      case unlock_s_11111211112111
                      by solve( State_11111211112111( ~lock9, ~n.2, sk, status, x, y
                                ) ▶₀ #t2.1 )
                    next
                      case unlock_s_111112111122
                      by solve( State_111112111122( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.1 )
                    qed
                  next
                    case case_2
                    solve( Unlock_9( $9, ~lock9, ~n.2 ) @ #t2.3 )
                      case unlock_s_1111121111111
                      solve( State_1111121111111( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.2 )
                        case out_x_111112111111
                        by contradiction /* cyclic */
                      qed
                    next
                      case unlock_s_11111211112111
                      by solve( State_11111211112111( ~lock9, ~n.2, sk, status, x, y
                                ) ▶₀ #t2.2 )
                    next
                      case unlock_s_111112111122
                      by solve( State_111112111122( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.2 )
                    qed
                  qed
                next
                  case case_2
                  solve( (#vr.5 < #t2.2)  ∥ (#vr.5 = #t2.2) )
                    case case_1
                    solve( Unlock_10( $10, ~lock10, ~n.2 ) @ #t2.3 )
                      case unlock_s_111111211111111
                      solve( State_111111211111111( ~lock10, req, ~n.2, sk, status ) ▶₀ #t2.1 )
                        case insert_s_req_11111121111111
                        solve( (#vr.5 < #t2.4)  ∥ (#vr.5 = #t2.4) )
                          case case_1
                          solve( (#t2.3 < #t2.4)  ∥ (#t2.3 = #t2.4) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            solve( !KU( aenc(<x, ~n.1>, pk(~n.4)) ) @ #vk.3 )
                              case c_aenc
                              by contradiction /* cyclic */
                            next
                              case out_aenc_lm_rm_pksk_111121111
                              solve( ((#vr.16 < #vr.26) ∧
                                      (∃ #t2.
                                        (Unlock_9( $9, ~lock9, ~n.2 ) @ #t2)
                                       ∧
                                        (#vr.16 < #t2) ∧
                                        (#t2 < #vr.26) ∧
                                        (∀ #t0 pp. (Unlock( pp, ~lock9, ~n.2 ) @ #t0) ⇒ #t0 = #t2) ∧
                                        (∀ pp lpp #t0.
                                          (Lock( pp, lpp, ~n.2 ) @ #t0)
                                         ⇒
                                          ((#t0 < #vr.16) ∨ (#t0 = #vr.16) ∨ (#t2 < #t0))) ∧
                                        (∀ pp lpp #t0.
                                          (Unlock( pp, lpp, ~n.2 ) @ #t0)
                                         ⇒
                                          ((#t0 < #vr.16) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                     (#vr.26 < #vr.16)  ∥ (#vr.16 = #vr.26) )
                                case case_1
                                solve( (#t2.2 < #t2)  ∥ (#t2.2 = #t2)  ∥ (#vr.14 < #t2.2) )
                                  case case_1
                                  by contradiction /* from formulas */
                                next
                                  case case_2
                                  solve( Unlock_9( $9, ~lock9, ~n.2 ) @ #t2.3 )
                                    case unlock_s_1111121111111
                                    solve( State_1111121111111( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.2 )
                                      case out_x_111112111111
                                      solve( (#t2.4 < #t2.3)  ∥ (#t2.4 = #t2.3)  ∥ (#vr.32 < #t2.4) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        by contradiction /* from formulas */
                                      next
                                        case case_3
                                        solve( (#t2 < #t2.4)  ∥ (#t2 = #t2.4) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          by solve( Insert( ~n.2, 'right' ) @ #t2 )
                                        qed
                                      qed
                                    qed
                                  next
                                    case unlock_s_11111211112111
                                    by solve( State_11111211112111( ~lock9, ~n.2, sk, status, x, y
                                              ) ▶₀ #t2.2 )
                                  next
                                    case unlock_s_111112111122
                                    by solve( State_111112111122( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.2 )
                                  qed
                                next
                                  case case_3
                                  solve( Unlock_9( $9, ~lock9, ~n.2 ) @ #t2.4 )
                                    case unlock_s_1111121111111
                                    solve( State_1111121111111( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.2 )
                                      case out_x_111112111111
                                      solve( (#t2.5 < #t2.4)  ∥ (#t2.5 = #t2.4)  ∥ (#vr.32 < #t2.5) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        by contradiction /* from formulas */
                                      next
                                        case case_3
                                        solve( (#t2 < #t2.5)  ∥ (#t2 = #t2.5) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          solve( Insert( ~n.2, 'right' ) @ #t2.3 )
                                            case insert_s_req_11111121111111
                                            by solve( State_11111121111111( ~lock10.1, 'right', ~n.2, sk,
                                                                            status
                                                      ) ▶₀ #t2.3 )
                                          next
                                            case insert_s_req_111111211111211
                                            solve( State_111111211111211( ~lock10.1, 'right', ~n.2, sk, status
                                                   ) ▶₀ #t2.3 )
                                              case event_InitDevices_11111121111121
                                              solve( ((#vr.34 < #vr.44) ∧
                                                      (∃ #t2.
                                                        (Unlock_10( $10, ~lock10, ~n.2 ) @ #t2)
                                                       ∧
                                                        (#vr.34 < #t2) ∧
                                                        (#t2 < #vr.44) ∧
                                                        (∀ #t0 pp.
                                                          (Unlock( pp, ~lock10, ~n.2 ) @ #t0) ⇒ #t0 = #t2) ∧
                                                        (∀ pp lpp #t0.
                                                          (Lock( pp, lpp, ~n.2 ) @ #t0)
                                                         ⇒
                                                          ((#t0 < #vr.34) ∨ (#t0 = #vr.34) ∨ (#t2 < #t0))) ∧
                                                        (∀ pp lpp #t0.
                                                          (Unlock( pp, lpp, ~n.2 ) @ #t0)
                                                         ⇒
                                                          ((#t0 < #vr.34) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                                     (#vr.44 < #vr.34)  ∥ (#vr.34 = #vr.44) )
                                                case case_1
                                                solve( (#vr.44 < #vr.16)  ∥ (#t2.2 < #vr.44) )
                                                  case case_1
                                                  solve( (#t2.5 < #t2)  ∥ (#t2.5 = #t2)  ∥ (#vr.14 < #t2.5) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( Unlock_10( $10.1, ~lock10.1, ~n.2 ) @ #t2.5 )
                                                      case unlock_s_111111211111111
                                                      by solve( State_111111211111111( ~lock10.1, req, ~n.2,
                                                                                       sk, status
                                                                ) ▶₀ #t2.4 )
                                                    next
                                                      case unlock_s_1111112111112111
                                                      solve( State_1111112111112111( ~lock10.1, req, ~n.2, sk,
                                                                                     status
                                                             ) ▶₀ #t2.4 )
                                                        case insert_s_req_111111211111211
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    solve( Unlock_10( $10.1, ~lock10.1, ~n.2 ) @ #t2.6 )
                                                      case unlock_s_111111211111111
                                                      by solve( State_111111211111111( ~lock10.1, req, ~n.2,
                                                                                       sk, status
                                                                ) ▶₀ #t2.4 )
                                                    next
                                                      case unlock_s_1111112111112111
                                                      solve( State_1111112111112111( ~lock10.1, req, ~n.2, sk,
                                                                                     status
                                                             ) ▶₀ #t2.4 )
                                                        case insert_s_req_111111211111211
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case case_2
                                                  solve( ((#vr.26 < #vr.44) ∧
                                                          (∃ #t2.
                                                            (Unlock_9( $9.1, ~lock9.1, ~n.2 ) @ #t2)
                                                           ∧
                                                            (#vr.26 < #t2) ∧
                                                            (#t2 < #vr.44) ∧
                                                            (∀ #t0 pp.
                                                              (Unlock( pp, ~lock9.1, ~n.2 ) @ #t0)
                                                             ⇒
                                                              #t0 = #t2) ∧
                                                            (∀ pp lpp #t0.
                                                              (Lock( pp, lpp, ~n.2 ) @ #t0)
                                                             ⇒
                                                              ((#t0 < #vr.26) ∨
                                                               (#t0 = #vr.26) ∨
                                                               (#t2 < #t0))) ∧
                                                            (∀ pp lpp #t0.
                                                              (Unlock( pp, lpp, ~n.2 ) @ #t0)
                                                             ⇒
                                                              ((#t0 < #vr.26) ∨
                                                               (#t2 < #t0) ∨
                                                               (#t2 = #t0)))))  ∥
                                                         (#vr.44 < #vr.26) )
                                                    case case_1
                                                    solve( (#t2.5 < #t2)  ∥ (#t2.5 = #t2)  ∥
                                                           (#vr.14 < #t2.5) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      solve( Unlock_9( $9.1, ~lock9.1, ~n.2 ) @ #t2.5 )
                                                        case unlock_s_1111121111111
                                                        by solve( State_1111121111111( ~lock9.1, ~n.2, sk,
                                                                                       status, x, y
                                                                  ) ▶₀ #t2.4 )
                                                      next
                                                        case unlock_s_11111211112111
                                                        solve( State_11111211112111( ~lock9.1, ~n.2, sk,
                                                                                     status, x, y
                                                               ) ▶₀ #t2.4 )
                                                          case out_y_1111121111211
                                                          by contradiction /* cyclic */
                                                        qed
                                                      next
                                                        case unlock_s_111112111122
                                                        by solve( State_111112111122( ~lock9.1, ~n.2, sk,
                                                                                      status, x, y
                                                                  ) ▶₀ #t2.4 )
                                                      qed
                                                    next
                                                      case case_3
                                                      solve( Unlock_9( $9.1, ~lock9.1, ~n.2 ) @ #t2.6 )
                                                        case unlock_s_1111121111111
                                                        by solve( State_1111121111111( ~lock9.1, ~n.2, sk,
                                                                                       status, x, y
                                                                  ) ▶₀ #t2.4 )
                                                      next
                                                        case unlock_s_11111211112111
                                                        solve( State_11111211112111( ~lock9.1, ~n.2, sk,
                                                                                     status, x, y
                                                               ) ▶₀ #t2.4 )
                                                          case out_y_1111121111211
                                                          by contradiction /* cyclic */
                                                        qed
                                                      next
                                                        case unlock_s_111112111122
                                                        by solve( State_111112111122( ~lock9.1, ~n.2, sk,
                                                                                      status, x, y
                                                                  ) ▶₀ #t2.4 )
                                                      qed
                                                    qed
                                                  next
                                                    case case_2
                                                    solve( (#t2.5 < #t2)  ∥ (#t2.5 = #t2)  ∥
                                                           (#vr.14 < #t2.5) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      solve( Unlock_10( $10.1, ~lock10.1, ~n.2 ) @ #t2.5 )
                                                        case unlock_s_111111211111111
                                                        by solve( State_111111211111111( ~lock10.1, req, ~n.2,
                                                                                         sk, status
                                                                  ) ▶₀ #t2.4 )
                                                      next
                                                        case unlock_s_1111112111112111
                                                        solve( State_1111112111112111( ~lock10.1, req, ~n.2,
                                                                                       sk, status
                                                               ) ▶₀ #t2.4 )
                                                          case insert_s_req_111111211111211
                                                          solve( (#t2.6 < #t2)  ∥ (#t2.6 = #t2)  ∥
                                                                 (#vr.14 < #t2.6) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case case_2
                                                            solve( Insert( ~n.2, 'init' ) @ #t2.5 )
                                                              case insert_s_init__111
                                                              solve( State_111( ~n.2, sk ) ▶₀ #t2.5 )
                                                                case new_s_11
                                                                by contradiction /* cyclic */
                                                              qed
                                                            next
                                                              case insert_s_req_11111121111111
                                                              by solve( State_11111121111111( ~lock10.2,
                                                                                              'init', ~n.2,
                                                                                              sk, status
                                                                        ) ▶₀ #t2.5 )
                                                            next
                                                              case insert_s_req_111111211111211
                                                              by solve( State_111111211111211( ~lock10.2,
                                                                                               'init', ~n.2,
                                                                                               sk, status
                                                                        ) ▶₀ #t2.5 )
                                                            qed
                                                          next
                                                            case case_3
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      solve( Unlock_10( $10.1, ~lock10.1, ~n.2 ) @ #t2.6 )
                                                        case unlock_s_111111211111111
                                                        by solve( State_111111211111111( ~lock10.1, req, ~n.2,
                                                                                         sk, status
                                                                  ) ▶₀ #t2.4 )
                                                      next
                                                        case unlock_s_1111112111112111
                                                        solve( State_1111112111112111( ~lock10.1, req, ~n.2,
                                                                                       sk, status
                                                               ) ▶₀ #t2.4 )
                                                          case insert_s_req_111111211111211
                                                          solve( (#t2.7 < #t2)  ∥ (#t2.7 = #t2)  ∥
                                                                 (#vr.14 < #t2.7) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case case_2
                                                            by contradiction /* from formulas */
                                                          next
                                                            case case_3
                                                            solve( (#t2.6 < #t2.7)  ∥ (#t2.6 = #t2.7) )
                                                              case case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case case_2
                                                              solve( Insert( ~n.2, 'init' ) @ #t2.5 )
                                                                case insert_s_init__111
                                                                solve( State_111( ~n.2, sk ) ▶₀ #t2.5 )
                                                                  case new_s_11
                                                                  by contradiction /* cyclic */
                                                                qed
                                                              next
                                                                case insert_s_req_11111121111111
                                                                by solve( State_11111121111111( ~lock10.2,
                                                                                                'init', ~n.2,
                                                                                                sk, status
                                                                          ) ▶₀ #t2.5 )
                                                              next
                                                                case insert_s_req_111111211111211
                                                                by solve( State_111111211111211( ~lock10.2,
                                                                                                 'init', ~n.2,
                                                                                                 sk, status
                                                                          ) ▶₀ #t2.5 )
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                solve( (#t2.5 < #t2)  ∥ (#t2.5 = #t2)  ∥ (#vr.14 < #t2.5) )
                                                  case case_1
                                                  solve( (#t2.5 < #t2.4)  ∥ (#t2.5 = #t2.4)  ∥
                                                         (#vr.32 < #t2.5) )
                                                    case case_1
                                                    solve( (#vr.5 < #t2.5)  ∥ (#vr.5 = #t2.5) )
                                                      case case_1
                                                      solve( Unlock_10( $10.1, ~lock10.1, ~n.2 ) @ #t2.6 )
                                                        case unlock_s_111111211111111
                                                        by solve( State_111111211111111( ~lock10.1, req, ~n.2,
                                                                                         sk, status
                                                                  ) ▶₀ #t2.4 )
                                                      next
                                                        case unlock_s_1111112111112111
                                                        solve( State_1111112111112111( ~lock10.1, req, ~n.2,
                                                                                       sk, status
                                                               ) ▶₀ #t2.4 )
                                                          case insert_s_req_111111211111211
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    next
                                                      case case_2
                                                      solve( Unlock_10( $10.1, ~lock10.1, ~n.2 ) @ #t2.6 )
                                                        case unlock_s_111111211111111
                                                        by solve( State_111111211111111( ~lock10.1, req, ~n.2,
                                                                                         sk, status
                                                                  ) ▶₀ #t2.5 )
                                                      next
                                                        case unlock_s_1111112111112111
                                                        solve( State_1111112111112111( ~lock10.1, req, ~n.2,
                                                                                       sk, status
                                                               ) ▶₀ #t2.5 )
                                                          case insert_s_req_111111211111211
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case case_2
                                                    solve( Unlock_10( $10.1, ~lock10.1, ~n.2 ) @ #t2.5 )
                                                      case unlock_s_111111211111111
                                                      by solve( State_111111211111111( ~lock10.1, req, ~n.2,
                                                                                       sk, status
                                                                ) ▶₀ #t2.4 )
                                                    next
                                                      case unlock_s_1111112111112111
                                                      solve( State_1111112111112111( ~lock10.1, req, ~n.2, sk,
                                                                                     status
                                                             ) ▶₀ #t2.4 )
                                                        case insert_s_req_111111211111211
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    solve( Unlock_10( $10.1, ~lock10.1, ~n.2 ) @ #t2.6 )
                                                      case unlock_s_111111211111111
                                                      by solve( State_111111211111111( ~lock10.1, req, ~n.2,
                                                                                       sk, status
                                                                ) ▶₀ #t2.4 )
                                                    next
                                                      case unlock_s_1111112111112111
                                                      solve( State_1111112111112111( ~lock10.1, req, ~n.2, sk,
                                                                                     status
                                                             ) ▶₀ #t2.4 )
                                                        case insert_s_req_111111211111211
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case case_2
                                                  solve( Unlock_10( $10.1, ~lock10.1, ~n.2 ) @ #t2.5 )
                                                    case unlock_s_111111211111111
                                                    by solve( State_111111211111111( ~lock10.1, req, ~n.2, sk,
                                                                                     status
                                                              ) ▶₀ #t2.4 )
                                                  next
                                                    case unlock_s_1111112111112111
                                                    solve( State_1111112111112111( ~lock10.1, req, ~n.2, sk,
                                                                                   status
                                                           ) ▶₀ #t2.4 )
                                                      case insert_s_req_111111211111211
                                                      by contradiction /* cyclic */
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  solve( Unlock_10( $10.1, ~lock10.1, ~n.2 ) @ #t2.6 )
                                                    case unlock_s_111111211111111
                                                    by solve( State_111111211111111( ~lock10.1, req, ~n.2, sk,
                                                                                     status
                                                              ) ▶₀ #t2.4 )
                                                  next
                                                    case unlock_s_1111112111112111
                                                    solve( State_1111112111112111( ~lock10.1, req, ~n.2, sk,
                                                                                   status
                                                           ) ▶₀ #t2.4 )
                                                      case insert_s_req_111111211111211
                                                      by contradiction /* cyclic */
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case unlock_s_11111211112111
                                    by solve( State_11111211112111( ~lock9, ~n.2, sk, status, x, y
                                              ) ▶₀ #t2.2 )
                                  next
                                    case unlock_s_111112111122
                                    by solve( State_111112111122( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.2 )
                                  qed
                                qed
                              next
                                case case_2
                                solve( (#t2.2 < #t2)  ∥ (#t2.2 = #t2)  ∥ (#vr.14 < #t2.2) )
                                  case case_1
                                  solve( (#t2.3 < #t2.2)  ∥ (#t2.3 = #t2.2)  ∥ (#vr.24 < #t2.3) )
                                    case case_1
                                    solve( Unlock_9( $9.1, ~lock9.1, ~n.2 ) @ #t2.4 )
                                      case unlock_s_1111121111111
                                      by solve( State_1111121111111( ~lock9, ~n.2, sk, status, x, y
                                                ) ▶₀ #t2.2 )
                                    next
                                      case unlock_s_11111211112111
                                      solve( State_11111211112111( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.2 )
                                        case out_y_1111121111211
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case unlock_s_111112111122
                                      by solve( State_111112111122( ~lock9, ~n.2, sk, status, x, y
                                                ) ▶₀ #t2.2 )
                                    qed
                                  next
                                    case case_2
                                    solve( Unlock_9( $9.1, ~lock9.1, ~n.2 ) @ #t2.3 )
                                      case unlock_s_1111121111111
                                      by solve( State_1111121111111( ~lock9, ~n.2, sk, status, x, y
                                                ) ▶₀ #t2.2 )
                                    next
                                      case unlock_s_11111211112111
                                      solve( State_11111211112111( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.2 )
                                        case out_y_1111121111211
                                        solve( (#vr.5 < #t2.4)  ∥ (#vr.5 = #t2.4) )
                                          case case_1
                                          solve( (#t2.4 < #t2.3)  ∥ (#t2.4 = #t2.3) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          next
                                            case case_2
                                            solve( Insert( ~n.2, 'right' ) @ #t2.3 )
                                              case insert_s_req_11111121111111
                                              by solve( State_11111121111111( ~lock10.1, 'right', ~n.2, sk,
                                                                              status
                                                        ) ▶₀ #t2.3 )
                                            next
                                              case insert_s_req_111111211111211
                                              solve( State_111111211111211( ~lock10.1, 'right', ~n.2, sk,
                                                                            status
                                                     ) ▶₀ #t2.3 )
                                                case event_InitDevices_11111121111121
                                                solve( (#vr.5 < #t2.7)  ∥ (#vr.5 = #t2.7) )
                                                  case case_1
                                                  solve( Unlock_10( $10.1, ~lock10.1, ~n.2 ) @ #t2.4 )
                                                    case unlock_s_111111211111111
                                                    by solve( State_111111211111111( ~lock10.1, req, ~n.2, sk,
                                                                                     status
                                                              ) ▶₀ #t2.4 )
                                                  next
                                                    case unlock_s_1111112111112111
                                                    solve( State_1111112111112111( ~lock10.1, req, ~n.2, sk,
                                                                                   status
                                                           ) ▶₀ #t2.4 )
                                                      case insert_s_req_111111211111211
                                                      solve( (#vr.5 < #t2.6)  ∥ (#vr.5 = #t2.6) )
                                                        case case_1
                                                        solve( (#t2.5 < #t2.6)  ∥ (#t2.5 = #t2.6) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_2
                                                          by solve( Insert( ~n.2, 'init' ) @ #t2.3 )
                                                        qed
                                                      next
                                                        case case_2
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case case_2
                                                  solve( Unlock_10( $10.1, ~lock10.1, ~n.2 ) @ #t2.4 )
                                                    case unlock_s_111111211111111
                                                    by solve( State_111111211111111( ~lock10.1, req, ~n.2, sk,
                                                                                     status
                                                              ) ▶₀ #t2.4 )
                                                  next
                                                    case unlock_s_1111112111112111
                                                    solve( State_1111112111112111( ~lock10.1, req, ~n.2, sk,
                                                                                   status
                                                           ) ▶₀ #t2.4 )
                                                      case insert_s_req_111111211111211
                                                      solve( (#vr.5 < #t2.5)  ∥ (#vr.5 = #t2.5) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        by solve( Insert( ~n.2, 'init' ) @ #t2.3 )
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case case_2
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    next
                                      case unlock_s_111112111122
                                      by solve( State_111112111122( ~lock9, ~n.2, sk, status, x, y
                                                ) ▶₀ #t2.2 )
                                    qed
                                  next
                                    case case_3
                                    solve( Unlock_9( $9.1, ~lock9.1, ~n.2 ) @ #t2.4 )
                                      case unlock_s_1111121111111
                                      by solve( State_1111121111111( ~lock9, ~n.2, sk, status, x, y
                                                ) ▶₀ #t2.2 )
                                    next
                                      case unlock_s_11111211112111
                                      solve( State_11111211112111( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.2 )
                                        case out_y_1111121111211
                                        solve( (#vr.5 < #t2.5)  ∥ (#vr.5 = #t2.5) )
                                          case case_1
                                          solve( (#t2.3 < #t2.5)  ∥ (#t2.3 = #t2.5) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          next
                                            case case_2
                                            solve( Insert( ~n.2, 'right' ) @ #t2.3 )
                                              case insert_s_req_11111121111111
                                              by solve( State_11111121111111( ~lock10.1, 'right', ~n.2, sk,
                                                                              status
                                                        ) ▶₀ #t2.3 )
                                            next
                                              case insert_s_req_111111211111211
                                              solve( State_111111211111211( ~lock10.1, 'right', ~n.2, sk,
                                                                            status
                                                     ) ▶₀ #t2.3 )
                                                case event_InitDevices_11111121111121
                                                solve( (#vr.5 < #t2.8)  ∥ (#vr.5 = #t2.8) )
                                                  case case_1
                                                  solve( Unlock_10( $10.1, ~lock10.1, ~n.2 ) @ #t2.5 )
                                                    case unlock_s_111111211111111
                                                    by solve( State_111111211111111( ~lock10.1, req, ~n.2, sk,
                                                                                     status
                                                              ) ▶₀ #t2.4 )
                                                  next
                                                    case unlock_s_1111112111112111
                                                    solve( State_1111112111112111( ~lock10.1, req, ~n.2, sk,
                                                                                   status
                                                           ) ▶₀ #t2.4 )
                                                      case insert_s_req_111111211111211
                                                      solve( (#vr.5 < #t2.7)  ∥ (#vr.5 = #t2.7) )
                                                        case case_1
                                                        solve( (#t2.6 < #t2.7)  ∥ (#t2.6 = #t2.7) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_2
                                                          solve( Insert( ~n.2, 'init' ) @ #t2.5 )
                                                            case insert_s_init__111
                                                            solve( State_111( ~n.2, sk ) ▶₀ #t2.5 )
                                                              case new_s_11
                                                              by contradiction /* cyclic */
                                                            qed
                                                          next
                                                            case insert_s_req_11111121111111
                                                            by solve( State_11111121111111( ~lock10.2, 'init',
                                                                                            ~n.2, sk, status
                                                                      ) ▶₀ #t2.5 )
                                                          next
                                                            case insert_s_req_111111211111211
                                                            by solve( State_111111211111211( ~lock10.2,
                                                                                             'init', ~n.2, sk,
                                                                                             status
                                                                      ) ▶₀ #t2.5 )
                                                          qed
                                                        qed
                                                      next
                                                        case case_2
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case case_2
                                                  solve( Unlock_10( $10.1, ~lock10.1, ~n.2 ) @ #t2.5 )
                                                    case unlock_s_111111211111111
                                                    by solve( State_111111211111111( ~lock10.1, req, ~n.2, sk,
                                                                                     status
                                                              ) ▶₀ #t2.4 )
                                                  next
                                                    case unlock_s_1111112111112111
                                                    solve( State_1111112111112111( ~lock10.1, req, ~n.2, sk,
                                                                                   status
                                                           ) ▶₀ #t2.4 )
                                                      case insert_s_req_111111211111211
                                                      solve( (#vr.5 < #t2.6)  ∥ (#vr.5 = #t2.6) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        solve( Insert( ~n.2, 'init' ) @ #t2.5 )
                                                          case insert_s_init__111
                                                          solve( State_111( ~n.2, sk ) ▶₀ #t2.5 )
                                                            case new_s_11
                                                            by contradiction /* cyclic */
                                                          qed
                                                        next
                                                          case insert_s_req_11111121111111
                                                          by solve( State_11111121111111( ~lock10.2, 'init',
                                                                                          ~n.2, sk, status
                                                                    ) ▶₀ #t2.5 )
                                                        next
                                                          case insert_s_req_111111211111211
                                                          by solve( State_111111211111211( ~lock10.2, 'init',
                                                                                           ~n.2, sk, status
                                                                    ) ▶₀ #t2.5 )
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case case_2
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    next
                                      case unlock_s_111112111122
                                      by solve( State_111112111122( ~lock9, ~n.2, sk, status, x, y
                                                ) ▶₀ #t2.2 )
                                    qed
                                  qed
                                next
                                  case case_2
                                  solve( (#vr.26 < #vr.34)  ∥ (#t2.1 < #vr.26) )
                                    case case_1
                                    solve( Unlock_9( $9.1, ~lock9.1, ~n.2 ) @ #t2.3 )
                                      case unlock_s_1111121111111
                                      by solve( State_1111121111111( ~lock9, ~n.2, sk, status, x, y
                                                ) ▶₀ #t2.2 )
                                    next
                                      case unlock_s_11111211112111
                                      solve( State_11111211112111( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.2 )
                                        case out_y_1111121111211
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case unlock_s_111112111122
                                      by solve( State_111112111122( ~lock9, ~n.2, sk, status, x, y
                                                ) ▶₀ #t2.2 )
                                    qed
                                  next
                                    case case_2
                                    solve( Unlock_9( $9.1, ~lock9.1, ~n.2 ) @ #t2.3 )
                                      case unlock_s_1111121111111
                                      by solve( State_1111121111111( ~lock9, ~n.2, sk, status, x, y
                                                ) ▶₀ #t2.2 )
                                    next
                                      case unlock_s_11111211112111
                                      solve( State_11111211112111( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.2 )
                                        case out_y_1111121111211
                                        solve( (#t2.4 < #t2.3)  ∥ (#t2.4 = #t2.3)  ∥ (#vr.32 < #t2.4) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          by contradiction /* from formulas */
                                        next
                                          case case_3
                                          solve( (#t2 < #t2.4)  ∥ (#t2 = #t2.4) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          next
                                            case case_2
                                            by solve( Insert( ~n.2, 'right' ) @ #t2 )
                                          qed
                                        qed
                                      qed
                                    next
                                      case unlock_s_111112111122
                                      by solve( State_111112111122( ~lock9, ~n.2, sk, status, x, y
                                                ) ▶₀ #t2.2 )
                                    qed
                                  qed
                                next
                                  case case_3
                                  solve( (#vr.26 < #vr.34)  ∥ (#t2.1 < #vr.26) )
                                    case case_1
                                    solve( Unlock_9( $9.1, ~lock9.1, ~n.2 ) @ #t2.4 )
                                      case unlock_s_1111121111111
                                      by solve( State_1111121111111( ~lock9, ~n.2, sk, status, x, y
                                                ) ▶₀ #t2.2 )
                                    next
                                      case unlock_s_11111211112111
                                      solve( State_11111211112111( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.2 )
                                        case out_y_1111121111211
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case unlock_s_111112111122
                                      by solve( State_111112111122( ~lock9, ~n.2, sk, status, x, y
                                                ) ▶₀ #t2.2 )
                                    qed
                                  next
                                    case case_2
                                    solve( Unlock_9( $9.1, ~lock9.1, ~n.2 ) @ #t2.4 )
                                      case unlock_s_1111121111111
                                      by solve( State_1111121111111( ~lock9, ~n.2, sk, status, x, y
                                                ) ▶₀ #t2.2 )
                                    next
                                      case unlock_s_11111211112111
                                      solve( State_11111211112111( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.2 )
                                        case out_y_1111121111211
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case unlock_s_111112111122
                                      by solve( State_111112111122( ~lock9, ~n.2, sk, status, x, y
                                                ) ▶₀ #t2.2 )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case unlock_s_1111112111112111
                      by solve( State_1111112111112111( ~lock10, req, ~n.2, sk, status
                                ) ▶₀ #t2.1 )
                    qed
                  next
                    case case_2
                    solve( Unlock_10( $10, ~lock10, ~n.2 ) @ #t2.3 )
                      case unlock_s_111111211111111
                      solve( State_111111211111111( ~lock10, req, ~n.2, sk, status ) ▶₀ #t2.2 )
                        case insert_s_req_11111121111111
                        solve( (#t2.1 < #t2.4)  ∥ (#t2.1 = #t2.4) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( !KU( aenc(<x, ~n.1>, pk(~n.4)) ) @ #vk.3 )
                            case c_aenc
                            by contradiction /* cyclic */
                          next
                            case out_aenc_lm_rm_pksk_111121111
                            solve( ((#vr.15 < #vr.25) ∧
                                    (∃ #t2.
                                      (Unlock_9( $9, ~lock9, ~n.2 ) @ #t2)
                                     ∧
                                      (#vr.15 < #t2) ∧
                                      (#t2 < #vr.25) ∧
                                      (∀ #t0 pp. (Unlock( pp, ~lock9, ~n.2 ) @ #t0) ⇒ #t0 = #t2) ∧
                                      (∀ pp lpp #t0.
                                        (Lock( pp, lpp, ~n.2 ) @ #t0)
                                       ⇒
                                        ((#t0 < #vr.15) ∨ (#t0 = #vr.15) ∨ (#t2 < #t0))) ∧
                                      (∀ pp lpp #t0.
                                        (Unlock( pp, lpp, ~n.2 ) @ #t0)
                                       ⇒
                                        ((#t0 < #vr.15) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                   (#vr.25 < #vr.15)  ∥ (#vr.15 = #vr.25) )
                              case case_1
                              solve( (#t2.3 < #t2)  ∥ (#t2.3 = #t2)  ∥ (#vr.13 < #t2.3) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                solve( Unlock_9( $9, ~lock9, ~n.2 ) @ #t2.3 )
                                  case unlock_s_1111121111111
                                  solve( State_1111121111111( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.3 )
                                    case out_x_111112111111
                                    solve( (#t2.4 < #t2.1)  ∥ (#t2.4 = #t2.1)  ∥ (#vr.31 < #t2.4) )
                                      case case_1
                                      by contradiction /* from formulas */
                                    next
                                      case case_2
                                      by contradiction /* from formulas */
                                    next
                                      case case_3
                                      solve( (#t2 < #t2.4)  ∥ (#t2 = #t2.4) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        by solve( Insert( ~n.2, 'right' ) @ #t2 )
                                      qed
                                    qed
                                  qed
                                next
                                  case unlock_s_11111211112111
                                  by solve( State_11111211112111( ~lock9, ~n.2, sk, status, x, y
                                            ) ▶₀ #t2.3 )
                                next
                                  case unlock_s_111112111122
                                  by solve( State_111112111122( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.3 )
                                qed
                              next
                                case case_3
                                solve( Unlock_9( $9, ~lock9, ~n.2 ) @ #t2.4 )
                                  case unlock_s_1111121111111
                                  solve( State_1111121111111( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.3 )
                                    case out_x_111112111111
                                    solve( (#t2.5 < #t2.1)  ∥ (#t2.5 = #t2.1)  ∥ (#vr.31 < #t2.5) )
                                      case case_1
                                      by contradiction /* from formulas */
                                    next
                                      case case_2
                                      by contradiction /* from formulas */
                                    next
                                      case case_3
                                      solve( (#t2 < #t2.5)  ∥ (#t2 = #t2.5) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        solve( Insert( ~n.2, 'right' ) @ #t2.4 )
                                          case insert_s_req_11111121111111
                                          by solve( State_11111121111111( ~lock10.1, 'right', ~n.2, sk, status
                                                    ) ▶₀ #t2.4 )
                                        next
                                          case insert_s_req_111111211111211
                                          solve( State_111111211111211( ~lock10.1, 'right', ~n.2, sk, status
                                                 ) ▶₀ #t2.4 )
                                            case event_InitDevices_11111121111121
                                            solve( ((#vr.33 < #vr.43) ∧
                                                    (∃ #t2.
                                                      (Unlock_10( $10, ~lock10, ~n.2 ) @ #t2)
                                                     ∧
                                                      (#vr.33 < #t2) ∧
                                                      (#t2 < #vr.43) ∧
                                                      (∀ #t0 pp.
                                                        (Unlock( pp, ~lock10, ~n.2 ) @ #t0) ⇒ #t0 = #t2) ∧
                                                      (∀ pp lpp #t0.
                                                        (Lock( pp, lpp, ~n.2 ) @ #t0)
                                                       ⇒
                                                        ((#t0 < #vr.33) ∨ (#t0 = #vr.33) ∨ (#t2 < #t0))) ∧
                                                      (∀ pp lpp #t0.
                                                        (Unlock( pp, lpp, ~n.2 ) @ #t0)
                                                       ⇒
                                                        ((#t0 < #vr.33) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                                   (#vr.43 < #vr.33)  ∥ (#vr.33 = #vr.43) )
                                              case case_1
                                              solve( (#vr.43 < #vr.15)  ∥ (#t2.3 < #vr.43) )
                                                case case_1
                                                solve( (#t2.5 < #t2)  ∥ (#t2.5 = #t2)  ∥ (#vr.13 < #t2.5) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  solve( Unlock_10( $10.1, ~lock10.1, ~n.2 ) @ #t2.5 )
                                                    case unlock_s_111111211111111
                                                    by solve( State_111111211111111( ~lock10.1, req, ~n.2, sk,
                                                                                     status
                                                              ) ▶₀ #t2.5 )
                                                  next
                                                    case unlock_s_1111112111112111
                                                    solve( State_1111112111112111( ~lock10.1, req, ~n.2, sk,
                                                                                   status
                                                           ) ▶₀ #t2.5 )
                                                      case insert_s_req_111111211111211
                                                      by contradiction /* cyclic */
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  solve( Unlock_10( $10.1, ~lock10.1, ~n.2 ) @ #t2.6 )
                                                    case unlock_s_111111211111111
                                                    by solve( State_111111211111111( ~lock10.1, req, ~n.2, sk,
                                                                                     status
                                                              ) ▶₀ #t2.5 )
                                                  next
                                                    case unlock_s_1111112111112111
                                                    solve( State_1111112111112111( ~lock10.1, req, ~n.2, sk,
                                                                                   status
                                                           ) ▶₀ #t2.5 )
                                                      case insert_s_req_111111211111211
                                                      by contradiction /* cyclic */
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                solve( ((#vr.25 < #vr.43) ∧
                                                        (∃ #t2.
                                                          (Unlock_9( $9.1, ~lock9.1, ~n.2 ) @ #t2)
                                                         ∧
                                                          (#vr.25 < #t2) ∧
                                                          (#t2 < #vr.43) ∧
                                                          (∀ #t0 pp.
                                                            (Unlock( pp, ~lock9.1, ~n.2 ) @ #t0)
                                                           ⇒
                                                            #t0 = #t2) ∧
                                                          (∀ pp lpp #t0.
                                                            (Lock( pp, lpp, ~n.2 ) @ #t0)
                                                           ⇒
                                                            ((#t0 < #vr.25) ∨ (#t0 = #vr.25) ∨ (#t2 < #t0))) ∧
                                                          (∀ pp lpp #t0.
                                                            (Unlock( pp, lpp, ~n.2 ) @ #t0)
                                                           ⇒
                                                            ((#t0 < #vr.25) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                                       (#vr.43 < #vr.25) )
                                                  case case_1
                                                  solve( (#t2.5 < #t2)  ∥ (#t2.5 = #t2)  ∥ (#vr.13 < #t2.5) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( Unlock_9( $9.1, ~lock9.1, ~n.2 ) @ #t2.5 )
                                                      case unlock_s_1111121111111
                                                      by solve( State_1111121111111( ~lock9.1, ~n.2, sk,
                                                                                     status, x, y
                                                                ) ▶₀ #t2.5 )
                                                    next
                                                      case unlock_s_11111211112111
                                                      solve( State_11111211112111( ~lock9.1, ~n.2, sk, status,
                                                                                   x, y
                                                             ) ▶₀ #t2.5 )
                                                        case out_y_1111121111211
                                                        by contradiction /* cyclic */
                                                      qed
                                                    next
                                                      case unlock_s_111112111122
                                                      by solve( State_111112111122( ~lock9.1, ~n.2, sk,
                                                                                    status, x, y
                                                                ) ▶₀ #t2.5 )
                                                    qed
                                                  next
                                                    case case_3
                                                    solve( Unlock_9( $9.1, ~lock9.1, ~n.2 ) @ #t2.6 )
                                                      case unlock_s_1111121111111
                                                      by solve( State_1111121111111( ~lock9.1, ~n.2, sk,
                                                                                     status, x, y
                                                                ) ▶₀ #t2.5 )
                                                    next
                                                      case unlock_s_11111211112111
                                                      solve( State_11111211112111( ~lock9.1, ~n.2, sk, status,
                                                                                   x, y
                                                             ) ▶₀ #t2.5 )
                                                        case out_y_1111121111211
                                                        by contradiction /* cyclic */
                                                      qed
                                                    next
                                                      case unlock_s_111112111122
                                                      by solve( State_111112111122( ~lock9.1, ~n.2, sk,
                                                                                    status, x, y
                                                                ) ▶₀ #t2.5 )
                                                    qed
                                                  qed
                                                next
                                                  case case_2
                                                  solve( (#t2.5 < #t2)  ∥ (#t2.5 = #t2)  ∥ (#vr.13 < #t2.5) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    solve( Unlock_10( $10.1, ~lock10.1, ~n.2 ) @ #t2.5 )
                                                      case unlock_s_111111211111111
                                                      by solve( State_111111211111111( ~lock10.1, req, ~n.2,
                                                                                       sk, status
                                                                ) ▶₀ #t2.5 )
                                                    next
                                                      case unlock_s_1111112111112111
                                                      solve( State_1111112111112111( ~lock10.1, req, ~n.2, sk,
                                                                                     status
                                                             ) ▶₀ #t2.5 )
                                                        case insert_s_req_111111211111211
                                                        solve( (#t2.6 < #t2)  ∥ (#t2.6 = #t2)  ∥
                                                               (#vr.13 < #t2.6) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_2
                                                          solve( Insert( ~n.2, 'init' ) @ #t2.1 )
                                                            case insert_s_init__111
                                                            by solve( Insert( ~n.2, 'init' ) @ #t2 )
                                                          qed
                                                        next
                                                          case case_3
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    solve( Unlock_10( $10.1, ~lock10.1, ~n.2 ) @ #t2.6 )
                                                      case unlock_s_111111211111111
                                                      by solve( State_111111211111111( ~lock10.1, req, ~n.2,
                                                                                       sk, status
                                                                ) ▶₀ #t2.5 )
                                                    next
                                                      case unlock_s_1111112111112111
                                                      solve( State_1111112111112111( ~lock10.1, req, ~n.2, sk,
                                                                                     status
                                                             ) ▶₀ #t2.5 )
                                                        case insert_s_req_111111211111211
                                                        solve( (#t2.7 < #t2)  ∥ (#t2.7 = #t2)  ∥
                                                               (#vr.13 < #t2.7) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_3
                                                          solve( (#t2.6 < #t2.7)  ∥ (#t2.6 = #t2.7) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case case_2
                                                            solve( Insert( ~n.2, 'init' ) @ #t2.1 )
                                                              case insert_s_init__111
                                                              solve( Insert( ~n.2, 'init' ) @ #t2.6 )
                                                                case insert_s_init__111
                                                                solve( State_111( ~n.2, sk ) ▶₀ #t2.6 )
                                                                  case new_s_11
                                                                  by contradiction /* cyclic */
                                                                qed
                                                              next
                                                                case insert_s_req_11111121111111
                                                                by solve( State_11111121111111( ~lock10.2,
                                                                                                'init', ~n.2,
                                                                                                sk, status
                                                                          ) ▶₀ #t2.6 )
                                                              next
                                                                case insert_s_req_111111211111211
                                                                by solve( State_111111211111211( ~lock10.2,
                                                                                                 'init', ~n.2,
                                                                                                 sk, status
                                                                          ) ▶₀ #t2.6 )
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( (#t2.5 < #t2)  ∥ (#t2.5 = #t2)  ∥ (#vr.13 < #t2.5) )
                                                case case_1
                                                solve( (#t2.5 < #t2.1)  ∥ (#t2.5 = #t2.1)  ∥
                                                       (#vr.31 < #t2.5) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  solve( Unlock_10( $10.1, ~lock10.1, ~n.2 ) @ #t2.5 )
                                                    case unlock_s_111111211111111
                                                    by solve( State_111111211111111( ~lock10.1, req, ~n.2, sk,
                                                                                     status
                                                              ) ▶₀ #t2.5 )
                                                  next
                                                    case unlock_s_1111112111112111
                                                    solve( State_1111112111112111( ~lock10.1, req, ~n.2, sk,
                                                                                   status
                                                           ) ▶₀ #t2.5 )
                                                      case insert_s_req_111111211111211
                                                      by contradiction /* cyclic */
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  solve( Unlock_10( $10.1, ~lock10.1, ~n.2 ) @ #t2.6 )
                                                    case unlock_s_111111211111111
                                                    by solve( State_111111211111111( ~lock10.1, req, ~n.2, sk,
                                                                                     status
                                                              ) ▶₀ #t2.5 )
                                                  next
                                                    case unlock_s_1111112111112111
                                                    solve( State_1111112111112111( ~lock10.1, req, ~n.2, sk,
                                                                                   status
                                                           ) ▶₀ #t2.5 )
                                                      case insert_s_req_111111211111211
                                                      by contradiction /* cyclic */
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                solve( Unlock_10( $10.1, ~lock10.1, ~n.2 ) @ #t2.5 )
                                                  case unlock_s_111111211111111
                                                  by solve( State_111111211111111( ~lock10.1, req, ~n.2, sk,
                                                                                   status
                                                            ) ▶₀ #t2.5 )
                                                next
                                                  case unlock_s_1111112111112111
                                                  solve( State_1111112111112111( ~lock10.1, req, ~n.2, sk,
                                                                                 status
                                                         ) ▶₀ #t2.5 )
                                                    case insert_s_req_111111211111211
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              next
                                                case case_3
                                                solve( Unlock_10( $10.1, ~lock10.1, ~n.2 ) @ #t2.6 )
                                                  case unlock_s_111111211111111
                                                  by solve( State_111111211111111( ~lock10.1, req, ~n.2, sk,
                                                                                   status
                                                            ) ▶₀ #t2.5 )
                                                next
                                                  case unlock_s_1111112111112111
                                                  solve( State_1111112111112111( ~lock10.1, req, ~n.2, sk,
                                                                                 status
                                                         ) ▶₀ #t2.5 )
                                                    case insert_s_req_111111211111211
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case unlock_s_11111211112111
                                  by solve( State_11111211112111( ~lock9, ~n.2, sk, status, x, y
                                            ) ▶₀ #t2.3 )
                                next
                                  case unlock_s_111112111122
                                  by solve( State_111112111122( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.3 )
                                qed
                              qed
                            next
                              case case_2
                              solve( (#t2.3 < #t2)  ∥ (#t2.3 = #t2)  ∥ (#vr.13 < #t2.3) )
                                case case_1
                                solve( Unlock_9( $9.1, ~lock9.1, ~n.2 ) @ #t2.4 )
                                  case unlock_s_1111121111111
                                  by solve( State_1111121111111( ~lock9, ~n.2, sk, status, x, y
                                            ) ▶₀ #t2.3 )
                                next
                                  case unlock_s_11111211112111
                                  solve( State_11111211112111( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.3 )
                                    case out_y_1111121111211
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case unlock_s_111112111122
                                  by solve( State_111112111122( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.3 )
                                qed
                              next
                                case case_2
                                solve( (#vr.25 < #vr.33)  ∥ (#t2.2 < #vr.25) )
                                  case case_1
                                  solve( Unlock_9( $9.1, ~lock9.1, ~n.2 ) @ #t2.3 )
                                    case unlock_s_1111121111111
                                    by solve( State_1111121111111( ~lock9, ~n.2, sk, status, x, y
                                              ) ▶₀ #t2.3 )
                                  next
                                    case unlock_s_11111211112111
                                    solve( State_11111211112111( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.3 )
                                      case out_y_1111121111211
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case unlock_s_111112111122
                                    by solve( State_111112111122( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.3 )
                                  qed
                                next
                                  case case_2
                                  solve( Unlock_9( $9.1, ~lock9.1, ~n.2 ) @ #t2.3 )
                                    case unlock_s_1111121111111
                                    by solve( State_1111121111111( ~lock9, ~n.2, sk, status, x, y
                                              ) ▶₀ #t2.3 )
                                  next
                                    case unlock_s_11111211112111
                                    solve( State_11111211112111( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.3 )
                                      case out_y_1111121111211
                                      solve( (#t2.4 < #t2.1)  ∥ (#t2.4 = #t2.1)  ∥ (#vr.31 < #t2.4) )
                                        case case_1
                                        by contradiction /* from formulas */
                                      next
                                        case case_2
                                        by contradiction /* from formulas */
                                      next
                                        case case_3
                                        solve( (#t2 < #t2.4)  ∥ (#t2 = #t2.4) )
                                          case case_1
                                          by contradiction /* from formulas */
                                        next
                                          case case_2
                                          by solve( Insert( ~n.2, 'right' ) @ #t2 )
                                        qed
                                      qed
                                    qed
                                  next
                                    case unlock_s_111112111122
                                    by solve( State_111112111122( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.3 )
                                  qed
                                qed
                              next
                                case case_3
                                solve( (#vr.25 < #vr.33)  ∥ (#t2.2 < #vr.25) )
                                  case case_1
                                  solve( Unlock_9( $9.1, ~lock9.1, ~n.2 ) @ #t2.4 )
                                    case unlock_s_1111121111111
                                    by solve( State_1111121111111( ~lock9, ~n.2, sk, status, x, y
                                              ) ▶₀ #t2.3 )
                                  next
                                    case unlock_s_11111211112111
                                    solve( State_11111211112111( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.3 )
                                      case out_y_1111121111211
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case unlock_s_111112111122
                                    by solve( State_111112111122( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.3 )
                                  qed
                                next
                                  case case_2
                                  solve( Unlock_9( $9.1, ~lock9.1, ~n.2 ) @ #t2.4 )
                                    case unlock_s_1111121111111
                                    by solve( State_1111121111111( ~lock9, ~n.2, sk, status, x, y
                                              ) ▶₀ #t2.3 )
                                  next
                                    case unlock_s_11111211112111
                                    solve( State_11111211112111( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.3 )
                                      case out_y_1111121111211
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case unlock_s_111112111122
                                    by solve( State_111112111122( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.3 )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case unlock_s_1111112111112111
                      by solve( State_1111112111112111( ~lock10, req, ~n.2, sk, status
                                ) ▶₀ #t2.2 )
                    qed
                  qed
                qed
              qed
            next
              case insert_s_req_111111211111211
              by solve( State_111111211111211( ~lock10, 'left', ~n.2, sk, status
                        ) ▶₀ #t2 )
            qed
          qed
        next
          case case_2
          solve( !KU( aenc(<~n, y>, pk(~n.6)) ) @ #vk.2 )
            case c_aenc
            by contradiction /* cyclic */
          next
            case out_aenc_lm_rm_pksk_111121111
            solve( Insert( ~n.2, 'left' ) @ #t2.1 )
              case insert_s_req_11111121111111
              solve( State_11111121111111( ~lock10, 'left', ~n.2, sk, status
                     ) ▶₀ #t2.1 )
                case event_InitDevices_1111112111111
                solve( ((#vr.16 < #vr.40) ∧
                        (∃ #t2.
                          (Unlock_9( $9, ~lock9, ~n.2 ) @ #t2)
                         ∧
                          (#vr.16 < #t2) ∧
                          (#t2 < #vr.40) ∧
                          (∀ #t0 pp. (Unlock( pp, ~lock9, ~n.2 ) @ #t0) ⇒ #t0 = #t2) ∧
                          (∀ pp lpp #t0.
                            (Lock( pp, lpp, ~n.2 ) @ #t0)
                           ⇒
                            ((#t0 < #vr.16) ∨ (#t0 = #vr.16) ∨ (#t2 < #t0))) ∧
                          (∀ pp lpp #t0.
                            (Unlock( pp, lpp, ~n.2 ) @ #t0)
                           ⇒
                            ((#t0 < #vr.16) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                       (#vr.40 < #vr.16) )
                  case case_1
                  solve( (#vr.5 < #t2.2)  ∥ (#vr.5 = #t2.2) )
                    case case_1
                    solve( Unlock_9( $9, ~lock9, ~n.2 ) @ #t2.3 )
                      case unlock_s_1111121111111
                      solve( State_1111121111111( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.2 )
                        case out_x_111112111111
                        by contradiction /* cyclic */
                      qed
                    next
                      case unlock_s_11111211112111
                      by solve( State_11111211112111( ~lock9, ~n.2, sk, status, x, y
                                ) ▶₀ #t2.2 )
                    next
                      case unlock_s_111112111122
                      by solve( State_111112111122( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.2 )
                    qed
                  next
                    case case_2
                    solve( Unlock_9( $9, ~lock9, ~n.2 ) @ #t2.3 )
                      case unlock_s_1111121111111
                      solve( State_1111121111111( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.3 )
                        case out_x_111112111111
                        by contradiction /* cyclic */
                      qed
                    next
                      case unlock_s_11111211112111
                      by solve( State_11111211112111( ~lock9, ~n.2, sk, status, x, y
                                ) ▶₀ #t2.3 )
                    next
                      case unlock_s_111112111122
                      by solve( State_111112111122( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.3 )
                    qed
                  qed
                next
                  case case_2
                  solve( (#vr.5 < #t2.2)  ∥ (#vr.5 = #t2.2) )
                    case case_1
                    solve( Unlock_10( $10, ~lock10, ~n.2 ) @ #t2.3 )
                      case unlock_s_111111211111111
                      solve( State_111111211111111( ~lock10, req, ~n.2, sk, status ) ▶₀ #t2.2 )
                        case insert_s_req_11111121111111
                        solve( (#vr.5 < #t2.4)  ∥ (#vr.5 = #t2.4) )
                          case case_1
                          solve( (#t2.3 < #t2.4)  ∥ (#t2.3 = #t2.4) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            solve( !KU( aenc(<x, ~n.1>, pk(~n.5)) ) @ #vk.3 )
                              case c_aenc
                              by contradiction /* cyclic */
                            next
                              case out_aenc_lm_rm_pksk_111121111
                              solve( Unlock_9( $9.1, ~lock9.1, ~n.2 ) @ #t2.4 )
                                case unlock_s_1111121111111
                                by solve( State_1111121111111( ~lock9, ~n.2, sk, status, x, y
                                          ) ▶₀ #t2.3 )
                              next
                                case unlock_s_11111211112111
                                solve( State_11111211112111( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.3 )
                                  case out_y_1111121111211
                                  solve( (#t2 < #t2.5)  ∥ (#t2 = #t2.5) )
                                    case case_1
                                    by contradiction /* from formulas */
                                  next
                                    case case_2
                                    by solve( Insert( ~n.2, 'right' ) @ #t2 )
                                  qed
                                qed
                              next
                                case unlock_s_111112111122
                                by solve( State_111112111122( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.3 )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case unlock_s_1111112111112111
                      by solve( State_1111112111112111( ~lock10, req, ~n.2, sk, status
                                ) ▶₀ #t2.2 )
                    qed
                  next
                    case case_2
                    solve( Unlock_10( $10, ~lock10, ~n.2 ) @ #t2.3 )
                      case unlock_s_111111211111111
                      solve( State_111111211111111( ~lock10, req, ~n.2, sk, status ) ▶₀ #t2.3 )
                        case insert_s_req_11111121111111
                        solve( (#t2.2 < #t2.4)  ∥ (#t2.2 = #t2.4) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( !KU( aenc(<x, ~n.1>, pk(~n.5)) ) @ #vk.3 )
                            case c_aenc
                            by contradiction /* cyclic */
                          next
                            case out_aenc_lm_rm_pksk_111121111
                            solve( Unlock_9( $9.1, ~lock9.1, ~n.2 ) @ #t2.3 )
                              case unlock_s_1111121111111
                              by solve( State_1111121111111( ~lock9, ~n.2, sk, status, x, y
                                        ) ▶₀ #t2.3 )
                            next
                              case unlock_s_11111211112111
                              solve( State_11111211112111( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.3 )
                                case out_y_1111121111211
                                solve( (#t2 < #t2.4)  ∥ (#t2 = #t2.4) )
                                  case case_1
                                  by contradiction /* from formulas */
                                next
                                  case case_2
                                  by solve( Insert( ~n.2, 'right' ) @ #t2 )
                                qed
                              qed
                            next
                              case unlock_s_111112111122
                              by solve( State_111112111122( ~lock9, ~n.2, sk, status, x, y ) ▶₀ #t2.3 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case unlock_s_1111112111112111
                      by solve( State_1111112111112111( ~lock10, req, ~n.2, sk, status
                                ) ▶₀ #t2.3 )
                    qed
                  qed
                qed
              qed
            next
              case insert_s_req_111111211111211
              by solve( State_111111211111211( ~lock10, 'left', ~n.2, sk, status
                        ) ▶₀ #t2.1 )
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( !KU( ~n.1 ) @ #vk.1 )
        case out_aenc_lm_rm_pksk_111121111
        solve( !KU( aenc(<~n, y>, pk(~n.5)) ) @ #vk.2 )
          case c_aenc
          by contradiction /* cyclic */
        next
          case out_aenc_lm_rm_pksk_111121111
          by solve( Insert( ~n.2, 'left' ) @ #t2 )
        qed
      next
        case out_x_111112111111
        solve( (#vr.34 < #t2.1)  ∥ (#vr.34 = #t2.1) )
          case case_1
          solve( !KU( aenc(<~n, y>, pk(~n.5)) ) @ #vk.2 )
            case c_aenc
            by contradiction /* cyclic */
          next
            case out_aenc_lm_rm_pksk_111121111
            by solve( Insert( ~n.2, 'left' ) @ #t2 )
          qed
        next
          case case_2
          solve( !KU( aenc(<~n, y>, pk(~n.5)) ) @ #vk.2 )
            case c_aenc
            by contradiction /* cyclic */
          next
            case out_aenc_lm_rm_pksk_111121111
            by solve( Insert( ~n.2, 'left' ) @ #t2 )
          qed
        qed
      next
        case out_y_1111121111211
        solve( (#vr.35 < #t2.1)  ∥ (#vr.35 = #t2.1) )
          case case_1
          solve( !KU( aenc(<~n, y>, pk(~n.5)) ) @ #vk.2 )
            case c_aenc
            by contradiction /* cyclic */
          next
            case out_aenc_lm_rm_pksk_111121111
            by solve( Insert( ~n.2, 'left' ) @ #t2 )
          qed
        next
          case case_2
          solve( !KU( aenc(<~n, y>, pk(~n.5)) ) @ #vk.2 )
            case c_aenc
            by contradiction /* cyclic */
          next
            case out_aenc_lm_rm_pksk_111121111
            by solve( Insert( ~n.2, 'left' ) @ #t2 )
          qed
        qed
      qed
    qed
  next
    case out_y_1111121111211
    solve( (#vr.22 < #t2)  ∥ (#vr.22 = #t2) )
      case case_1
      solve( !KU( ~n.1 ) @ #vk.1 )
        case out_aenc_lm_rm_pksk_111121111
        solve( !KU( aenc(<x, ~n>, pk(~n.4)) ) @ #vk.2 )
          case c_aenc
          by contradiction /* cyclic */
        qed
      next
        case out_x_111112111111
        solve( (#vr.36 < #t2.1)  ∥ (#vr.36 = #t2.1) )
          case case_1
          solve( !KU( aenc(<x, ~n>, pk(~n.4)) ) @ #vk.2 )
            case c_aenc
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( !KU( aenc(<x, ~n>, pk(~n.6)) ) @ #vk.2 )
            case c_aenc
            by contradiction /* cyclic */
          qed
        qed
      next
        case out_y_1111121111211
        solve( (#vr.37 < #t2.1)  ∥ (#vr.37 = #t2.1) )
          case case_1
          solve( !KU( aenc(<x, ~n>, pk(~n.4)) ) @ #vk.2 )
            case c_aenc
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( !KU( aenc(<x, ~n>, pk(~n.6)) ) @ #vk.2 )
            case c_aenc
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case case_2
      solve( !KU( ~n.1 ) @ #vk.1 )
        case out_aenc_lm_rm_pksk_111121111
        solve( !KU( aenc(<x, ~n>, pk(~n.5)) ) @ #vk.2 )
          case c_aenc
          by contradiction /* cyclic */
        qed
      next
        case out_x_111112111111
        solve( (#vr.35 < #t2.1)  ∥ (#vr.35 = #t2.1) )
          case case_1
          solve( !KU( aenc(<x, ~n>, pk(~n.5)) ) @ #vk.2 )
            case c_aenc
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( !KU( aenc(<x, ~n>, pk(~n.5)) ) @ #vk.2 )
            case c_aenc
            by contradiction /* cyclic */
          qed
        qed
      next
        case out_y_1111121111211
        solve( (#vr.36 < #t2.1)  ∥ (#vr.36 = #t2.1) )
          case case_1
          solve( !KU( aenc(<x, ~n>, pk(~n.5)) ) @ #vk.2 )
            case c_aenc
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( !KU( aenc(<x, ~n>, pk(~n.5)) ) @ #vk.2 )
            case c_aenc
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  qed
qed

/*
WARNING: the following wellformedness checks failed!

unbound:
  rule `lookup_s_as_status_0_1111112111' has unbound variables: 
    status
  
  rule `lookup_s_as_status_0_111112111' has unbound variables: 
    status

Restriction actions:
  restriction `set_in' references action 
    (ProtoFact Linear "Delete" 1,1,Linear)
  but no rule has such an action.
  
  restriction `set_notin' references action 
    (ProtoFact Linear "Delete" 1,1,Linear)
  but no rule has such an action.
*/

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.
SAPIC tool: 'sapic'
Checking availablity ... OK.


analyzing: case-studies-sapic-regression/statVerifLeftRight/stateverif_left_right.spthy

------------------------------------------------------------------------------
analyzed: case-studies-sapic-regression/statVerifLeftRight/stateverif_left_right.spthy

  output:          case-studies-sapic-regression/statVerifLeftRight/stateverif_left_right.spthy.tmp
  processing time: 22.21865862s
  WARNING: 4 wellformedness check failed!
           The analysis results might be wrong!
  
  source (all-traces): verified (165 steps)
  reachability_left (exists-trace): verified (14 steps)
  reachability_right (exists-trace): verified (14 steps)
  secrecy (all-traces): verified (558 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: case-studies-sapic-regression/statVerifLeftRight/stateverif_left_right.spthy

  output:          case-studies-sapic-regression/statVerifLeftRight/stateverif_left_right.spthy.tmp
  processing time: 22.21865862s
  WARNING: 4 wellformedness check failed!
           The analysis results might be wrong!
  
  source (all-traces): verified (165 steps)
  reachability_left (exists-trace): verified (14 steps)
  reachability_right (exists-trace): verified (14 steps)
  secrecy (all-traces): verified (558 steps)

==============================================================================
*/
