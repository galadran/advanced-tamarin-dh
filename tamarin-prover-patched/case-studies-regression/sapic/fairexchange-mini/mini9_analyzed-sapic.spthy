theory mini9 begin

// Function signature and definition of the equational theory E

functions: check_rep/2, fst/1, get_rep/1, h/1, pair/2, pk/1,
           rep/2 [private], sign/2, snd/1, true/0, verify/3
equations:
    check_rep(rep(m, loc), loc) = m,
    fst(<x.1, x.2>) = x.1,
    get_rep(rep(m, loc)) = m,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

heuristic: l

section{* small example for progression function *}

rule (modulo E) Init_:
   [ Fr( ~prog_ ) ]
  --[ Init( ), ProgressFrom_( ~prog_ ) ]->
   [ State_( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) MessageID_rule_:
   [ Fr( ~x ) ] --> [ MID_Sender( ~x ), MID_Receiver( ~x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Start_:
   [ State_( ~prog_ ) ] --[ Event( ), Start( ) ]-> [ State_1( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_1:
   [ State_1( ~prog_ ) ]
  --[ ProgressTo_12( ~prog_ ) ]->
   [ State_11( ~prog_ ), State_12( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_r_Help__111:
   [ MID_Sender( mid_111 ), State_11( ~prog_ ) ]
  --[ ProgressTo_1111( ~prog_ ), Send( mid_111, 'Help' ) ]->
   [ Out( 'Help' ), State_1111( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111:
   [ State_1111( ~prog_ ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_c_m_112:
   [ State_11( ~prog_ ), In( <'c', m> ) ]
  --[ ChannelInEvent( <'c', m> ) ]->
   [ State_1121( ~prog_, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_B_1121:
   [ State_1121( ~prog_, m ) ]
  --[ ProgressTo_11211( ~prog_ ), Event( ), B( ) ]->
   [ State_11211( ~prog_, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_11211:
   [ State_11211( ~prog_, m ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_r_Help__12:
   [
   Fr( ~prog_121 ), State_12( ~prog_ ), In( 'Help' ), MID_Receiver( mid_12 )
   ]
  --[ ProgressFrom_121( ~prog_121 ), Receive( mid_12, 'Help' ) ]->
   [ State_121( ~prog_, ~prog_121 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_A_121:
   [ State_121( ~prog_, ~prog_121 ) ]
  --[ ProgressTo_1211( ~prog_121 ), Event( ), A( ) ]->
   [ State_1211( ~prog_, ~prog_121 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1211:
   [ State_1211( ~prog_, ~prog_121 ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction progress_121_to_1211:
  "∀ p #t1.
    (ProgressFrom_121( p ) @ #t1) ⇒ (∃ #t2. ProgressTo_1211( p ) @ #t2)"

restriction progress__to_12:
  "∀ p #t1. (ProgressFrom_( p ) @ #t1) ⇒ (∃ #t2. ProgressTo_12( p ) @ #t2)"

restriction progress__to_1111_or_11211:
  "∀ p #t1.
    (ProgressFrom_( p ) @ #t1) ⇒
    ((∃ #t2. ProgressTo_1111( p ) @ #t2) ∨
     (∃ #t2. ProgressTo_11211( p ) @ #t2))"

restriction progress_init:
  "∃ #t. Init( ) @ #t"

restriction resilient:
  "∀ #i x y.
    (Send( x, y ) @ #i) ⇒ (∃ #j. (Receive( x, y ) @ #j) ∧ (#i < #j))"

lemma A_possible:
  exists-trace "∃ #t. A( ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t. (A( ) @ #t)"
*/
simplify
solve( State_121( ~prog_, ~prog_121 ) ▶₀ #t )
  case in_r_Help__12
  solve( State_1( ~prog_ ) ▶₀ #t2 )
    case event_Start_
    solve( State_1( ~prog_ ) ▶₀ #t2.1 )
      case event_Start_
      solve( State_121( ~prog_.1, ~prog_121 ) ▶₀ #t2.1 )
        case in_r_Help__12
        solve( State_1( ~prog_ ) ▶₀ #t2.1 )
          case event_Start_
          solve( (∃ #t2. (ProgressTo_1111( ~prog_ ) @ #t2))  ∥
                 (∃ #t2. (ProgressTo_11211( ~prog_ ) @ #t2)) )
            case case_1
            solve( MID_Receiver( mid_111 ) ▶₃ #j )
              case MessageID_rule_
              solve( MID_Sender( ~x ) ▶₀ #t2.1 )
                case MessageID_rule_
                solve( State_11( ~prog_.1 ) ▶₁ #t2.1 )
                  case Par_1
                  solve( State_12( ~prog_ ) ▶₁ #j )
                    case Par_1
                    solve( State_121( ~prog_.1, ~prog_121 ) ▶₀ #t2.2 )
                      case in_r_Help__12
                      solve( State_1( ~prog_ ) ▶₀ #t2.2 )
                        case event_Start_
                        solve( State_1( ~prog_ ) ▶₀ #t2.2 )
                          case event_Start_
                          SOLVED // trace found
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma B_possible:
  exists-trace "∃ #t. B( ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t. (B( ) @ #t)"
*/
simplify
solve( State_1121( ~prog_, m ) ▶₀ #t )
  case in_c_m_112
  solve( State_1( ~prog_ ) ▶₀ #t2 )
    case event_Start_
    solve( State_1( ~prog_ ) ▶₀ #t2.1 )
      case event_Start_
      solve( (∃ #t2. (ProgressTo_1111( ~prog_ ) @ #t2))  ∥
             (∃ #t2. (ProgressTo_11211( ~prog_ ) @ #t2)) )
        case case_2
        solve( State_1121( ~prog_, m.1 ) ▶₀ #t2.1 )
          case in_c_m_112
          SOLVED // trace found
        qed
      qed
    qed
  qed
qed

lemma A_or_B:
  all-traces
  "∀ #t1. (Start( ) @ #t1) ⇒ ((∃ #t2. A( ) @ #t2) ∨ (∃ #t2. B( ) @ #t2))"
/*
guarded formula characterizing all counter-examples:
"∃ #t1.
  (Start( ) @ #t1) ∧ (∀ #t2. (A( ) @ #t2) ⇒ ⊥) ∧ (∀ #t2. (B( ) @ #t2) ⇒ ⊥)"
*/
simplify
solve( State_( ~prog_ ) ▶₀ #t1 )
  case Init_
  solve( State_1( ~prog_ ) ▶₀ #t2 )
    case event_Start_
    solve( State_1( ~prog_ ) ▶₀ #t2.1 )
      case event_Start_
      solve( (∃ #t2. (ProgressTo_1111( ~prog_ ) @ #t2))  ∥
             (∃ #t2. (ProgressTo_11211( ~prog_ ) @ #t2)) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.
SAPIC tool: 'sapic'
Checking availablity ... OK.


analyzing: case-studies-sapic-regression/fairexchange-mini/mini9.spthy

------------------------------------------------------------------------------
analyzed: case-studies-sapic-regression/fairexchange-mini/mini9.spthy

  output:          case-studies-sapic-regression/fairexchange-mini/mini9.spthy.tmp
  processing time: 0.12196054s
  A_possible (exists-trace): verified (15 steps)
  B_possible (exists-trace): verified (7 steps)
  A_or_B (all-traces): verified (7 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: case-studies-sapic-regression/fairexchange-mini/mini9.spthy

  output:          case-studies-sapic-regression/fairexchange-mini/mini9.spthy.tmp
  processing time: 0.12196054s
  A_possible (exists-trace): verified (15 steps)
  B_possible (exists-trace): verified (7 steps)
  A_or_B (all-traces): verified (7 steps)

==============================================================================
*/
