theory NDCTwoReplications begin

// Function signature and definition of the equational theory E

functions: check_rep/2, fst/1, get_rep/1, h/1, pair/2, pk/1,
           rep/2 [private], sign/2, snd/1, true/0, verify/3
equations:
    check_rep(rep(m, loc), loc) = m,
    fst(<x.1, x.2>) = x.1,
    get_rep(rep(m, loc)) = m,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

heuristic: l

section{* small example for progression function *}

rule (modulo E) Init_:
   [ ] --[ Init( ) ]-> [ State_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) MessageID_rule_:
   [ Fr( ~x ) ] --> [ MID_Sender( ~x ), MID_Receiver( ~x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_1:
   [ State_( ) ] --> [ !Semistate_11( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_1:
   [ Fr( ~prog_11 ), !Semistate_11( ) ]
  --[ ProgressFrom_11( ~prog_11 ) ]->
   [ State_11( ~prog_11 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_A_11:
   [ State_11( ~prog_11 ) ]
  --[ ProgressTo_111( ~prog_11 ), Event( ), A( ) ]->
   [ State_111( ~prog_11 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_111:
   [ State_111( ~prog_11 ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_2:
   [ State_( ) ] --> [ !Semistate_21( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_2:
   [ Fr( ~prog_21 ), !Semistate_21( ) ]
  --[ ProgressFrom_21( ~prog_21 ) ]->
   [ State_21( ~prog_21 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_B_21:
   [ State_21( ~prog_21 ) ]
  --[ ProgressTo_211( ~prog_21 ), Event( ), B( ) ]->
   [ State_211( ~prog_21 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_211:
   [ State_211( ~prog_21 ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction progress_21_to_211:
  "∀ p #t1.
    (ProgressFrom_21( p ) @ #t1) ⇒ (∃ #t2. ProgressTo_211( p ) @ #t2)"

restriction progress_11_to_111:
  "∀ p #t1.
    (ProgressFrom_11( p ) @ #t1) ⇒ (∃ #t2. ProgressTo_111( p ) @ #t2)"

restriction progress_init:
  "∃ #t. Init( ) @ #t"

restriction resilient:
  "∀ #i x y.
    (Send( x, y ) @ #i) ⇒ (∃ #j. (Receive( x, y ) @ #j) ∧ (#i < #j))"

lemma A_possible:
  exists-trace "∃ #t. A( ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t. (A( ) @ #t)"
*/
simplify
solve( State_11( ~prog_11 ) ▶₀ #t )
  case Rep_1_1
  solve( State_11( ~prog_11 ) ▶₀ #t2 )
    case Rep_1_1
    SOLVED // trace found
  qed
qed

lemma B_possible:
  exists-trace "∃ #t. B( ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t. (B( ) @ #t)"
*/
simplify
solve( State_21( ~prog_21 ) ▶₀ #t )
  case Rep_1_2
  solve( State_21( ~prog_21 ) ▶₀ #t2 )
    case Rep_1_2
    SOLVED // trace found
  qed
qed

lemma no_progress_possible:
  exists-trace "(¬(∃ #t. A( ) @ #t)) ∧ (¬(∃ #t. B( ) @ #t))"
/*
guarded formula characterizing all satisfying traces:
"(∀ #t. (A( ) @ #t) ⇒ ⊥) ∧ (∀ #t. (B( ) @ #t) ⇒ ⊥)"
*/
simplify
SOLVED // trace found

lemma A_exclusive:
  all-traces "(∃ #t. A( ) @ #t) ⇒ (¬(∃ #t2. B( ) @ #t2))"
/*
guarded formula characterizing all counter-examples:
"(∃ #t. (A( ) @ #t)) ∧ (∃ #t2. (B( ) @ #t2))"
*/
simplify
solve( State_11( ~prog_11 ) ▶₀ #t )
  case Rep_1_1
  by solve( State_21( ~prog_21 ) ▶₀ #t2 )
qed

lemma B_exclusive:
  all-traces "(∃ #t. B( ) @ #t) ⇒ (¬(∃ #t2. A( ) @ #t2))"
/*
guarded formula characterizing all counter-examples:
"(∃ #t. (B( ) @ #t)) ∧ (∃ #t2. (A( ) @ #t2))"
*/
simplify
solve( State_21( ~prog_21 ) ▶₀ #t )
  case Rep_1_2
  by solve( State_11( ~prog_11 ) ▶₀ #t2 )
qed

/*
WARNING: the following wellformedness checks failed!

Restriction actions:
  restriction `resilient' references action 
    (ProtoFact Linear "Receive" 2,2,Linear)
  but no rule has such an action.
  
  restriction `resilient' references action 
    (ProtoFact Linear "Send" 2,2,Linear)
  but no rule has such an action.
*/

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.
SAPIC tool: 'sapic'
Checking availablity ... OK.


analyzing: case-studies-sapic-regression/fairexchange-mini/ndc-two-replications.spthy

------------------------------------------------------------------------------
analyzed: case-studies-sapic-regression/fairexchange-mini/ndc-two-replications.spthy

  output:          case-studies-sapic-regression/fairexchange-mini/ndc-two-replications.spthy.tmp
  processing time: 0.057349003s
  WARNING: 2 wellformedness check failed!
           The analysis results might be wrong!
  
  A_possible (exists-trace): verified (4 steps)
  B_possible (exists-trace): verified (4 steps)
  no_progress_possible (exists-trace): verified (2 steps)
  A_exclusive (all-traces): verified (3 steps)
  B_exclusive (all-traces): verified (3 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: case-studies-sapic-regression/fairexchange-mini/ndc-two-replications.spthy

  output:          case-studies-sapic-regression/fairexchange-mini/ndc-two-replications.spthy.tmp
  processing time: 0.057349003s
  WARNING: 2 wellformedness check failed!
           The analysis results might be wrong!
  
  A_possible (exists-trace): verified (4 steps)
  B_possible (exists-trace): verified (4 steps)
  no_progress_possible (exists-trace): verified (2 steps)
  A_exclusive (all-traces): verified (3 steps)
  B_exclusive (all-traces): verified (3 steps)

==============================================================================
*/
