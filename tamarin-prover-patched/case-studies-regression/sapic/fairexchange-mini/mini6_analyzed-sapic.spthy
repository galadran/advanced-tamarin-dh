theory mini6 begin

// Function signature and definition of the equational theory E

functions: check_rep/2, fst/1, get_rep/1, h/1, pair/2, pk/1,
           rep/2 [private], sign/2, snd/1, true/0, verify/3
equations:
    check_rep(rep(m, loc), loc) = m,
    fst(<x.1, x.2>) = x.1,
    get_rep(rep(m, loc)) = m,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

heuristic: l

section{* small example for progression function *}

rule (modulo E) Init_:
   [ Fr( ~prog_ ) ]
  --[ Init( ), ProgressFrom_( ~prog_ ) ]->
   [ State_( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) MessageID_rule_:
   [ Fr( ~x ) ] --> [ MID_Sender( ~x ), MID_Receiver( ~x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_a_:
   [ State_( ~prog_ ), Fr( a ) ]
  --[ ProgressTo_1( ~prog_ ) ]->
   [ State_1( ~prog_, a ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_1:
   [ State_1( ~prog_, a ) ] --> [ !Semistate_11( ~prog_, a ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_1:
   [ Fr( ~prog_11 ), !Semistate_11( ~prog_, a ) ]
  --[ ProgressFrom_11( ~prog_11 ) ]->
   [ State_11( ~prog_, ~prog_11, a ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqa_a_0_11:
   [ State_11( ~prog_, ~prog_11, a ) ]
  --[ ProgressTo_111( ~prog_11 ), Pred_eq( a, a ) ]->
   [ State_111( ~prog_, ~prog_11, a ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqa_a_1_11:
   [ State_11( ~prog_, ~prog_11, a ) ]
  --[ ProgressTo_111( ~prog_11 ), Pred_not_eq( a, a ) ]->
   [ State_112( ~prog_, ~prog_11, a ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_r_m_111:
   [
   Fr( ~prog_1111 ), State_111( ~prog_, ~prog_11, a ), In( m ),
   MID_Receiver( mid_111 )
   ]
  --[ ProgressFrom_1111( ~prog_1111 ), Receive( mid_111, m ) ]->
   [ State_1111( ~prog_, ~prog_11, ~prog_1111, a, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_A_1111:
   [ State_1111( ~prog_, ~prog_11, ~prog_1111, a, m ) ]
  --[ ProgressTo_11111( ~prog_1111 ), Event( ), A( ) ]->
   [ State_11111( ~prog_, ~prog_11, ~prog_1111, a, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_11111:
   [ State_11111( ~prog_, ~prog_11, ~prog_1111, a, m ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_B_112:
   [ State_112( ~prog_, ~prog_11, a ) ]
  --[ ProgressTo_1121( ~prog_11 ), Event( ), B( ) ]->
   [ State_1121( ~prog_, ~prog_11, a ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1121:
   [ State_1121( ~prog_, ~prog_11, a ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction predicate_eq:
  "∀ #i a b. (Pred_eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction predicate_not_eq:
  "∀ #i a b. (Pred_not_eq( a, b ) @ #i) ⇒ (¬(a = b))"
  // safety formula

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction progress_1111_to_11111:
  "∀ p #t1.
    (ProgressFrom_1111( p ) @ #t1) ⇒ (∃ #t2. ProgressTo_11111( p ) @ #t2)"

restriction progress_11_to_111_or_1121:
  "∀ p #t1.
    (ProgressFrom_11( p ) @ #t1) ⇒
    ((∃ #t2. ProgressTo_111( p ) @ #t2) ∨
     (∃ #t2. ProgressTo_1121( p ) @ #t2))"

restriction progress__to_1:
  "∀ p #t1. (ProgressFrom_( p ) @ #t1) ⇒ (∃ #t2. ProgressTo_1( p ) @ #t2)"

restriction progress_init:
  "∃ #t. Init( ) @ #t"

restriction resilient:
  "∀ #i x y.
    (Send( x, y ) @ #i) ⇒ (∃ #j. (Receive( x, y ) @ #j) ∧ (#i < #j))"

lemma A_possible:
  exists-trace "∃ #t. A( ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t. (A( ) @ #t)"
*/
simplify
solve( State_1111( ~prog_, ~prog_11, ~prog_1111, a, m ) ▶₀ #t )
  case in_r_m_111
  solve( State_( ~prog_ ) ▶₀ #t2 )
    case Init_
    solve( State_( ~prog_ ) ▶₀ #t2.1 )
      case Init_
      solve( State_1111( ~prog_.1, ~prog_11.1, ~prog_1111, a, m.1 ) ▶₀ #t2.1 )
        case in_r_m_111
        solve( State_( ~prog_ ) ▶₀ #t2.1 )
          case Init_
          solve( (∃ #t2. (ProgressTo_111( ~prog_11 ) @ #t2))  ∥
                 (∃ #t2. (ProgressTo_1121( ~prog_11 ) @ #t2)) )
            case case_1
            solve( ProgressTo_111( ~prog_11 ) @ #t2.1 )
              case if_eqa_a_0_11
              solve( State_11( ~prog_.1, ~prog_11, a ) ▶₀ #t2.1 )
                case Rep_1_1
                solve( State_( ~prog_ ) ▶₀ #t2.2 )
                  case Init_
                  SOLVED // trace found
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma B_impossible:
  all-traces "¬(∃ #t. B( ) @ #t)"
/*
guarded formula characterizing all counter-examples:
"∃ #t. (B( ) @ #t)"
*/
simplify
by solve( State_112( ~prog_, ~prog_11, a ) ▶₀ #t )

/*
WARNING: the following wellformedness checks failed!

Restriction actions:
  restriction `resilient' references action 
    (ProtoFact Linear "Send" 2,2,Linear)
  but no rule has such an action.
*/

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.
SAPIC tool: 'sapic'
Checking availablity ... OK.


analyzing: case-studies-sapic-regression/fairexchange-mini/mini6.spthy

------------------------------------------------------------------------------
analyzed: case-studies-sapic-regression/fairexchange-mini/mini6.spthy

  output:          case-studies-sapic-regression/fairexchange-mini/mini6.spthy.tmp
  processing time: 0.106902476s
  WARNING: 1 wellformedness check failed!
           The analysis results might be wrong!
  
  A_possible (exists-trace): verified (11 steps)
  B_impossible (all-traces): verified (2 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: case-studies-sapic-regression/fairexchange-mini/mini6.spthy

  output:          case-studies-sapic-regression/fairexchange-mini/mini6.spthy.tmp
  processing time: 0.106902476s
  WARNING: 1 wellformedness check failed!
           The analysis results might be wrong!
  
  A_possible (exists-trace): verified (11 steps)
  B_impossible (all-traces): verified (2 steps)

==============================================================================
*/
