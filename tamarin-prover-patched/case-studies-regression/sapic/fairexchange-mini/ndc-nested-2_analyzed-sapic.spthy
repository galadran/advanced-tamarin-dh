theory nestedNDC2 begin

// Function signature and definition of the equational theory E

functions: check_rep/2, fst/1, get_rep/1, h/1, pair/2, pk/1,
           rep/2 [private], sign/2, snd/1, true/0, verify/3
equations:
    check_rep(rep(m, loc), loc) = m,
    fst(<x.1, x.2>) = x.1,
    get_rep(rep(m, loc)) = m,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

heuristic: l

section{* small example for progression function *}

rule (modulo E) Init_:
   [ Fr( ~prog_ ) ]
  --[ Init( ), ProgressFrom_( ~prog_ ) ]->
   [ State_( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) MessageID_rule_:
   [ Fr( ~x ) ] --> [ MID_Sender( ~x ), MID_Receiver( ~x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Start_:
   [ State_( ~prog_ ) ]
  --[ ProgressTo_1( ~prog_ ), Event( ), Start( ) ]->
   [ State_1( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_11:
   [ State_1( ~prog_ ) ] --> [ !Semistate_111( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_11:
   [ Fr( ~prog_111 ), !Semistate_111( ~prog_ ) ]
  --[ ProgressFrom_111( ~prog_111 ) ]->
   [ State_111( ~prog_, ~prog_111 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_A_111:
   [ State_111( ~prog_, ~prog_111 ) ]
  --[ ProgressTo_1111( ~prog_111 ), Event( ), A( ) ]->
   [ State_1111( ~prog_, ~prog_111 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111:
   [ State_1111( ~prog_, ~prog_111 ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_121:
   [ State_1( ~prog_ ) ] --> [ !Semistate_1211( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_121:
   [ Fr( ~prog_1211 ), !Semistate_1211( ~prog_ ) ]
  --[ ProgressFrom_1211( ~prog_1211 ) ]->
   [ State_1211( ~prog_, ~prog_1211 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_B_1211:
   [ State_1211( ~prog_, ~prog_1211 ) ]
  --[ ProgressTo_12111( ~prog_1211 ), Event( ), B( ) ]->
   [ State_12111( ~prog_, ~prog_1211 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_12111:
   [ State_12111( ~prog_, ~prog_1211 ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_122:
   [ State_1( ~prog_ ) ] --> [ !Semistate_1221( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_122:
   [ Fr( ~prog_1221 ), !Semistate_1221( ~prog_ ) ]
  --[ ProgressFrom_1221( ~prog_1221 ) ]->
   [ State_1221( ~prog_, ~prog_1221 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_C_1221:
   [ State_1221( ~prog_, ~prog_1221 ) ]
  --[ ProgressTo_12211( ~prog_1221 ), Event( ), C( ) ]->
   [ State_12211( ~prog_, ~prog_1221 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_12211:
   [ State_12211( ~prog_, ~prog_1221 ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction progress_1221_to_12211:
  "∀ p #t1.
    (ProgressFrom_1221( p ) @ #t1) ⇒ (∃ #t2. ProgressTo_12211( p ) @ #t2)"

restriction progress_1211_to_12111:
  "∀ p #t1.
    (ProgressFrom_1211( p ) @ #t1) ⇒ (∃ #t2. ProgressTo_12111( p ) @ #t2)"

restriction progress_111_to_1111:
  "∀ p #t1.
    (ProgressFrom_111( p ) @ #t1) ⇒ (∃ #t2. ProgressTo_1111( p ) @ #t2)"

restriction progress__to_1:
  "∀ p #t1. (ProgressFrom_( p ) @ #t1) ⇒ (∃ #t2. ProgressTo_1( p ) @ #t2)"

restriction progress_init:
  "∃ #t. Init( ) @ #t"

restriction resilient:
  "∀ #i x y.
    (Send( x, y ) @ #i) ⇒ (∃ #j. (Receive( x, y ) @ #j) ∧ (#i < #j))"

lemma A_possible:
  exists-trace "∃ #t. A( ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t. (A( ) @ #t)"
*/
simplify
solve( State_111( ~prog_, ~prog_111 ) ▶₀ #t )
  case Rep_1_11
  solve( State_( ~prog_ ) ▶₀ #t2 )
    case Init_
    solve( State_( ~prog_ ) ▶₀ #t2.1 )
      case Init_
      solve( State_111( ~prog_.1, ~prog_111 ) ▶₀ #t2.1 )
        case Rep_1_11
        solve( State_( ~prog_ ) ▶₀ #t2.1 )
          case Init_
          SOLVED // trace found
        qed
      qed
    qed
  qed
qed

lemma B_possible:
  exists-trace "∃ #t. B( ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t. (B( ) @ #t)"
*/
simplify
solve( State_1211( ~prog_, ~prog_1211 ) ▶₀ #t )
  case Rep_1_121
  solve( State_( ~prog_ ) ▶₀ #t2 )
    case Init_
    solve( State_( ~prog_ ) ▶₀ #t2.1 )
      case Init_
      solve( State_1211( ~prog_.1, ~prog_1211 ) ▶₀ #t2.1 )
        case Rep_1_121
        solve( State_( ~prog_ ) ▶₀ #t2.1 )
          case Init_
          SOLVED // trace found
        qed
      qed
    qed
  qed
qed

lemma C_possible:
  exists-trace "∃ #t. C( ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t. (C( ) @ #t)"
*/
simplify
solve( State_1221( ~prog_, ~prog_1221 ) ▶₀ #t )
  case Rep_1_122
  solve( State_( ~prog_ ) ▶₀ #t2 )
    case Init_
    solve( State_( ~prog_ ) ▶₀ #t2.1 )
      case Init_
      solve( State_1221( ~prog_.1, ~prog_1221 ) ▶₀ #t2.1 )
        case Rep_1_122
        solve( State_( ~prog_ ) ▶₀ #t2.1 )
          case Init_
          SOLVED // trace found
        qed
      qed
    qed
  qed
qed

lemma no_progress:
  exists-trace
  "((¬(∃ #t. A( ) @ #t)) ∧ (¬(∃ #t. B( ) @ #t))) ∧ (¬(∃ #t. C( ) @ #t))"
/*
guarded formula characterizing all satisfying traces:
"(∀ #t. (A( ) @ #t) ⇒ ⊥) ∧
 (∀ #t. (B( ) @ #t) ⇒ ⊥) ∧
 (∀ #t. (C( ) @ #t) ⇒ ⊥)"
*/
simplify
solve( State_( ~prog_ ) ▶₀ #t2 )
  case Init_
  SOLVED // trace found
qed

/*
WARNING: the following wellformedness checks failed!

Restriction actions:
  restriction `resilient' references action 
    (ProtoFact Linear "Receive" 2,2,Linear)
  but no rule has such an action.
  
  restriction `resilient' references action 
    (ProtoFact Linear "Send" 2,2,Linear)
  but no rule has such an action.
*/

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.
SAPIC tool: 'sapic'
Checking availablity ... OK.


analyzing: case-studies-sapic-regression/fairexchange-mini/ndc-nested-2.spthy

------------------------------------------------------------------------------
analyzed: case-studies-sapic-regression/fairexchange-mini/ndc-nested-2.spthy

  output:          case-studies-sapic-regression/fairexchange-mini/ndc-nested-2.spthy.tmp
  processing time: 0.087733562s
  WARNING: 2 wellformedness check failed!
           The analysis results might be wrong!
  
  A_possible (exists-trace): verified (7 steps)
  B_possible (exists-trace): verified (7 steps)
  C_possible (exists-trace): verified (7 steps)
  no_progress (exists-trace): verified (3 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: case-studies-sapic-regression/fairexchange-mini/ndc-nested-2.spthy

  output:          case-studies-sapic-regression/fairexchange-mini/ndc-nested-2.spthy.tmp
  processing time: 0.087733562s
  WARNING: 2 wellformedness check failed!
           The analysis results might be wrong!
  
  A_possible (exists-trace): verified (7 steps)
  B_possible (exists-trace): verified (7 steps)
  C_possible (exists-trace): verified (7 steps)
  no_progress (exists-trace): verified (3 steps)

==============================================================================
*/
