theory mini1 begin

// Function signature and definition of the equational theory E

functions: check_rep/2, fst/1, get_rep/1, h/1, pair/2, pk/1,
           rep/2 [private], sign/2, snd/1, true/0, verify/3
equations:
    check_rep(rep(m, loc), loc) = m,
    fst(<x.1, x.2>) = x.1,
    get_rep(rep(m, loc)) = m,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

heuristic: l

section{* small example for progression function *}

rule (modulo E) Init_:
   [ Fr( ~prog_ ) ]
  --[ Init( ), ProgressFrom_( ~prog_ ) ]->
   [ State_( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) MessageID_rule_:
   [ Fr( ~x ) ] --> [ MID_Sender( ~x ), MID_Receiver( ~x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_r_m_1:
   [ State_( ~prog_ ), In( m ), MID_Receiver( mid_1 ) ]
  --[ Receive( mid_1, m ) ]->
   [ State_11( ~prog_, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_A_11:
   [ State_11( ~prog_, m ) ]
  --[ ProgressTo_111( ~prog_ ), Event( ), A( ) ]->
   [ State_111( ~prog_, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_111:
   [ State_111( ~prog_, m ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_n_2:
   [ State_( ~prog_ ), Fr( n ) ] --> [ State_21( ~prog_, n ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_r_n_21:
   [ MID_Sender( mid_21 ), State_21( ~prog_, n ) ]
  --[ Send( mid_21, n ) ]->
   [ Out( n ), State_211( ~prog_, n ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_B_211:
   [ State_211( ~prog_, n ) ]
  --[ ProgressTo_2111( ~prog_ ), Event( ), B( ) ]->
   [ State_2111( ~prog_, n ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_2111:
   [ State_2111( ~prog_, n ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction progress__to_111_or_2111:
  "∀ p #t1.
    (ProgressFrom_( p ) @ #t1) ⇒
    ((∃ #t2. ProgressTo_111( p ) @ #t2) ∨
     (∃ #t2. ProgressTo_2111( p ) @ #t2))"

restriction progress_init:
  "∃ #t. Init( ) @ #t"

restriction resilient:
  "∀ #i x y.
    (Send( x, y ) @ #i) ⇒ (∃ #j. (Receive( x, y ) @ #j) ∧ (#i < #j))"

lemma A_possible:
  exists-trace "∃ #t. A( ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t. (A( ) @ #t)"
*/
simplify
solve( State_11( ~prog_, m ) ▶₀ #t )
  case in_r_m_1
  solve( (∃ #t2. (ProgressTo_111( ~prog_ ) @ #t2))  ∥
         (∃ #t2. (ProgressTo_2111( ~prog_ ) @ #t2)) )
    case case_1
    solve( State_11( ~prog_, m.1 ) ▶₀ #t2 )
      case in_r_m_1
      SOLVED // trace found
    qed
  qed
qed

lemma B_impossible:
  all-traces "¬(∃ #t. B( ) @ #t)"
/*
guarded formula characterizing all counter-examples:
"∃ #t. (B( ) @ #t)"
*/
simplify
solve( State_211( ~prog_, n ) ▶₀ #t )
  case out_r_n_21
  solve( MID_Receiver( ~x ) ▶₂ #j )
    case MessageID_rule_
    by solve( State_( ~prog_ ) ▶₀ #j )
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.
SAPIC tool: 'sapic'
Checking availablity ... OK.


analyzing: case-studies-sapic-regression/fairexchange-mini/mini1.spthy

------------------------------------------------------------------------------
analyzed: case-studies-sapic-regression/fairexchange-mini/mini1.spthy

  output:          case-studies-sapic-regression/fairexchange-mini/mini1.spthy.tmp
  processing time: 0.06847547s
  A_possible (exists-trace): verified (5 steps)
  B_impossible (all-traces): verified (4 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: case-studies-sapic-regression/fairexchange-mini/mini1.spthy

  output:          case-studies-sapic-regression/fairexchange-mini/mini1.spthy.tmp
  processing time: 0.06847547s
  A_possible (exists-trace): verified (5 steps)
  B_impossible (all-traces): verified (4 steps)

==============================================================================
*/
