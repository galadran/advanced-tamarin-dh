theory mini3 begin

// Function signature and definition of the equational theory E

functions: check_rep/2, fst/1, get_rep/1, h/1, pair/2, pk/1,
           rep/2 [private], sign/2, snd/1, true/0, verify/3
equations:
    check_rep(rep(m, loc), loc) = m,
    fst(<x.1, x.2>) = x.1,
    get_rep(rep(m, loc)) = m,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

heuristic: l

section{* small example for progression function *}

rule (modulo E) Init_:
   [ ] --[ Init( ) ]-> [ State_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) MessageID_rule_:
   [ Fr( ~x ) ] --> [ MID_Sender( ~x ), MID_Receiver( ~x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_r_m_1:
   [ Fr( ~prog_11 ), State_( ), In( m ), MID_Receiver( mid_1 ) ]
  --[ ProgressFrom_11( ~prog_11 ), Receive( mid_1, m ) ]->
   [ State_11( ~prog_11, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_A_11:
   [ State_11( ~prog_11, m ) ]
  --[ ProgressTo_111( ~prog_11 ), Event( ), A( ) ]->
   [ State_111( ~prog_11, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_111:
   [ State_111( ~prog_11, m ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_2:
   [ State_( ) ] --> [ !Semistate_21( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_2:
   [ !Semistate_21( ) ] --> [ State_21( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_r_m_21:
   [ Fr( ~prog_211 ), State_21( ), In( m ), MID_Receiver( mid_21 ) ]
  --[ ProgressFrom_211( ~prog_211 ), Receive( mid_21, m ) ]->
   [ State_211( ~prog_211, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_B_211:
   [ State_211( ~prog_211, m ) ]
  --[ ProgressTo_2111( ~prog_211 ), Event( ), B( ) ]->
   [ State_2111( ~prog_211, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_2111:
   [ State_2111( ~prog_211, m ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction progress_211_to_2111:
  "∀ p #t1.
    (ProgressFrom_211( p ) @ #t1) ⇒ (∃ #t2. ProgressTo_2111( p ) @ #t2)"

restriction progress_11_to_111:
  "∀ p #t1.
    (ProgressFrom_11( p ) @ #t1) ⇒ (∃ #t2. ProgressTo_111( p ) @ #t2)"

restriction progress_init:
  "∃ #t. Init( ) @ #t"

restriction resilient:
  "∀ #i x y.
    (Send( x, y ) @ #i) ⇒ (∃ #j. (Receive( x, y ) @ #j) ∧ (#i < #j))"

lemma A_possible:
  exists-trace "∃ #t. A( ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t. (A( ) @ #t)"
*/
simplify
solve( State_11( ~prog_11, m ) ▶₀ #t )
  case in_r_m_1
  solve( State_11( ~prog_11, m.1 ) ▶₀ #t2 )
    case in_r_m_1
    SOLVED // trace found
  qed
qed

lemma B_possible:
  exists-trace "∃ #t. B( ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t. (B( ) @ #t)"
*/
simplify
solve( State_211( ~prog_211, m ) ▶₀ #t )
  case in_r_m_21
  solve( State_211( ~prog_211, m.1 ) ▶₀ #t2 )
    case in_r_m_21
    SOLVED // trace found
  qed
qed

lemma A_once:
  all-traces "¬(∃ #t1 #t2. ((A( ) @ #t1) ∧ (A( ) @ #t2)) ∧ (¬(#t1 = #t2)))"
/*
guarded formula characterizing all counter-examples:
"∃ #t1 #t2. (A( ) @ #t1) ∧ (A( ) @ #t2) ∧ ¬(#t1 = #t2)"
*/
simplify
solve( (#t1 < #t2)  ∥ (#t2 < #t1) )
  case case_1
  solve( State_11( ~prog_11, m ) ▶₀ #t1 )
    case in_r_m_1
    solve( State_11( ~prog_11.1, m.1 ) ▶₀ #t2 )
      case in_r_m_1
      by contradiction /* cyclic */
    qed
  qed
next
  case case_2
  solve( State_11( ~prog_11, m ) ▶₀ #t1 )
    case in_r_m_1
    solve( State_11( ~prog_11.1, m.1 ) ▶₀ #t2 )
      case in_r_m_1
      by contradiction /* cyclic */
    qed
  qed
qed

lemma B_multiple:
  exists-trace "∃ #t1 #t2. ((B( ) @ #t1) ∧ (B( ) @ #t2)) ∧ (¬(#t1 = #t2))"
/*
guarded formula characterizing all satisfying traces:
"∃ #t1 #t2. (B( ) @ #t1) ∧ (B( ) @ #t2) ∧ ¬(#t1 = #t2)"
*/
simplify
solve( (#t1 < #t2)  ∥ (#t2 < #t1) )
  case case_1
  solve( State_211( ~prog_211, m ) ▶₀ #t1 )
    case in_r_m_21
    solve( State_211( ~prog_211.1, m.1 ) ▶₀ #t2 )
      case in_r_m_21
      solve( State_211( ~prog_211, m.2 ) ▶₀ #t2.1 )
        case in_r_m_21
        solve( State_211( ~prog_211.1, m.2 ) ▶₀ #t2.1 )
          case in_r_m_21
          SOLVED // trace found
        qed
      qed
    qed
  qed
qed

/*
WARNING: the following wellformedness checks failed!

Restriction actions:
  restriction `resilient' references action 
    (ProtoFact Linear "Send" 2,2,Linear)
  but no rule has such an action.
*/

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.
SAPIC tool: 'sapic'
Checking availablity ... OK.


analyzing: case-studies-sapic-regression/fairexchange-mini/mini3.spthy

------------------------------------------------------------------------------
analyzed: case-studies-sapic-regression/fairexchange-mini/mini3.spthy

  output:          case-studies-sapic-regression/fairexchange-mini/mini3.spthy.tmp
  processing time: 0.078355893s
  WARNING: 1 wellformedness check failed!
           The analysis results might be wrong!
  
  A_possible (exists-trace): verified (4 steps)
  B_possible (exists-trace): verified (4 steps)
  A_once (all-traces): verified (8 steps)
  B_multiple (exists-trace): verified (7 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: case-studies-sapic-regression/fairexchange-mini/mini3.spthy

  output:          case-studies-sapic-regression/fairexchange-mini/mini3.spthy.tmp
  processing time: 0.078355893s
  WARNING: 1 wellformedness check failed!
           The analysis results might be wrong!
  
  A_possible (exists-trace): verified (4 steps)
  B_possible (exists-trace): verified (4 steps)
  A_once (all-traces): verified (8 steps)
  B_multiple (exists-trace): verified (7 steps)

==============================================================================
*/
