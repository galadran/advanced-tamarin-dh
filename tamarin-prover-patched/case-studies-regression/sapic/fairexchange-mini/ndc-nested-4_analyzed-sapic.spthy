theory nestedNDC3 begin

// Function signature and definition of the equational theory E

functions: check_rep/2, fst/1, get_rep/1, h/1, pair/2, pk/1,
           rep/2 [private], sign/2, snd/1, true/0, verify/3
equations:
    check_rep(rep(m, loc), loc) = m,
    fst(<x.1, x.2>) = x.1,
    get_rep(rep(m, loc)) = m,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

heuristic: l

section{* small example for progression function *}

rule (modulo E) Init_:
   [ Fr( ~prog_ ) ]
  --[ Init( ), ProgressFrom_( ~prog_ ) ]->
   [ State_( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) MessageID_rule_:
   [ Fr( ~x ) ] --> [ MID_Sender( ~x ), MID_Receiver( ~x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_A_1:
   [ State_( ~prog_ ) ]
  --[ ProgressTo_11( ~prog_ ), Event( ), A( ) ]->
   [ State_11( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_11:
   [ State_11( ~prog_ ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_21:
   [ State_( ~prog_ ) ] --> [ !Semistate_211( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_21:
   [ !Semistate_211( ~prog_ ) ] --> [ State_211( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_B_211:
   [ State_211( ~prog_ ) ]
  --[ ProgressTo_2111( ~prog_ ), Event( ), B( ) ]->
   [ State_2111( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_2111:
   [ State_2111( ~prog_ ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_22:
   [ State_( ~prog_ ) ] --> [ !Semistate_221( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_22:
   [ !Semistate_221( ~prog_ ) ] --> [ State_221( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_C_221:
   [ State_221( ~prog_ ) ]
  --[ ProgressTo_2211( ~prog_ ), Event( ), C( ) ]->
   [ State_2211( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_2211:
   [ State_2211( ~prog_ ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction progress__to_11_or_2111_or_2211:
  "∀ p #t1.
    (ProgressFrom_( p ) @ #t1) ⇒
    (((∃ #t2. ProgressTo_11( p ) @ #t2) ∨
      (∃ #t2. ProgressTo_2111( p ) @ #t2)) ∨
     (∃ #t2. ProgressTo_2211( p ) @ #t2))"

restriction progress_init:
  "∃ #t. Init( ) @ #t"

restriction resilient:
  "∀ #i x y.
    (Send( x, y ) @ #i) ⇒ (∃ #j. (Receive( x, y ) @ #j) ∧ (#i < #j))"

lemma A_possible:
  exists-trace "∃ #t. A( ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t. (A( ) @ #t)"
*/
simplify
solve( State_( ~prog_ ) ▶₀ #t )
  case Init_
  solve( (∃ #t2. (ProgressTo_11( ~prog_ ) @ #t2))  ∥
         (∃ #t2. (ProgressTo_2111( ~prog_ ) @ #t2))  ∥
         (∃ #t2. (ProgressTo_2211( ~prog_ ) @ #t2)) )
    case case_1
    solve( State_( ~prog_ ) ▶₀ #t2 )
      case Init_
      SOLVED // trace found
    qed
  qed
qed

lemma B_possible:
  exists-trace "∃ #t. B( ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t. (B( ) @ #t)"
*/
simplify
solve( State_211( ~prog_ ) ▶₀ #t )
  case Rep_1_21
  solve( (∃ #t2. (ProgressTo_11( ~prog_ ) @ #t2))  ∥
         (∃ #t2. (ProgressTo_2111( ~prog_ ) @ #t2))  ∥
         (∃ #t2. (ProgressTo_2211( ~prog_ ) @ #t2)) )
    case case_2
    solve( State_211( ~prog_ ) ▶₀ #t2 )
      case Rep_1_21
      SOLVED // trace found
    qed
  qed
qed

lemma C_possible:
  exists-trace "∃ #t. C( ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t. (C( ) @ #t)"
*/
simplify
solve( State_221( ~prog_ ) ▶₀ #t )
  case Rep_1_22
  solve( (∃ #t2. (ProgressTo_11( ~prog_ ) @ #t2))  ∥
         (∃ #t2. (ProgressTo_2111( ~prog_ ) @ #t2))  ∥
         (∃ #t2. (ProgressTo_2211( ~prog_ ) @ #t2)) )
    case case_3
    solve( State_221( ~prog_ ) ▶₀ #t2 )
      case Rep_1_22
      SOLVED // trace found
    qed
  qed
qed

lemma oneEventAlways:
  all-traces "((∃ #t. A( ) @ #t) ∨ (∃ #t. B( ) @ #t)) ∨ (∃ #t. C( ) @ #t)"
/*
guarded formula characterizing all counter-examples:
"(∀ #t. (A( ) @ #t) ⇒ ⊥) ∧
 (∀ #t. (B( ) @ #t) ⇒ ⊥) ∧
 (∀ #t. (C( ) @ #t) ⇒ ⊥)"
*/
simplify
solve( (∃ #t2. (ProgressTo_11( ~prog_ ) @ #t2))  ∥
       (∃ #t2. (ProgressTo_2111( ~prog_ ) @ #t2))  ∥
       (∃ #t2. (ProgressTo_2211( ~prog_ ) @ #t2)) )
  case case_1
  by contradiction /* from formulas */
next
  case case_2
  by contradiction /* from formulas */
next
  case case_3
  by contradiction /* from formulas */
qed

/*
WARNING: the following wellformedness checks failed!

Restriction actions:
  restriction `resilient' references action 
    (ProtoFact Linear "Receive" 2,2,Linear)
  but no rule has such an action.
  
  restriction `resilient' references action 
    (ProtoFact Linear "Send" 2,2,Linear)
  but no rule has such an action.
*/

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.
SAPIC tool: 'sapic'
Checking availablity ... OK.


analyzing: case-studies-sapic-regression/fairexchange-mini/ndc-nested-4.spthy

------------------------------------------------------------------------------
analyzed: case-studies-sapic-regression/fairexchange-mini/ndc-nested-4.spthy

  output:          case-studies-sapic-regression/fairexchange-mini/ndc-nested-4.spthy.tmp
  processing time: 0.076316439s
  WARNING: 2 wellformedness check failed!
           The analysis results might be wrong!
  
  A_possible (exists-trace): verified (5 steps)
  B_possible (exists-trace): verified (5 steps)
  C_possible (exists-trace): verified (5 steps)
  oneEventAlways (all-traces): verified (5 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: case-studies-sapic-regression/fairexchange-mini/ndc-nested-4.spthy

  output:          case-studies-sapic-regression/fairexchange-mini/ndc-nested-4.spthy.tmp
  processing time: 0.076316439s
  WARNING: 2 wellformedness check failed!
           The analysis results might be wrong!
  
  A_possible (exists-trace): verified (5 steps)
  B_possible (exists-trace): verified (5 steps)
  C_possible (exists-trace): verified (5 steps)
  oneEventAlways (all-traces): verified (5 steps)

==============================================================================
*/
