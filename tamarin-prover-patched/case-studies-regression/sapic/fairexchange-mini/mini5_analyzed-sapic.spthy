theory mini5 begin

// Function signature and definition of the equational theory E

functions: check_rep/2, fst/1, get_rep/1, h/1, pair/2, pk/1,
           rep/2 [private], sign/2, snd/1, true/0, verify/3
equations:
    check_rep(rep(m, loc), loc) = m,
    fst(<x.1, x.2>) = x.1,
    get_rep(rep(m, loc)) = m,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

heuristic: l

section{* small example for progression function *}

rule (modulo E) Init_:
   [ Fr( ~prog_ ) ]
  --[ Init( ), ProgressFrom_( ~prog_ ) ]->
   [ State_( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) MessageID_rule_:
   [ Fr( ~x ) ] --> [ MID_Sender( ~x ), MID_Receiver( ~x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_s_:
   [ State_( ~prog_ ), Fr( s ) ] --> [ State_1( ~prog_, s ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_1:
   [ State_1( ~prog_, s ) ]
  -->
   [ State_11( ~prog_, s ), State_12( ~prog_, s ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert_s_HELLO__11:
   [ State_11( ~prog_, s ) ]
  --[ ProgressTo_111( ~prog_ ), Insert( s, 'HELLO' ) ]->
   [ State_111( ~prog_, s ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_111:
   [ State_111( ~prog_, s ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_s_as_x_0_12:
   [ State_12( ~prog_, s ) ]
  --[ IsIn( s, x ) ]->
   [ State_121( ~prog_, s, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_s_as_x_1_12:
   [ State_12( ~prog_, s ) ]
  --[ IsNotSet( s ) ]->
   [ State_122( ~prog_, s ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqx_HELLO__0_121:
   [ State_121( ~prog_, s, x ) ]
  --[ Pred_eq( x, 'HELLO' ) ]->
   [ State_1211( ~prog_, s, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqx_HELLO__1_121:
   [ State_121( ~prog_, s, x ) ]
  --[ Pred_not_eq( x, 'HELLO' ) ]->
   [ State_1212( ~prog_, s, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_A_1211:
   [ State_1211( ~prog_, s, x ) ]
  --[ ProgressTo_12111( ~prog_ ), Event( ), A( ) ]->
   [ State_12111( ~prog_, s, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_12111:
   [ State_12111( ~prog_, s, x ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_B_1212:
   [ State_1212( ~prog_, s, x ) ]
  --[ ProgressTo_12121( ~prog_ ), Event( ), B( ) ]->
   [ State_12121( ~prog_, s, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_12121:
   [ State_12121( ~prog_, s, x ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_C_122:
   [ State_122( ~prog_, s ) ]
  --[ ProgressTo_1221( ~prog_ ), Event( ), C( ) ]->
   [ State_1221( ~prog_, s ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1221:
   [ State_1221( ~prog_, s ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction set_in:
  "∀ x y #t3.
    (IsIn( x, y ) @ #t3) ⇒
    (∃ #t2.
      (((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ∧
       (∀ #t1. (Delete( x ) @ #t1) ⇒ ((#t1 < #t2) ∨ (#t3 < #t1)))) ∧
      (∀ #t1 yp.
        (Insert( x, yp ) @ #t1) ⇒ (((#t1 < #t2) ∨ (#t1 = #t2)) ∨ (#t3 < #t1))))"

restriction set_notin:
  "∀ x #t3.
    (IsNotSet( x ) @ #t3) ⇒
    ((∀ #t1 y. (Insert( x, y ) @ #t1) ⇒ (#t3 < #t1)) ∨
     (∃ #t1.
       ((Delete( x ) @ #t1) ∧ (#t1 < #t3)) ∧
       (∀ #t2 y. ((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ⇒ (#t2 < #t1))))"

restriction predicate_eq:
  "∀ #i a b. (Pred_eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction predicate_not_eq:
  "∀ #i a b. (Pred_not_eq( a, b ) @ #i) ⇒ (¬(a = b))"
  // safety formula

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction progress__to_12111_or_12121_or_1221:
  "∀ p #t1.
    (ProgressFrom_( p ) @ #t1) ⇒
    (((∃ #t2. ProgressTo_12111( p ) @ #t2) ∨
      (∃ #t2. ProgressTo_12121( p ) @ #t2)) ∨
     (∃ #t2. ProgressTo_1221( p ) @ #t2))"

restriction progress__to_111:
  "∀ p #t1.
    (ProgressFrom_( p ) @ #t1) ⇒ (∃ #t2. ProgressTo_111( p ) @ #t2)"

restriction progress_init:
  "∃ #t. Init( ) @ #t"

restriction resilient:
  "∀ #i x y.
    (Send( x, y ) @ #i) ⇒ (∃ #j. (Receive( x, y ) @ #j) ∧ (#i < #j))"

lemma A_possible:
  exists-trace "∃ #t. A( ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t. (A( ) @ #t)"
*/
simplify
solve( State_1211( ~prog_, s, x ) ▶₀ #t )
  case if_eqx_HELLO__0_121
  solve( State_11( ~prog_, s ) ▶₀ #t2 )
    case Par_1
    solve( (#t2 < #t2.2)  ∥ (#t2 = #t2.2)  ∥ (#vr.1 < #t2) )
      case case_2
      solve( State_11( ~prog_, s ) ▶₀ #t2.1 )
        case Par_1
        solve( (∃ #t2. (ProgressTo_12111( ~prog_ ) @ #t2))  ∥
               (∃ #t2. (ProgressTo_12121( ~prog_ ) @ #t2))  ∥
               (∃ #t2. (ProgressTo_1221( ~prog_ ) @ #t2)) )
          case case_1
          solve( State_1211( ~prog_, s, x ) ▶₀ #t2.1 )
            case if_eqx_HELLO__0_121
            solve( (#t2 < #t2.1)  ∥ (#t2 = #t2.1) )
              case case_2
              SOLVED // trace found
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma B_impossible:
  all-traces "¬(∃ #t. B( ) @ #t)"
/*
guarded formula characterizing all counter-examples:
"∃ #t. (B( ) @ #t)"
*/
simplify
solve( State_1212( ~prog_, s, x ) ▶₀ #t )
  case if_eqx_HELLO__1_121
  by contradiction /* from formulas */
qed

lemma C_possible:
  exists-trace "∃ #t. C( ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t. (C( ) @ #t)"
*/
simplify
solve( State_122( ~prog_, s ) ▶₀ #t )
  case lookup_s_as_x_1_12
  solve( (∀ #t1 y. (Insert( ~n, y ) @ #t1) ⇒ #vr < #t1)  ∥
         (∃ #t1.
           (Delete( ~n ) @ #t1)
          ∧
           (#t1 < #vr) ∧
           (∀ #t2 y. (Insert( ~n, y ) @ #t2) ⇒ ((¬(#t2 < #vr)) ∨ (#t2 < #t1)))) )
    case case_1
    solve( State_11( ~prog_, s ) ▶₀ #t2 )
      case Par_1
      solve( State_11( ~prog_, s ) ▶₀ #t2.1 )
        case Par_1
        solve( (∃ #t2. (ProgressTo_12111( ~prog_ ) @ #t2))  ∥
               (∃ #t2. (ProgressTo_12121( ~prog_ ) @ #t2))  ∥
               (∃ #t2. (ProgressTo_1221( ~prog_ ) @ #t2)) )
          case case_3
          solve( State_122( ~prog_, s ) ▶₀ #t2.1 )
            case lookup_s_as_x_1_12
            SOLVED // trace found
          qed
        qed
      qed
    qed
  qed
qed

/*
WARNING: the following wellformedness checks failed!

unbound:
  rule `lookup_s_as_x_0_12' has unbound variables: 
    x

Restriction actions:
  restriction `set_in' references action 
    (ProtoFact Linear "Delete" 1,1,Linear)
  but no rule has such an action.
  
  restriction `set_notin' references action 
    (ProtoFact Linear "Delete" 1,1,Linear)
  but no rule has such an action.
  
  restriction `resilient' references action 
    (ProtoFact Linear "Receive" 2,2,Linear)
  but no rule has such an action.
  
  restriction `resilient' references action 
    (ProtoFact Linear "Send" 2,2,Linear)
  but no rule has such an action.
*/

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.
SAPIC tool: 'sapic'
Checking availablity ... OK.


analyzing: case-studies-sapic-regression/fairexchange-mini/mini5.spthy

------------------------------------------------------------------------------
analyzed: case-studies-sapic-regression/fairexchange-mini/mini5.spthy

  output:          case-studies-sapic-regression/fairexchange-mini/mini5.spthy.tmp
  processing time: 0.163225287s
  WARNING: 5 wellformedness check failed!
           The analysis results might be wrong!
  
  A_possible (exists-trace): verified (9 steps)
  B_impossible (all-traces): verified (3 steps)
  C_possible (exists-trace): verified (8 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: case-studies-sapic-regression/fairexchange-mini/mini5.spthy

  output:          case-studies-sapic-regression/fairexchange-mini/mini5.spthy.tmp
  processing time: 0.163225287s
  WARNING: 5 wellformedness check failed!
           The analysis results might be wrong!
  
  A_possible (exists-trace): verified (9 steps)
  B_impossible (all-traces): verified (3 steps)
  C_possible (exists-trace): verified (8 steps)

==============================================================================
*/
