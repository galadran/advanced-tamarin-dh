theory mini2 begin

// Function signature and definition of the equational theory E

functions: check_rep/2, fst/1, get_rep/1, h/1, pair/2, pk/1,
           rep/2 [private], sign/2, snd/1, true/0, verify/3
equations:
    check_rep(rep(m, loc), loc) = m,
    fst(<x.1, x.2>) = x.1,
    get_rep(rep(m, loc)) = m,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

heuristic: l

section{* small example for progression function *}

rule (modulo E) Init_:
   [ Fr( ~prog_ ) ]
  --[ Init( ), ProgressFrom_( ~prog_ ) ]->
   [ State_( ~prog_ ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) MessageID_rule_:
   [ Fr( ~x ) ] --> [ MID_Sender( ~x ), MID_Receiver( ~x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_k_:
   [ State_( ~prog_ ), Fr( k ) ]
  --[ ProgressTo_1( ~prog_ ) ]->
   [ State_1( ~prog_, k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_r_signm_k_11:
   [
   Fr( ~prog_111 ), State_1( ~prog_, k ), In( sign(m, k) ),
   MID_Receiver( mid_11 )
   ]
  --[ ProgressFrom_111( ~prog_111 ), Receive( mid_11, sign(m, k) ) ]->
   [ State_111( ~prog_, ~prog_111, k, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_A_111:
   [ State_111( ~prog_, ~prog_111, k, m ) ]
  --[ ProgressTo_1111( ~prog_111 ), Event( ), A( ) ]->
   [ State_1111( ~prog_, ~prog_111, k, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111:
   [ State_1111( ~prog_, ~prog_111, k, m ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_r_m_12:
   [ Fr( ~prog_121 ), State_1( ~prog_, k ), In( m ), MID_Receiver( mid_12 )
   ]
  --[ ProgressFrom_121( ~prog_121 ), Receive( mid_12, m ) ]->
   [ State_121( ~prog_, ~prog_121, k, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_c_m_121:
   [ State_121( ~prog_, ~prog_121, k, m ), In( 'c' ) ]
  --[ ChannelInEvent( 'c' ) ]->
   [ State_1211( ~prog_, ~prog_121, k, m ), Out( m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_B_1211:
   [ State_1211( ~prog_, ~prog_121, k, m ) ]
  --[ ProgressTo_12111( ~prog_121 ), Event( ), B( ) ]->
   [ State_12111( ~prog_, ~prog_121, k, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_12111:
   [ State_12111( ~prog_, ~prog_121, k, m ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction progress_121_to_12111:
  "∀ p #t1.
    (ProgressFrom_121( p ) @ #t1) ⇒ (∃ #t2. ProgressTo_12111( p ) @ #t2)"

restriction progress_111_to_1111:
  "∀ p #t1.
    (ProgressFrom_111( p ) @ #t1) ⇒ (∃ #t2. ProgressTo_1111( p ) @ #t2)"

restriction progress__to_1:
  "∀ p #t1. (ProgressFrom_( p ) @ #t1) ⇒ (∃ #t2. ProgressTo_1( p ) @ #t2)"

restriction progress_init:
  "∃ #t. Init( ) @ #t"

restriction resilient:
  "∀ #i x y.
    (Send( x, y ) @ #i) ⇒ (∃ #j. (Receive( x, y ) @ #j) ∧ (#i < #j))"

lemma A_impossible:
  all-traces "¬(∃ #t. A( ) @ #t)"
/*
guarded formula characterizing all counter-examples:
"∃ #t. (A( ) @ #t)"
*/
simplify
by solve( State_111( ~prog_, ~prog_111, k, m ) ▶₀ #t )

lemma B_possible:
  exists-trace "∃ #t. B( ) @ #t"
/*
guarded formula characterizing all satisfying traces:
"∃ #t. (B( ) @ #t)"
*/
simplify
solve( State_1211( ~prog_, ~prog_121, k, m ) ▶₀ #t )
  case out_c_m_121
  solve( State_( ~prog_ ) ▶₀ #t2 )
    case Init_
    solve( State_( ~prog_ ) ▶₀ #t2.1 )
      case Init_
      solve( State_1211( ~prog_.1, ~prog_121, k, m.1 ) ▶₀ #t2.1 )
        case out_c_m_121
        solve( State_( ~prog_ ) ▶₀ #t2.1 )
          case Init_
          SOLVED // trace found
        qed
      qed
    qed
  qed
qed

/*
WARNING: the following wellformedness checks failed!

Restriction actions:
  restriction `resilient' references action 
    (ProtoFact Linear "Send" 2,2,Linear)
  but no rule has such an action.
*/

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.
SAPIC tool: 'sapic'
Checking availablity ... OK.


analyzing: case-studies-sapic-regression/fairexchange-mini/mini2.spthy

------------------------------------------------------------------------------
analyzed: case-studies-sapic-regression/fairexchange-mini/mini2.spthy

  output:          case-studies-sapic-regression/fairexchange-mini/mini2.spthy.tmp
  processing time: 0.097909564s
  WARNING: 1 wellformedness check failed!
           The analysis results might be wrong!
  
  A_impossible (all-traces): verified (2 steps)
  B_possible (exists-trace): verified (7 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: case-studies-sapic-regression/fairexchange-mini/mini2.spthy

  output:          case-studies-sapic-regression/fairexchange-mini/mini2.spthy.tmp
  processing time: 0.097909564s
  WARNING: 1 wellformedness check failed!
           The analysis results might be wrong!
  
  A_impossible (all-traces): verified (2 steps)
  B_possible (exists-trace): verified (7 steps)

==============================================================================
*/
