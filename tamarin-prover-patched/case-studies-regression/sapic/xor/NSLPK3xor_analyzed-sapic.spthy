theory NSLPK3XOR begin

// Function signature and definition of the equational theory E

builtins: xor
functions: adec/2, aenc/2, check_rep/2, fst/1, get_rep/1, pair/2, pk/1,
           rep/2 [private], snd/1
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    check_rep(rep(m, loc), loc) = m,
    fst(<x.1, x.2>) = x.1,
    get_rep(rep(m, loc)) = m,
    snd(<x.1, x.2>) = x.2

rule (modulo E) Init_:
   [ ] --[ Init( ) ]-> [ State_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_:
   [ State_( ) ] --> [ State_1( ), State_2( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_1:
   [ State_1( ) ] --> [ State_11( ), State_12( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_11:
   [ State_11( ) ] --> [ State_111( ), State_112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_111:
   [ State_111( ) ] --> [ !Semistate_1111( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_111:
   [ !Semistate_1111( ) ] --> [ State_1111( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_A_1111:
   [ State_1111( ), In( $A ) ] --> [ State_11111( $A ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_ltkA_11111:
   [ State_11111( $A ), Fr( ~ltkA ) ] --> [ State_111111( $A, ~ltkA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Register_A_111111:
   [ State_111111( $A, ~ltkA ) ]
  --[ Event( ), Register( $A ) ]->
   [ State_1111111( $A, ~ltkA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_A_1111111:
   [ State_1111111( $A, ~ltkA ), Fr( ~lock6 ) ]
  --[ Lock( ~lock6, $A ) ]->
   [ State_11111111( $A, ~lock6, ~ltkA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert_Ltk_A_ltkA_11111111:
   [ State_11111111( $A, ~lock6, ~ltkA ) ]
  --[ Insert( <'Ltk', $A>, ~ltkA ) ]->
   [ State_111111111( $A, ~lock6, ~ltkA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert_Pk_A_pkltkA_111111111:
   [ State_111111111( $A, ~lock6, ~ltkA ) ]
  --[ Insert( <'Pk', $A>, pk(~ltkA) ) ]->
   [ State_1111111111( $A, ~lock6, ~ltkA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_A_1111111111:
   [ State_1111111111( $A, ~lock6, ~ltkA ) ]
  --[ Unlock( ~lock6, $A ) ]->
   [ State_11111111111( $A, ~lock6, ~ltkA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_pkltkA_11111111111:
   [ State_11111111111( $A, ~lock6, ~ltkA ) ]
  -->
   [ State_111111111111( $A, ~lock6, ~ltkA ), Out( pk(~ltkA) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_111111111111:
   [ State_111111111111( $A, ~lock6, ~ltkA ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_112:
   [ State_112( ) ] --> [ !Semistate_1121( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_112:
   [ !Semistate_1121( ) ] --> [ State_1121( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_A_1121:
   [ State_1121( ), In( A ) ] --> [ State_11211( A ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_Ltk_A_as_ltkA_0_11211:
   [ State_11211( A ) ]
  --[ IsIn( <'Ltk', A>, ltkA ) ]->
   [ State_112111( A, ltkA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_Ltk_A_as_ltkA_1_11211:
   [ State_11211( A ) ] --[ IsNotSet( <'Ltk', A> ) ]-> [ State_112112( A ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_RevLtkA_112111:
   [ State_112111( A, ltkA ) ]
  --[ Event( ), RevLtk( A ) ]->
   [ State_1121111( A, ltkA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_ltkA_1121111:
   [ State_1121111( A, ltkA ) ]
  -->
   [ State_11211111( A, ltkA ), Out( ltkA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_11211111:
   [ State_11211111( A, ltkA ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_112112:
   [ State_112112( A ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_12:
   [ State_12( ) ] --> [ !Semistate_121( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_12:
   [ !Semistate_121( ) ] --> [ State_121( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_I_R__121:
   [ State_121( ), In( <$I, $R> ) ] --> [ State_1211( $I, $R ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_Pk_R_as_pkR_0_1211:
   [ State_1211( $I, $R ) ]
  --[ IsIn( <'Pk', $R>, pkR ) ]->
   [ State_12111( $I, $R, pkR ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_Pk_R_as_pkR_1_1211:
   [ State_1211( $I, $R ) ]
  --[ IsNotSet( <'Pk', $R> ) ]->
   [ State_12112( $I, $R ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_ni_12111:
   [ State_12111( $I, $R, pkR ), Fr( ~ni ) ]
  -->
   [ State_121111( $I, $R, ~ni, pkR ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_OUT_I_1aenc_1_ni_I_pkR_121111:
   [ State_121111( $I, $R, ~ni, pkR ) ]
  --[ Event( ), OUT_I_1( aenc(<'1', ~ni, $I>, pkR) ) ]->
   [ State_1211111( $I, $R, ~ni, pkR ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_aenc_1_ni_I_pkR_1211111:
   [ State_1211111( $I, $R, ~ni, pkR ) ]
  -->
   [ State_12111111( $I, $R, ~ni, pkR ), Out( aenc(<'1', ~ni, $I>, pkR) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_Ltk_I_as_ltkI_0_12111111:
   [ State_12111111( $I, $R, ~ni, pkR ) ]
  --[ IsIn( <'Ltk', $I>, ltkI ) ]->
   [ State_121111111( $I, $R, ~ni, ltkI, pkR ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_Ltk_I_as_ltkI_1_12111111:
   [ State_12111111( $I, $R, ~ni, pkR ) ]
  --[ IsNotSet( <'Ltk', $I> ) ]->
   [ State_121111112( $I, $R, ~ni, pkR ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_aenc_2_ni_x_pkltkI_121111111:
   [
   State_121111111( $I, $R, ~ni, ltkI, pkR ),
   In( aenc(<'2', ~ni, x>, pk(ltkI)) )
   ]
  -->
   [ State_1211111111( $I, $R, ~ni, ltkI, pkR, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_IN_I_2_nrx_XOR_R_aenc_2_ni_x_pkltkI_1211111111:
   [ State_1211111111( $I, $R, ~ni, ltkI, pkR, x ) ]
  --[ Event( ), IN_I_2_nr( ($R⊕x), aenc(<'2', ~ni, x>, pk(ltkI)) ) ]->
   [ State_12111111111( $I, $R, ~ni, ltkI, pkR, x ) ]

  /*
  rule (modulo AC) event_IN_I_2_nrx_XOR_R_aenc_2_ni_x_pkltkI_1211111111:
     [ State_1211111111( $I, $R, ~ni, ltkI, pkR, x ) ]
    --[ Event( ), IN_I_2_nr( z, aenc(<'2', ~ni, x>, pk(ltkI)) ) ]->
     [ State_12111111111( $I, $R, ~ni, ltkI, pkR, x ) ]
    variants (modulo AC)
    1. $R    = $R.9
       x     = $R.9
       z     = zero
    
    2. $R    = $R.9
       x     = x.13
       z     = ($R.9⊕x.13)
    
    3. $R    = $R.9
       x     = zero
       z     = $R.9
    
    4. $R    = $R.13
       x     = ($R.13⊕z.18)
       z     = z.18
  */

rule (modulo E) event_Commit_I_R_init_ni_x_XOR_R__12111111111:
   [ State_12111111111( $I, $R, ~ni, ltkI, pkR, x ) ]
  --[ Event( ), Commit( $I, $R, <'init', ~ni, ($R⊕x)> ) ]->
   [ State_121111111111( $I, $R, ~ni, ltkI, pkR, x ) ]

  /*
  rule (modulo AC) event_Commit_I_R_init_ni_x_XOR_R__12111111111:
     [ State_12111111111( $I, $R, ~ni, ltkI, pkR, x ) ]
    --[ Event( ), Commit( $I, $R, <'init', ~ni, z> ) ]->
     [ State_121111111111( $I, $R, ~ni, ltkI, pkR, x ) ]
    variants (modulo AC)
    1. $R    = $R.10
       x     = $R.10
       z     = zero
    
    2. $R    = $R.10
       x     = x.14
       z     = ($R.10⊕x.14)
    
    3. $R    = $R.10
       x     = zero
       z     = $R.10
    
    4. $R    = $R.14
       x     = ($R.14⊕z.20)
       z     = z.20
  */

rule (modulo E) event_Running_R_I_resp_ni_x_XOR_R__121111111111:
   [ State_121111111111( $I, $R, ~ni, ltkI, pkR, x ) ]
  --[ Event( ), Running( $R, $I, <'resp', ~ni, ($R⊕x)> ) ]->
   [ State_1211111111111( $I, $R, ~ni, ltkI, pkR, x ) ]

  /*
  rule (modulo AC) event_Running_R_I_resp_ni_x_XOR_R__121111111111:
     [ State_121111111111( $I, $R, ~ni, ltkI, pkR, x ) ]
    --[ Event( ), Running( $R, $I, <'resp', ~ni, z> ) ]->
     [ State_1211111111111( $I, $R, ~ni, ltkI, pkR, x ) ]
    variants (modulo AC)
    1. $R    = $R.10
       x     = $R.10
       z     = zero
    
    2. $R    = $R.10
       x     = x.14
       z     = ($R.10⊕x.14)
    
    3. $R    = $R.10
       x     = zero
       z     = $R.10
    
    4. $R    = $R.14
       x     = ($R.14⊕z.20)
       z     = z.20
  */

rule (modulo E) out_aenc_3_x_XOR_R_pkR_1211111111111:
   [ State_1211111111111( $I, $R, ~ni, ltkI, pkR, x ) ]
  -->
   [
   State_12111111111111( $I, $R, ~ni, ltkI, pkR, x ),
   Out( aenc(<'3', ($R⊕x)>, pkR) )
   ]

  /*
  rule (modulo AC) out_aenc_3_x_XOR_R_pkR_1211111111111:
     [ State_1211111111111( $I, $R, ~ni, ltkI, pkR, x ) ]
    -->
     [
     State_12111111111111( $I, $R, ~ni, ltkI, pkR, x ),
     Out( aenc(<'3', z>, pkR) )
     ]
    variants (modulo AC)
    1. $R    = $R.10
       x     = $R.10
       z     = zero
    
    2. $R    = $R.10
       x     = x.14
       z     = ($R.10⊕x.14)
    
    3. $R    = $R.10
       x     = zero
       z     = $R.10
    
    4. $R    = $R.14
       x     = ($R.14⊕z.20)
       z     = z.20
  */

rule (modulo E) event_Secret_I_R_x_XOR_R_12111111111111:
   [ State_12111111111111( $I, $R, ~ni, ltkI, pkR, x ) ]
  --[ Event( ), Secret( $I, $R, ($R⊕x) ) ]->
   [ State_121111111111111( $I, $R, ~ni, ltkI, pkR, x ) ]

  /*
  rule (modulo AC) event_Secret_I_R_x_XOR_R_12111111111111:
     [ State_12111111111111( $I, $R, ~ni, ltkI, pkR, x ) ]
    --[ Event( ), Secret( $I, $R, z ) ]->
     [ State_121111111111111( $I, $R, ~ni, ltkI, pkR, x ) ]
    variants (modulo AC)
    1. $R    = $R.8
       x     = x.8
       z     = ($R.8⊕x.8)
    
    2. $R    = $R.8
       x     = zero
       z     = $R.8
    
    3. $R    = $x.8
       x     = $x.8
       z     = zero
    
    4. $R    = $x.8
       x     = ($x.8⊕x.12)
       z     = x.12
  */

rule (modulo E) event_Secret_I_R_ni_121111111111111:
   [ State_121111111111111( $I, $R, ~ni, ltkI, pkR, x ) ]
  --[ Event( ), Secret( $I, $R, ~ni ) ]->
   [ State_1211111111111111( $I, $R, ~ni, ltkI, pkR, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1211111111111111:
   [ State_1211111111111111( $I, $R, ~ni, ltkI, pkR, x ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_121111112:
   [ State_121111112( $I, $R, ~ni, pkR ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_12112:
   [ State_12112( $I, $R ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_2:
   [ State_2( ) ] --> [ !Semistate_21( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_2:
   [ !Semistate_21( ) ] --> [ State_21( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_R_21:
   [ State_21( ), In( $R ) ] --> [ State_211( $R ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_Ltk_R_as_ltkR_0_211:
   [ State_211( $R ) ]
  --[ IsIn( <'Ltk', $R>, ltkR ) ]->
   [ State_2111( $R, ltkR ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_Ltk_R_as_ltkR_1_211:
   [ State_211( $R ) ] --[ IsNotSet( <'Ltk', $R> ) ]-> [ State_2112( $R ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_aenc_1_ni_I_pkltkR_2111:
   [ State_2111( $R, ltkR ), In( aenc(<'1', ni, $I>, pk(ltkR)) ) ]
  -->
   [ State_21111( $I, $R, ltkR, ni ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_Pk_I_as_pkI_0_21111:
   [ State_21111( $I, $R, ltkR, ni ) ]
  --[ IsIn( <'Pk', $I>, pkI ) ]->
   [ State_211111( $I, $R, ltkR, ni, pkI ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_Pk_I_as_pkI_1_21111:
   [ State_21111( $I, $R, ltkR, ni ) ]
  --[ IsNotSet( <'Pk', $I> ) ]->
   [ State_211112( $I, $R, ltkR, ni ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_nr_211111:
   [ State_211111( $I, $R, ltkR, ni, pkI ), Fr( ~nr ) ]
  -->
   [ State_2111111( $I, $R, ~nr, ltkR, ni, pkI ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_IN_R_1_nini_aenc_1_ni_I_pkltkR_2111111:
   [ State_2111111( $I, $R, ~nr, ltkR, ni, pkI ) ]
  --[ Event( ), IN_R_1_ni( ni, aenc(<'1', ni, $I>, pk(ltkR)) ) ]->
   [ State_21111111( $I, $R, ~nr, ltkR, ni, pkI ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_OUT_R_1aenc_2_ni_nr_XOR_R_pkI_21111111:
   [ State_21111111( $I, $R, ~nr, ltkR, ni, pkI ) ]
  --[ Event( ), OUT_R_1( aenc(<'2', ni, ($R⊕~nr)>, pkI) ) ]->
   [ State_211111111( $I, $R, ~nr, ltkR, ni, pkI ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Running_I_R_init_ni_nr__211111111:
   [ State_211111111( $I, $R, ~nr, ltkR, ni, pkI ) ]
  --[ Event( ), Running( $I, $R, <'init', ni, ~nr> ) ]->
   [ State_2111111111( $I, $R, ~nr, ltkR, ni, pkI ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_aenc_2_ni_nr_XOR_R_pkI_2111111111:
   [ State_2111111111( $I, $R, ~nr, ltkR, ni, pkI ) ]
  -->
   [
   State_21111111111( $I, $R, ~nr, ltkR, ni, pkI ),
   Out( aenc(<'2', ni, ($R⊕~nr)>, pkI) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_aenc_3_nr_pkltkR_21111111111:
   [
   State_21111111111( $I, $R, ~nr, ltkR, ni, pkI ),
   In( aenc(<'3', ~nr>, pk(ltkR)) )
   ]
  -->
   [ State_211111111111( $I, $R, ~nr, ltkR, ni, pkI ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Commit_R_I_resp_ni_nr__211111111111:
   [ State_211111111111( $I, $R, ~nr, ltkR, ni, pkI ) ]
  --[ Event( ), Commit( $R, $I, <'resp', ni, ~nr> ) ]->
   [ State_2111111111111( $I, $R, ~nr, ltkR, ni, pkI ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Secret_R_I_nr_2111111111111:
   [ State_2111111111111( $I, $R, ~nr, ltkR, ni, pkI ) ]
  --[ Event( ), Secret( $R, $I, ~nr ) ]->
   [ State_21111111111111( $I, $R, ~nr, ltkR, ni, pkI ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Secret_R_I_ni_21111111111111:
   [ State_21111111111111( $I, $R, ~nr, ltkR, ni, pkI ) ]
  --[ Event( ), Secret( $R, $I, ni ) ]->
   [ State_211111111111111( $I, $R, ~nr, ltkR, ni, pkI ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_211111111111111:
   [ State_211111111111111( $I, $R, ~nr, ltkR, ni, pkI ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_211112:
   [ State_211112( $I, $R, ltkR, ni ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_2112:
   [ State_2112( $R ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction onekeypername:
  "¬(∃ A #i #j.
      ((Register( A ) @ #i) ∧ (Register( A ) @ #j)) ∧ (¬(#i = #j)))"
  // safety formula

restriction set_in:
  "∀ x y #t3.
    (IsIn( x, y ) @ #t3) ⇒
    (∃ #t2.
      (((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ∧
       (∀ #t1. (Delete( x ) @ #t1) ⇒ ((#t1 < #t2) ∨ (#t3 < #t1)))) ∧
      (∀ #t1 yp.
        (Insert( x, yp ) @ #t1) ⇒ (((#t1 < #t2) ∨ (#t1 = #t2)) ∨ (#t3 < #t1))))"

restriction set_notin:
  "∀ x #t3.
    (IsNotSet( x ) @ #t3) ⇒
    ((∀ #t1 y. (Insert( x, y ) @ #t1) ⇒ (#t3 < #t1)) ∨
     (∃ #t1.
       ((Delete( x ) @ #t1) ∧ (#t1 < #t3)) ∧
       (∀ #t2 y. ((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ⇒ (#t2 < #t1))))"

restriction locking:
  "∀ l x lp #t1 #t3.
    ((Lock( l, x ) @ #t1) ∧ (Lock( lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock( l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0. (Unlock( l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ lp.1 #t0.
            (Lock( lp.1, x ) @ #t0) ⇒ (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ lp.1 #t0.
           (Unlock( lp.1, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma types [sources]:
  all-traces
  "(∀ ni m1 #i.
     (IN_R_1_ni( ni, m1 ) @ #i) ⇒
     ((∃ #j. (!KU( ni ) @ #j) ∧ (#j < #i)) ∨ (∃ #j. OUT_I_1( m1 ) @ #j))) ∧
   (∀ nr m2 #i.
     (IN_I_2_nr( nr, m2 ) @ #i) ⇒
     ((∃ #j. (!KU( nr ) @ #j) ∧ (#j < #i)) ∨ (∃ #j. OUT_R_1( m2 ) @ #j)))"
/*
guarded formula characterizing all counter-examples:
"((∃ ni m1 #i.
    (IN_R_1_ni( ni, m1 ) @ #i)
   ∧
    (∀ #j. (!KU( ni ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j. (OUT_I_1( m1 ) @ #j) ⇒ ⊥)) ∨
  (∃ nr m2 #i.
    (IN_I_2_nr( nr, m2 ) @ #i)
   ∧
    (∀ #j. (!KU( nr ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j. (OUT_R_1( m2 ) @ #j) ⇒ ⊥)))"
*/
induction
  case non_empty_trace
  simplify
  solve( (∃ ni m1 #i.
           (IN_R_1_ni( ni, m1 ) @ #i)
          ∧
           (∀ #j. (!KU( ni ) @ #j) ⇒ ¬(#j < #i)) ∧
           (∀ #j. (OUT_I_1( m1 ) @ #j) ⇒ ⊥))  ∥
         (∃ nr m2 #i.
           (IN_I_2_nr( nr, m2 ) @ #i)
          ∧
           (∀ #j. (!KU( nr ) @ #j) ⇒ ¬(#j < #i)) ∧
           (∀ #j. (OUT_R_1( m2 ) @ #j) ⇒ ⊥)) )
    case case_2
    solve( ((∀ ni m1 #i.
              (IN_R_1_ni( ni, m1 ) @ #i)
             ⇒
              ((last(#i)) ∨
               (∃ #j. (!KU( ni ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
               (∃ #j. (OUT_I_1( m1 ) @ #j) ∧ ¬(last(#j))))) ∧
            (∀ nr m2 #i.
              (IN_I_2_nr( nr, m2 ) @ #i)
             ⇒
              ((last(#i)) ∨
               (∃ #j. (!KU( nr ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
               (∃ #j. (OUT_R_1( m2 ) @ #j) ∧ ¬(last(#j))))))  ∥
           (∃ x y #t3.
             (IsIn( x, y ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (∀ #t2.
               (Insert( x, y ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (#t2 = #t3) ∨
                (#t3 < #t2) ∨
                (∃ #t1.
                  (Delete( x ) @ #t1)
                 ∧
                  (¬(last(#t1))) ∧
                  (((#t1 = #t2) ∨ (#t2 < #t1))) ∧
                  (((#t3 = #t1) ∨ (#t1 < #t3)))) ∨
                (∃ #t1 yp.
                  (Insert( x, yp ) @ #t1)
                 ∧
                  (¬(last(#t1))) ∧
                  (((#t1 = #t2) ∨ (#t2 < #t1))) ∧
                  (¬(#t1 = #t2)) ∧
                  (((#t3 = #t1) ∨ (#t1 < #t3)))))))  ∥
           (∃ x #t3.
             (IsNotSet( x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (∃ #t1 y.
               (Insert( x, y ) @ #t1)
              ∧
               (¬(last(#t1))) ∧ (((#t3 = #t1) ∨ (#t1 < #t3)))) ∧
             (∀ #t1.
               (Delete( x ) @ #t1)
              ⇒
               ((last(#t1)) ∨
                (#t1 = #t3) ∨
                (#t3 < #t1) ∨
                (∃ #t2 y.
                  (Insert( x, y ) @ #t2)
                 ∧
                  (¬(last(#t2))) ∧ (#t2 < #t3) ∧ (((#t2 = #t1) ∨ (#t1 < #t2)))))))  ∥
           (∃ l x lp #t1 #t3.
             (Lock( l, x ) @ #t1) ∧ (Lock( lp, x ) @ #t3)
            ∧
             (¬(last(#t3))) ∧
             (¬(last(#t1))) ∧
             (((#t1 = #t3) ∨
               (#t3 < #t1) ∨
               (∀ #t2.
                 (Unlock( l, x ) @ #t2)
                ⇒
                 ((last(#t2)) ∨
                  (#t1 = #t2) ∨
                  (#t2 < #t1) ∨
                  (#t2 = #t3) ∨
                  (#t3 < #t2) ∨
                  (∃ #t0. (Unlock( l, x ) @ #t0) ∧ (¬(last(#t0))) ∧ (¬(#t0 = #t2))) ∨
                  (∃ lp.1 #t0.
                    (Lock( lp.1, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (¬(#t0 = #t1)) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2)))) ∨
                  (∃ lp.1 #t0.
                    (Unlock( lp.1, x ) @ #t0)
                   ∧
                    (¬(last(#t0))) ∧
                    (((#t0 = #t1) ∨ (#t1 < #t0))) ∧
                    (((#t2 = #t0) ∨ (#t0 < #t2))) ∧
                    (¬(#t2 = #t0))))))) ∧
             (((#t3 = #t1) ∨ (#t1 < #t3))) ∧
             (¬(#t1 = #t3))) )
      case case_1
      solve( (last(#i))  ∥
             (∃ #j. (!KU( nr ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
             (∃ #j. (OUT_R_1( aenc(<'2', ~ni, x>, pk(ltkI)) ) @ #j) ∧ ¬(last(#j))) )
        case case_1
        solve( State_1211111111( $I, $R, ~ni, ltkI, pkR, x ) ▶₀ #i )
          case in_aenc_2_ni_x_pkltkI_121111111
          solve( Insert( <'Ltk', $I>, ltkI ) @ #t2 )
            case insert_Ltk_A_ltkA_11111111
            solve( State_11111111( $I, ~lock6, ~ltkA ) ▶₀ #t2 )
              case lock_A_1111111
              solve( Insert( <'Pk', $R>, pkR ) @ #t2.1 )
                case insert_Pk_A_pkltkA_111111111
                solve( State_111111111( $R, ~lock6.1, ~ltkA.1 ) ▶₀ #t2.1 )
                  case insert_Ltk_A_ltkA_11111111
                  solve( !KU( aenc(<'2', ~ni, x>, pk(~ltkA)) ) @ #vk )
                    case c_aenc
                    solve( !KU( ~ni ) @ #vk.8 )
                      case out_aenc_1_ni_I_pkR_1211111
                      solve( (#t2.1 < #t2.2)  ∥ (#t2.1 = #t2.2) )
                        case case_2
                        solve( !KU( ~ltkA.1 ) @ #vk.10 )
                          case out_ltkA_1121111
                          solve( Insert( <'Ltk', A>, t ) @ #t2.2 )
                            case insert_Ltk_A_ltkA_11111111
                            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                              case Var_fresh_2_ltkA
                              solve( State_11111111( $A, ~lock6.2, ~ltkA.1 ) ▶₀ #t2.2 )
                                case lock_A_1111111
                                solve( !KU( pk(~ltkA) ) @ #vk.8 )
                                  case c_pk
                                  solve( !KU( ~ltkA ) @ #vk.11 )
                                    case out_ltkA_1121111
                                    solve( Insert( <'Ltk', A.1>, t ) @ #t2.3 )
                                      case insert_Ltk_A_ltkA_11111111
                                      solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                                        case Var_fresh_2_ltkA
                                        solve( State_11111111( $A.1, ~lock6.2, ~ltkA ) ▶₀ #t2.3 )
                                          case lock_A_1111111
                                          solve( splitEqs(0) )
                                            case split_case_3
                                            SOLVED // trace found
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma nonce_secrecy:
  all-traces
  "¬(∃ A B s #i.
      (((Secret( A, B, s ) @ #i) ∧ (∃ #j. K( s ) @ #j)) ∧
       (¬(∃ #r. RevLtk( A ) @ #r))) ∧
      (¬(∃ #r. RevLtk( B ) @ #r)))"
/*
guarded formula characterizing all counter-examples:
"∃ A B s #i.
  (Secret( A, B, s ) @ #i)
 ∧
  (∃ #j. (K( s ) @ #j)) ∧
  (∀ #r. (RevLtk( A ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (RevLtk( B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( Secret( A, B, s ) @ #i )
  case event_Secret_R_I_ni_21111111111111
  solve( State_21111111111111( $I, $R, ~nr, ltkR, s, pkI ) ▶₀ #i )
    case event_Secret_R_I_nr_2111111111111
    solve( Insert( <'Pk', $I>, pkI ) @ #t2 )
      case insert_Pk_A_pkltkA_111111111
      solve( State_111111111( $I, ~lock6, ~ltkA ) ▶₀ #t2 )
        case insert_Ltk_A_ltkA_11111111
        solve( Insert( <'Ltk', $R>, ltkR ) @ #t2.1 )
          case insert_Ltk_A_ltkA_11111111
          solve( State_11111111( $R, ~lock6.1, ~ltkA ) ▶₀ #t2.1 )
            case lock_A_1111111
            solve( !KU( aenc(<'3', ~nr>, pk(~ltkA)) ) @ #vk.1 )
              case c_aenc
              solve( !KU( ~nr ) @ #vk.8 )
                case out_aenc_3_x_XOR_R_pkR_1211111111111_case_1
                solve( (#t2 < #t2.4)  ∥ (#t2 = #t2.4) )
                  case case_2
                  solve( (#t2.1 < #t2.4)  ∥ (#t2.1 = #t2.4) )
                    case case_2
                    solve( Insert( <'Ltk', $I.1>, ~ltkA.1 ) @ #t2.2 )
                      case insert_Ltk_A_ltkA_11111111
                      solve( State_11111111( $I.1, ~lock6.2, ~ltkA.1 ) ▶₀ #t2.2 )
                        case lock_A_1111111
                        solve( Insert( <'Pk', $R.1>, pk(x) ) @ #t2.3 )
                          case insert_Pk_A_pkltkA_111111111
                          solve( State_111111111( $R.1, ~lock6.2, ~ltkA.2 ) ▶₀ #t2.3 )
                            case insert_Ltk_A_ltkA_11111111
                            solve( !KU( ~ni ) @ #vk.3 )
                              case out_aenc_1_ni_I_pkR_1211111
                              solve( (#t2.3 < #t2.4)  ∥ (#t2.3 = #t2.4) )
                                case case_2
                                solve( !KU( ~ltkA.2 ) @ #vk.10 )
                                  case out_ltkA_1121111
                                  solve( Insert( <'Ltk', A>, t ) @ #t2.4 )
                                    case insert_Ltk_A_ltkA_11111111
                                    solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                      case Var_fresh_3_ltkA
                                      solve( State_11111111( $A, ~lock6.3, ~ltkA.2 ) ▶₀ #t2.4 )
                                        case lock_A_1111111
                                        solve( !KU( aenc(<'1', ~ni, $I>, pk(~ltkA)) ) @ #vk.5 )
                                          case c_aenc
                                          solve( !KU( pk(~ltkA) ) @ #vk.10 )
                                            case out_pkltkA_11111111111
                                            solve( !KU( aenc(<'2', ~ni, ($R⊕~nr)>, pk(~ltkA.1)) ) @ #vk.13 )
                                              case out_aenc_2_ni_nr_XOR_R_pkI_2111111111
                                              solve( (#t2 < #t2.5)  ∥ (#t2 = #t2.5) )
                                                case case_2
                                                solve( (#t2.1 < #t2.5)  ∥ (#t2.1 = #t2.5) )
                                                  case case_2
                                                  solve( !KU( ($A⊕$R) ) @ #vk.15 )
                                                    case c_xor
                                                    SOLVED // trace found
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma injective_agree:
  all-traces
  "∀ actor peer params #i.
    (Commit( actor, peer, params ) @ #i) ⇒
    (((∃ #j.
        ((Running( actor, peer, params ) @ #j) ∧ (#j < #i)) ∧
        (¬(∃ actor2 peer2 #i2.
            (Commit( actor2, peer2, params ) @ #i2) ∧ (¬(#i = #i2))))) ∨
      (∃ #r. RevLtk( actor ) @ #r)) ∨
     (∃ #r. RevLtk( peer ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ actor peer params #i.
  (Commit( actor, peer, params ) @ #i)
 ∧
  (∀ #j.
    (Running( actor, peer, params ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ actor2 peer2 #i2.
       (Commit( actor2, peer2, params ) @ #i2) ∧ ¬(#i = #i2)))) ∧
  (∀ #r. (RevLtk( actor ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (RevLtk( peer ) @ #r) ⇒ ⊥)"
*/
simplify
solve( Commit( actor, peer, params ) @ #i )
  case event_Commit_R_I_resp_ni_nr__211111111111
  solve( State_211111111111( $I, $R, ~nr, ltkR, ni, pkI ) ▶₀ #i )
    case in_aenc_3_nr_pkltkR_21111111111
    solve( Insert( <'Pk', $I>, pkI ) @ #t2 )
      case insert_Pk_A_pkltkA_111111111
      solve( State_111111111( $I, ~lock6, ~ltkA ) ▶₀ #t2 )
        case insert_Ltk_A_ltkA_11111111
        solve( Insert( <'Ltk', $R>, ltkR ) @ #t2.1 )
          case insert_Ltk_A_ltkA_11111111
          solve( State_11111111( $R, ~lock6.1, ~ltkA ) ▶₀ #t2.1 )
            case lock_A_1111111
            solve( !KU( aenc(<'3', ~nr>, pk(~ltkA)) ) @ #vk )
              case c_aenc
              solve( !KU( ~nr ) @ #vk.7 )
                case out_aenc_3_x_XOR_R_pkR_1211111111111_case_1
                solve( (#t2 < #t2.4)  ∥ (#t2 = #t2.4) )
                  case case_2
                  solve( (#t2.1 < #t2.4)  ∥ (#t2.1 = #t2.4) )
                    case case_2
                    solve( Insert( <'Ltk', $I.1>, ~ltkA.1 ) @ #t2.2 )
                      case insert_Ltk_A_ltkA_11111111
                      solve( State_11111111( $I.1, ~lock6.2, ~ltkA.1 ) ▶₀ #t2.2 )
                        case lock_A_1111111
                        solve( Insert( <'Pk', $R.1>, pk(x) ) @ #t2.3 )
                          case insert_Pk_A_pkltkA_111111111
                          solve( State_111111111( $R.1, ~lock6.2, ~ltkA.2 ) ▶₀ #t2.3 )
                            case insert_Ltk_A_ltkA_11111111
                            solve( !KU( ~ltkA.2 ) @ #vk.9 )
                              case out_ltkA_1121111
                              solve( Insert( <'Ltk', A>, t ) @ #t2.4 )
                                case insert_Ltk_A_ltkA_11111111
                                solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                                  case Var_fresh_3_ltkA
                                  solve( State_11111111( $A, ~lock6.3, ~ltkA.2 ) ▶₀ #t2.4 )
                                    case lock_A_1111111
                                    solve( !KU( aenc(<'1', ~ni, $I>, pk(~ltkA)) ) @ #vk.4 )
                                      case c_aenc
                                      solve( !KU( ~ni ) @ #vk.16 )
                                        case out_aenc_1_ni_I_pkR_1211111
                                        solve( (#t2.3 < #t2.5)  ∥ (#t2.3 = #t2.5) )
                                          case case_2
                                          solve( !KU( pk(~ltkA) ) @ #vk.11 )
                                            case out_pkltkA_11111111111
                                            solve( !KU( aenc(<'2', ~ni, ($R⊕~nr)>, pk(~ltkA.1)) ) @ #vk.13 )
                                              case out_aenc_2_ni_nr_XOR_R_pkI_2111111111
                                              solve( (#t2 < #t2.5)  ∥ (#t2 = #t2.5) )
                                                case case_2
                                                solve( (#t2.1 < #t2.5)  ∥ (#t2.1 = #t2.5) )
                                                  case case_2
                                                  solve( !KU( ($A⊕$R) ) @ #vk.15 )
                                                    case c_xor
                                                    SOLVED // trace found
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma session_key_setup_possible:
  exists-trace
  "∃ A B s #i.
    ((Secret( A, B, s ) @ #i) ∧ (¬(∃ #r. RevLtk( A ) @ #r))) ∧
    (¬(∃ #r. RevLtk( B ) @ #r))"
/*
guarded formula characterizing all satisfying traces:
"∃ A B s #i.
  (Secret( A, B, s ) @ #i)
 ∧
  (∀ #r. (RevLtk( A ) @ #r) ⇒ ⊥) ∧ (∀ #r. (RevLtk( B ) @ #r) ⇒ ⊥)"
*/
simplify
solve( Secret( A, B, s ) @ #i )
  case event_Secret_I_R_ni_121111111111111
  solve( State_121111111111111( $I, $R, ~ni, ltkI, pkR, x ) ▶₀ #i )
    case event_Secret_I_R_x_XOR_R_12111111111111
    solve( Insert( <'Ltk', $I>, ltkI ) @ #t2 )
      case insert_Ltk_A_ltkA_11111111
      solve( State_11111111( $I, ~lock6, ~ltkA ) ▶₀ #t2 )
        case lock_A_1111111
        solve( Insert( <'Pk', $R>, pkR ) @ #t2.1 )
          case insert_Pk_A_pkltkA_111111111
          solve( State_111111111( $R, ~lock6.1, ~ltkA.1 ) ▶₀ #t2.1 )
            case insert_Ltk_A_ltkA_11111111
            solve( !KU( aenc(<'2', ~ni, x>, pk(~ltkA)) ) @ #vk )
              case out_aenc_2_ni_nr_XOR_R_pkI_2111111111
              solve( Insert( <'Pk', $I.1>, pk(~ltkA) ) @ #t2.2 )
                case insert_Pk_A_pkltkA_111111111
                solve( State_111111111( $I.1, ~lock6.2, ~ltkA ) ▶₀ #t2.2 )
                  case insert_Ltk_A_ltkA_11111111
                  solve( Insert( <'Ltk', $R.1>, ltkR ) @ #t2.3 )
                    case insert_Ltk_A_ltkA_11111111
                    solve( State_11111111( $R.1, ~lock6.2, ~ltkA.2 ) ▶₀ #t2.3 )
                      case lock_A_1111111
                      solve( splitEqs(1) )
                        case split_case_1
                        solve( !KU( aenc(<'1', ~ni, $I>, pk(~ltkA.1)) ) @ #vk.4 )
                          case out_aenc_1_ni_I_pkR_1211111
                          solve( (#t2.1 < #t2.4)  ∥ (#t2.1 = #t2.4) )
                            case case_2
                            SOLVED // trace found
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/*
WARNING: the following wellformedness checks failed!

unbound:
  rule `lookup_Ltk_A_as_ltkA_0_11211' has unbound variables: 
    ltkA
  
  rule `lookup_Pk_R_as_pkR_0_1211' has unbound variables: 
    pkR
  
  rule `lookup_Ltk_I_as_ltkI_0_12111111' has unbound variables: 
    ltkI
  
  rule `lookup_Ltk_R_as_ltkR_0_211' has unbound variables: 
    ltkR
  
  rule `lookup_Pk_I_as_pkI_0_21111' has unbound variables: 
    pkI

Restriction actions:
  restriction `set_in' references action 
    (ProtoFact Linear "Delete" 1,1,Linear)
  but no rule has such an action.
  
  restriction `set_notin' references action 
    (ProtoFact Linear "Delete" 1,1,Linear)
  but no rule has such an action.
*/

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.
SAPIC tool: 'sapic'
Checking availablity ... OK.


analyzing: case-studies-sapic-regression/xor/NSLPK3xor.spthy

------------------------------------------------------------------------------
analyzed: case-studies-sapic-regression/xor/NSLPK3xor.spthy

  output:          case-studies-sapic-regression/xor/NSLPK3xor.spthy.tmp
  processing time: 23.491249083s
  WARNING: 7 wellformedness check failed!
           The analysis results might be wrong!
  
  types (all-traces): falsified - found trace (24 steps)
  nonce_secrecy (all-traces): falsified - found trace (28 steps)
  injective_agree (all-traces): falsified - found trace (28 steps)
  session_key_setup_possible (exists-trace): verified (16 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: case-studies-sapic-regression/xor/NSLPK3xor.spthy

  output:          case-studies-sapic-regression/xor/NSLPK3xor.spthy.tmp
  processing time: 23.491249083s
  WARNING: 7 wellformedness check failed!
           The analysis results might be wrong!
  
  types (all-traces): falsified - found trace (24 steps)
  nonce_secrecy (all-traces): falsified - found trace (28 steps)
  injective_agree (all-traces): falsified - found trace (28 steps)
  session_key_setup_possible (exists-trace): verified (16 steps)

==============================================================================
*/
