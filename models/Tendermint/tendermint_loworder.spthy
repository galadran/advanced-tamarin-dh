
theory tendermint_loworder
begin

/* Author: Dennis Jackson */



builtins: diffie-hellman,signing,hashing,symmetric-encryption

/*
==============================================================================
summary of summaries:

analyzed: tendermint_loworder.spthy

  weak_functional (exists-trace): verified (14 steps)
  strong_functional (exists-trace): verified (14 steps)
  init_key_secret (all-traces): verified (1597 steps)
  resp_key_secret (all-traces): verified (475 steps)

==============================================================================

real	0m33.503s
user	5m5.404s
sys	5m28.604s

Note: No need to duplicate exponentiation for the twist case as both are nearly-prime
and twist-secure.
*/


functions: element/3, extract_element/1
equations: extract_element(element(t,s,n)) = n

restriction Consistency:
	"All  t s r1 r2 y #i #j .
	Raised(t,s,r1,y) @ i & Raised(t,s,r2,y) @j
	==> r1 = r2"

restriction Identity:
	"All  t r y #i .
	Raised(t,grpid,r,y) @ i ==> r = grpid"

rule setup:
	let
		pubkey = pk(~s)
	in
	[Fr(~id),Fr(~s)]
	--[Honest(pubkey)]->
	[!Role(~id,~s), !Cert(~id,pubkey),Out(pubkey)]

rule adv_setup: //Proof of posessesion check
	[Fr(~id),In(sk)]
	--[Dishonest(pk(sk))]->
	[!Cert(~id,pk(sk))]

rule Init_1:
	let
		iDH = element('C',grpid,'g'^~x)
	in
	[!Role(~id,~st),!Cert(~resp,rPk),Fr(~x)]
	-->
	[Out(iDH),Session_I_1(~id,rPk,~x)]

rule Resp_1:
	let
		n = 'g'^eph
		eDH = element(t,s,n)
		rDH= element('C',grpid,'g'^~y)
		key = element(t,r,n^~y)
	in
	[!Role(~id,~st),!Cert(~init,iPk),Fr(~y),In(eDH),In(r)]
	--[Raised(t,s,r,~y)]->
	[Out(rDH),Session_R_1(~id,iPk,key)]

rule Init_2:
	let
		n = 'g'^eph
		eDH = element(t,su,n)
		key = element(t,r,n^~x)
		sig = sign(h(<'I',key>),~s)
		iPk = pk(~s)
		ct =  senc(<iPk,sig>,key)
	in
	[!Role(~id,~s),In(eDH),Session_I_1(~id,rPk,~x),In(r)]
	--[Raised(t,su,r,~x)]->
	[Session_I_2(~id,rPk,key),Out(ct)]

rule Resp_2:
	let
		sm = h(<'I',key>)
		rPk = pk(~s)
		inc_ct =senc(<iPk,sig>,key)
		out_ct = senc(<rPk,sign(h(<'R',key>),~s)>,key)
	in
	[!Role(~id,~s),In(inc_ct),Session_R_1(~id,iPk,key)]
	--[Eq(verify(sig,sm,iPk),true),R_Finish(iPk,rPk,key)]->
	[Out(out_ct)]

rule Init_3:
	let
		ct = senc(<rPk,sig>,key)
		iPk = pk(~s)
	in
	[!Role(~id,~s),In(ct),Session_I_2(~id,rPk,key)]
	--[Eq(verify(sig,h(<'R',key>),rPk),true),I_Finish(iPk,rPk,key)]->
	[]

restriction Equality:
	"All x y #i . Eq(x,y) @ i ==> x = y"

lemma weak_functional:
	exists-trace
	"Ex i r k #i #j . I_Finish(i,r,k) @ i & R_Finish(i,r,k) @ j"

lemma strong_functional:
	exists-trace
	"Ex i r k #i #j #k #l  . Honest(r) @ l & Honest(i)@ k & I_Finish(i,r,k) @ i & R_Finish(i,r,k) @ j"

lemma init_key_secret:
	"All i r k #i #j #k . Honest(i) @ i & Honest(r) @ j & I_Finish(i,r,k) @ k
	==>
	(not Ex #l . K(k) @ l)"

lemma resp_key_secret:
	"All i r k #i #j #k . Honest(i) @ i & Honest(r) @ j & R_Finish(i,r,k) @ k
	==>
	(not Ex #l . K(k) @ l)"
end
